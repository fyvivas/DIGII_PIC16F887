

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Feb 24 11:32:43 2022

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	intentry,global,class=CODE,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    13                           	dabs	1,0x7E,2
    14  0000                     
    15                           ; Version 1.41
    16                           ; Generated 25/01/2017 GMT
    17                           ; 
    18                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F887 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     	;# 
    50  0001                     	;# 
    51  0002                     	;# 
    52  0003                     	;# 
    53  0004                     	;# 
    54  0005                     	;# 
    55  0006                     	;# 
    56  0007                     	;# 
    57  0008                     	;# 
    58  0009                     	;# 
    59  000A                     	;# 
    60  000B                     	;# 
    61  000C                     	;# 
    62  000D                     	;# 
    63  000E                     	;# 
    64  000E                     	;# 
    65  000F                     	;# 
    66  0010                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0013                     	;# 
    70  0014                     	;# 
    71  0015                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001B                     	;# 
    79  001B                     	;# 
    80  001C                     	;# 
    81  001D                     	;# 
    82  001E                     	;# 
    83  001F                     	;# 
    84  0081                     	;# 
    85  0085                     	;# 
    86  0086                     	;# 
    87  0087                     	;# 
    88  0088                     	;# 
    89  0089                     	;# 
    90  008C                     	;# 
    91  008D                     	;# 
    92  008E                     	;# 
    93  008F                     	;# 
    94  0090                     	;# 
    95  0091                     	;# 
    96  0092                     	;# 
    97  0093                     	;# 
    98  0093                     	;# 
    99  0093                     	;# 
   100  0094                     	;# 
   101  0095                     	;# 
   102  0096                     	;# 
   103  0097                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009A                     	;# 
   107  009B                     	;# 
   108  009C                     	;# 
   109  009D                     	;# 
   110  009E                     	;# 
   111  009F                     	;# 
   112  0105                     	;# 
   113  0107                     	;# 
   114  0108                     	;# 
   115  0109                     	;# 
   116  010C                     	;# 
   117  010C                     	;# 
   118  010D                     	;# 
   119  010E                     	;# 
   120  010F                     	;# 
   121  0185                     	;# 
   122  0187                     	;# 
   123  0188                     	;# 
   124  0189                     	;# 
   125  018C                     	;# 
   126  018D                     	;# 
   127  0008                     _PORTD	set	8
   128  0005                     _PORTAbits	set	5
   129  000C                     _PIR1bits	set	12
   130  000E                     _TMR1L	set	14
   131  000F                     _TMR1H	set	15
   132  0010                     _T1CONbits	set	16
   133  000B                     _INTCONbits	set	11
   134  0088                     _TRISD	set	136
   135  008C                     _PIE1bits	set	140
   136  0429                     _TRISA1	set	1065
   137  0428                     _TRISA0	set	1064
   138  0188                     _ANSEL	set	392
   139                           
   140                           ; #config settings
   141  0000                     
   142                           	psect	cinit
   143  0015                     start_initialization:	
   144  0015                     __initialization:	
   145                           
   146                           ; Clear objects allocated to BANK0
   147  0015  1283               	bcf	3,5	;RP0=0, select bank0
   148  0016  1303               	bcf	3,6	;RP1=0, select bank0
   149  0017  01AB               	clrf	__pbssBANK0& (0+127)
   150  0018  01AC               	clrf	(__pbssBANK0+1)& (0+127)
   151  0019  01AD               	clrf	(__pbssBANK0+2)& (0+127)
   152  001A  01AE               	clrf	(__pbssBANK0+3)& (0+127)
   153  001B  01AF               	clrf	(__pbssBANK0+4)& (0+127)
   154  001C                     end_of_initialization:	
   155                           ;End of C runtime variable initialization code
   156                           
   157  001C                     __end_of__initialization:	
   158  001C  0183               	clrf	3
   159  001D  120A  118A  2917   	ljmp	_main	;jump to C main() function
   160                           
   161                           	psect	bssBANK0
   162  002B                     __pbssBANK0:	
   163  002B                     _counter_segundos:	
   164  002B                     	ds	2
   165  002D                     _counter_20ms:	
   166  002D                     	ds	1
   167  002E                     _counter_digito:	
   168  002E                     	ds	1
   169  002F                     _flag_run:	
   170  002F                     	ds	1
   171                           
   172                           	psect	cstackCOMMON
   173  0070                     __pcstackCOMMON:	
   174  0070                     ?_ISR_TIMER_1:	
   175  0070                     ?_main:	
   176                           ; 1 bytes @ 0x0
   177                           
   178  0070                     ?___lwdiv:	
   179                           ; 2 bytes @ 0x0
   180                           
   181  0070                     ___lwdiv@divisor:	
   182                           ; 2 bytes @ 0x0
   183                           
   184                           
   185                           ; 2 bytes @ 0x0
   186  0070                     	ds	2
   187  0072                     ___lwdiv@dividend:	
   188                           
   189                           ; 2 bytes @ 0x2
   190  0072                     	ds	2
   191  0074                     ??___lwdiv:	
   192                           
   193                           ; 1 bytes @ 0x4
   194  0074                     	ds	1
   195  0075                     ___lwdiv@quotient:	
   196                           
   197                           ; 2 bytes @ 0x5
   198  0075                     	ds	2
   199  0077                     ___lwdiv@counter:	
   200                           
   201                           ; 1 bytes @ 0x7
   202  0077                     	ds	1
   203  0078                     ?___lwmod:	
   204  0078                     ___lwmod@divisor:	
   205                           ; 2 bytes @ 0x8
   206                           
   207                           
   208                           ; 2 bytes @ 0x8
   209  0078                     	ds	2
   210  007A                     ___lwmod@dividend:	
   211                           
   212                           ; 2 bytes @ 0xA
   213  007A                     	ds	2
   214  007C                     ??___lwmod:	
   215                           
   216                           ; 1 bytes @ 0xC
   217  007C                     	ds	1
   218  007D                     ___lwmod@counter:	
   219                           
   220                           ; 1 bytes @ 0xD
   221  007D                     	ds	1
   222                           
   223                           	psect	cstackBANK0
   224  0020                     __pcstackBANK0:	
   225  0020                     ??_ISR_TIMER_1:	
   226                           
   227                           ; 1 bytes @ 0x0
   228  0020                     	ds	5
   229  0025                     _ISR_TIMER_1$593:	
   230                           
   231                           ; 2 bytes @ 0x5
   232  0025                     	ds	2
   233  0027                     _ISR_TIMER_1$594:	
   234                           
   235                           ; 2 bytes @ 0x7
   236  0027                     	ds	2
   237  0029                     ??_main:	
   238                           
   239                           ; 1 bytes @ 0x9
   240  0029                     	ds	2
   241                           
   242                           	psect	maintext
   243  0117                     __pmaintext:	
   244 ;;
   245 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   246 ;;
   247 ;; *************** function _main *****************
   248 ;; Defined at:
   249 ;;		line 30 in file "reloj.c"
   250 ;; Parameters:    Size  Location     Type
   251 ;;		None
   252 ;; Auto vars:     Size  Location     Type
   253 ;;		None
   254 ;; Return value:  Size  Location     Type
   255 ;;                  2   36[None  ] int 
   256 ;; Registers used:
   257 ;;		wreg, status,2, status,0
   258 ;; Tracked objects:
   259 ;;		On entry : B00/0
   260 ;;		On exit  : 0/0
   261 ;;		Unchanged: 0/0
   262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   263 ;;      Params:         0       0       0       0       0
   264 ;;      Locals:         0       0       0       0       0
   265 ;;      Temps:          0       2       0       0       0
   266 ;;      Totals:         0       2       0       0       0
   267 ;;Total ram usage:        2 bytes
   268 ;; Hardware stack levels required when called:    2
   269 ;; This function calls:
   270 ;;		Nothing
   271 ;; This function is called by:
   272 ;;		Startup code after reset
   273 ;; This function uses a non-reentrant model
   274 ;;
   275                           
   276                           
   277                           ;psect for function _main
   278  0117                     _main:	
   279                           
   280                           ;reloj.c: 31: INTCONbits.GIE = 0;
   281                           
   282                           ;incstack = 0
   283                           ; Regs used in _main: [wreg+status,2+status,0]
   284  0117  138B               	bcf	11,7	;volatile
   285                           
   286                           ;reloj.c: 33: T1CONbits.TMR1CS = 0;
   287  0118  1283               	bcf	3,5	;RP0=0, select bank0
   288  0119  1303               	bcf	3,6	;RP1=0, select bank0
   289  011A  1090               	bcf	16,1	;volatile
   290                           
   291                           ;reloj.c: 34: T1CONbits.T1CKPS = 0b01;
   292  011B  0810               	movf	16,w	;volatile
   293  011C  39CF               	andlw	-49
   294  011D  3810               	iorlw	16
   295  011E  0090               	movwf	16	;volatile
   296                           
   297                           ;reloj.c: 35: TMR1H = 0xD8;
   298  011F  30D8               	movlw	216
   299  0120  008F               	movwf	15	;volatile
   300                           
   301                           ;reloj.c: 36: TMR1L = 0xEF;
   302  0121  30EF               	movlw	239
   303  0122  008E               	movwf	14	;volatile
   304                           
   305                           ;reloj.c: 37: T1CONbits.TMR1ON = 1;
   306  0123  1410               	bsf	16,0	;volatile
   307                           
   308                           ;reloj.c: 38: PIR1bits.TMR1IF = 0;
   309  0124  100C               	bcf	12,0	;volatile
   310                           
   311                           ;reloj.c: 39: PIE1bits.TMR1IE = 1;
   312  0125  1683               	bsf	3,5	;RP0=1, select bank1
   313  0126  1303               	bcf	3,6	;RP1=0, select bank1
   314  0127  140C               	bsf	12,0	;volatile
   315                           
   316                           ;reloj.c: 40: INTCONbits.PEIE = 1;
   317  0128  170B               	bsf	11,6	;volatile
   318                           
   319                           ;reloj.c: 41: INTCONbits.GIE = 1;
   320  0129  178B               	bsf	11,7	;volatile
   321                           
   322                           ;reloj.c: 42: TRISD = 0;
   323  012A  0188               	clrf	8	;volatile
   324                           
   325                           ;reloj.c: 43: TRISA0 = 1;
   326  012B  1405               	bsf	5,0	;volatile
   327                           
   328                           ;reloj.c: 44: TRISA1 = 1;
   329  012C  1485               	bsf	5,1	;volatile
   330                           
   331                           ;reloj.c: 45: ANSEL = 0x00;
   332  012D  1683               	bsf	3,5	;RP0=1, select bank3
   333  012E  1703               	bsf	3,6	;RP1=1, select bank3
   334  012F  0188               	clrf	8	;volatile
   335  0130                     l717:	
   336                           ;reloj.c: 47: while (1) {
   337                           
   338                           
   339                           ;reloj.c: 48: if (!PORTAbits.RA0) {
   340  0130  1283               	bcf	3,5	;RP0=0, select bank0
   341  0131  1303               	bcf	3,6	;RP1=0, select bank0
   342  0132  1805               	btfsc	5,0	;volatile
   343  0133  2957               	goto	l725
   344                           
   345                           ;reloj.c: 49: _delay((unsigned long)((50)*(4000000/4000.0)));
   346  0134  3041               	movlw	65
   347  0135  1283               	bcf	3,5	;RP0=0, select bank0
   348  0136  1303               	bcf	3,6	;RP1=0, select bank0
   349  0137  00AA               	movwf	??_main+1
   350  0138  30ED               	movlw	237
   351  0139  00A9               	movwf	??_main
   352  013A                     u557:	
   353  013A  0BA9               	decfsz	??_main,f
   354  013B  293A               	goto	u557
   355  013C  0BAA               	decfsz	??_main+1,f
   356  013D  293A               	goto	u557
   357  013E  293F               	nop2
   358                           
   359                           ;reloj.c: 50: flag_run = !flag_run;
   360  013F  1283               	bcf	3,5	;RP0=0, select bank0
   361  0140  1303               	bcf	3,6	;RP1=0, select bank0
   362  0141  082F               	movf	_flag_run,w
   363  0142  1D03               	btfss	3,2
   364  0143  2946               	goto	u420
   365  0144  3001               	movlw	1
   366  0145  2947               	goto	u430
   367  0146                     u420:	
   368  0146  3000               	movlw	0
   369  0147                     u430:	
   370  0147  00A9               	movwf	??_main
   371  0148  0829               	movf	??_main,w
   372  0149  00AF               	movwf	_flag_run
   373  014A                     l39:	
   374                           ;reloj.c: 51: while (!PORTAbits.RA0);
   375                           
   376  014A  1C05               	btfss	5,0	;volatile
   377  014B  294A               	goto	l39
   378                           
   379                           ;reloj.c: 52: _delay((unsigned long)((50)*(4000000/4000.0)));
   380  014C  3041               	movlw	65
   381  014D  1283               	bcf	3,5	;RP0=0, select bank0
   382  014E  1303               	bcf	3,6	;RP1=0, select bank0
   383  014F  00AA               	movwf	??_main+1
   384  0150  30ED               	movlw	237
   385  0151  00A9               	movwf	??_main
   386  0152                     u567:	
   387  0152  0BA9               	decfsz	??_main,f
   388  0153  2952               	goto	u567
   389  0154  0BAA               	decfsz	??_main+1,f
   390  0155  2952               	goto	u567
   391  0156  2957               	nop2
   392  0157                     l725:	
   393                           
   394                           ;reloj.c: 53: }
   395                           ;reloj.c: 54: if (!PORTAbits.RA1) {
   396  0157  1283               	bcf	3,5	;RP0=0, select bank0
   397  0158  1303               	bcf	3,6	;RP1=0, select bank0
   398  0159  1885               	btfsc	5,1	;volatile
   399  015A  2930               	goto	l717
   400                           
   401                           ;reloj.c: 55: _delay((unsigned long)((50)*(4000000/4000.0)));
   402  015B  3041               	movlw	65
   403  015C  1283               	bcf	3,5	;RP0=0, select bank0
   404  015D  1303               	bcf	3,6	;RP1=0, select bank0
   405  015E  00AA               	movwf	??_main+1
   406  015F  30ED               	movlw	237
   407  0160  00A9               	movwf	??_main
   408  0161                     u577:	
   409  0161  0BA9               	decfsz	??_main,f
   410  0162  2961               	goto	u577
   411  0163  0BAA               	decfsz	??_main+1,f
   412  0164  2961               	goto	u577
   413  0165  2966               	nop2
   414                           
   415                           ;reloj.c: 56: counter_segundos = 0;
   416  0166  1283               	bcf	3,5	;RP0=0, select bank0
   417  0167  1303               	bcf	3,6	;RP1=0, select bank0
   418  0168  01AB               	clrf	_counter_segundos
   419  0169  01AC               	clrf	_counter_segundos+1
   420                           
   421                           ;reloj.c: 57: flag_run = 0;
   422  016A  01AF               	clrf	_flag_run
   423  016B  2930               	goto	l717
   424  016C                     __end_of_main:	
   425                           ;reloj.c: 58: }
   426                           ;reloj.c: 59: }
   427                           ;reloj.c: 60: return 1;
   428                           ;	Return value of _main is never used
   429                           
   430                           
   431                           	psect	text1
   432  0020                     __ptext1:	
   433 ;; *************** function _ISR_TIMER_1 *****************
   434 ;; Defined at:
   435 ;;		line 63 in file "reloj.c"
   436 ;; Parameters:    Size  Location     Type
   437 ;;		None
   438 ;; Auto vars:     Size  Location     Type
   439 ;;		None
   440 ;; Return value:  Size  Location     Type
   441 ;;                  1    wreg      void 
   442 ;; Registers used:
   443 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   444 ;; Tracked objects:
   445 ;;		On entry : 0/0
   446 ;;		On exit  : 0/0
   447 ;;		Unchanged: 0/0
   448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   449 ;;      Params:         0       0       0       0       0
   450 ;;      Locals:         0       4       0       0       0
   451 ;;      Temps:          0       5       0       0       0
   452 ;;      Totals:         0       9       0       0       0
   453 ;;Total ram usage:        9 bytes
   454 ;; Hardware stack levels used:    1
   455 ;; Hardware stack levels required when called:    1
   456 ;; This function calls:
   457 ;;		___lwdiv
   458 ;;		___lwmod
   459 ;; This function is called by:
   460 ;;		Interrupt level 1
   461 ;; This function uses a non-reentrant model
   462 ;;
   463                           
   464                           
   465                           ;psect for function _ISR_TIMER_1
   466  0020                     _ISR_TIMER_1:	
   467                           
   468                           ;reloj.c: 64: if (PIE1bits.TMR1IE && PIR1bits.TMR1IF) {
   469  0020  1683               	bsf	3,5	;RP0=1, select bank1
   470  0021  1303               	bcf	3,6	;RP1=0, select bank1
   471  0022  1C0C               	btfss	12,0	;volatile
   472  0023  290B               	goto	i1l57
   473  0024  1283               	bcf	3,5	;RP0=0, select bank0
   474  0025  1303               	bcf	3,6	;RP1=0, select bank0
   475  0026  1C0C               	btfss	12,0	;volatile
   476  0027  290B               	goto	i1l57
   477                           
   478                           ;reloj.c: 65: TMR1H = 0xD8;
   479  0028  30D8               	movlw	216
   480  0029  008F               	movwf	15	;volatile
   481                           
   482                           ;reloj.c: 66: TMR1L = 0xEF;
   483  002A  30EF               	movlw	239
   484  002B  008E               	movwf	14	;volatile
   485                           
   486                           ;reloj.c: 68: if (++counter_20ms == 100 && flag_run) {
   487  002C  3001               	movlw	1
   488  002D  00A0               	movwf	??_ISR_TIMER_1
   489  002E  0820               	movf	??_ISR_TIMER_1,w
   490  002F  07AD               	addwf	_counter_20ms,f
   491  0030  3064               	movlw	100
   492  0031  062D               	xorwf	_counter_20ms,w
   493  0032  1D03               	btfss	3,2
   494  0033  28FC               	goto	i1l767
   495  0034  082F               	movf	_flag_run,w
   496  0035  1903               	btfsc	3,2
   497  0036  28FC               	goto	i1l767
   498                           
   499                           ;reloj.c: 69: counter_20ms = 0;
   500  0037  01AD               	clrf	_counter_20ms
   501                           
   502                           ;reloj.c: 70: if (++counter_segundos == 3600) {
   503  0038  3001               	movlw	1
   504  0039  07AB               	addwf	_counter_segundos,f
   505  003A  1803               	skipnc
   506  003B  0AAC               	incf	_counter_segundos+1,f
   507  003C  3000               	movlw	0
   508  003D  07AC               	addwf	_counter_segundos+1,f
   509  003E  3010               	movlw	16
   510  003F  062B               	xorwf	_counter_segundos,w
   511  0040  300E               	movlw	14
   512  0041  1903               	skipnz
   513  0042  062C               	xorwf	_counter_segundos+1,w
   514  0043  1D03               	btfss	3,2
   515  0044  28FC               	goto	i1l767
   516                           
   517                           ;reloj.c: 71: counter_segundos = 0;
   518  0045  01AB               	clrf	_counter_segundos
   519  0046  01AC               	clrf	_counter_segundos+1
   520                           
   521                           ;reloj.c: 72: }
   522                           ;reloj.c: 73: }
   523                           ;reloj.c: 75: switch (counter_digito) {
   524  0047  28FC               	goto	i1l767
   525  0048                     i1l749:	
   526                           ;reloj.c: 76: case 0:
   527                           
   528                           
   529                           ;reloj.c: 77: PORTD = (counter_digito << 4) + (counter_segundos / 60) / 10;
   530  0048  303C               	movlw	60
   531  0049  00F0               	movwf	___lwdiv@divisor
   532  004A  3000               	movlw	0
   533  004B  00F1               	movwf	___lwdiv@divisor+1
   534  004C  082C               	movf	_counter_segundos+1,w
   535  004D  00F3               	movwf	___lwdiv@dividend+1
   536  004E  082B               	movf	_counter_segundos,w
   537  004F  00F2               	movwf	___lwdiv@dividend
   538  0050  120A  118A  216C  120A  118A  	fcall	___lwdiv
   539  0055  0871               	movf	?___lwdiv+1,w
   540  0056  1283               	bcf	3,5	;RP0=0, select bank0
   541  0057  1303               	bcf	3,6	;RP1=0, select bank0
   542  0058  00A6               	movwf	_ISR_TIMER_1$593+1
   543  0059  0870               	movf	?___lwdiv,w
   544  005A  00A5               	movwf	_ISR_TIMER_1$593
   545                           
   546                           ;reloj.c: 77: PORTD = (counter_digito << 4) + (counter_segundos / 60) / 10;
   547  005B  082E               	movf	_counter_digito,w
   548  005C  00A0               	movwf	??_ISR_TIMER_1
   549  005D  3004               	movlw	4
   550  005E                     u51_25:	
   551  005E  1003               	clrc
   552  005F  0DA0               	rlf	??_ISR_TIMER_1,f
   553  0060  3EFF               	addlw	-1
   554  0061  1D03               	skipz
   555  0062  285E               	goto	u51_25
   556  0063  300A               	movlw	10
   557  0064  00F0               	movwf	___lwdiv@divisor
   558  0065  3000               	movlw	0
   559  0066  00F1               	movwf	___lwdiv@divisor+1
   560  0067  0826               	movf	_ISR_TIMER_1$593+1,w
   561  0068  00F3               	movwf	___lwdiv@dividend+1
   562  0069  0825               	movf	_ISR_TIMER_1$593,w
   563  006A  00F2               	movwf	___lwdiv@dividend
   564  006B  120A  118A  216C  120A  118A  	fcall	___lwdiv
   565  0070  0870               	movf	?___lwdiv,w
   566  0071  1283               	bcf	3,5	;RP0=0, select bank0
   567  0072  1303               	bcf	3,6	;RP1=0, select bank0
   568  0073  0720               	addwf	??_ISR_TIMER_1,w
   569  0074  0088               	movwf	8	;volatile
   570                           
   571                           ;reloj.c: 78: counter_digito = 1;
   572  0075  01AE               	clrf	_counter_digito
   573  0076  0AAE               	incf	_counter_digito,f
   574                           
   575                           ;reloj.c: 79: break;
   576  0077  290A               	goto	i1l53
   577  0078                     i1l753:	
   578                           ;reloj.c: 80: case 1:
   579                           
   580                           
   581                           ;reloj.c: 81: PORTD = (counter_digito << 4) + (counter_segundos / 60) % 10;
   582  0078  082E               	movf	_counter_digito,w
   583  0079  00A0               	movwf	??_ISR_TIMER_1
   584  007A  3004               	movlw	4
   585  007B                     u52_25:	
   586  007B  1003               	clrc
   587  007C  0DA0               	rlf	??_ISR_TIMER_1,f
   588  007D  3EFF               	addlw	-1
   589  007E  1D03               	skipz
   590  007F  287B               	goto	u52_25
   591  0080  300A               	movlw	10
   592  0081  00F8               	movwf	___lwmod@divisor
   593  0082  3000               	movlw	0
   594  0083  00F9               	movwf	___lwmod@divisor+1
   595  0084  303C               	movlw	60
   596  0085  00F0               	movwf	___lwdiv@divisor
   597  0086  3000               	movlw	0
   598  0087  00F1               	movwf	___lwdiv@divisor+1
   599  0088  082C               	movf	_counter_segundos+1,w
   600  0089  00F3               	movwf	___lwdiv@dividend+1
   601  008A  082B               	movf	_counter_segundos,w
   602  008B  00F2               	movwf	___lwdiv@dividend
   603  008C  120A  118A  216C  120A  118A  	fcall	___lwdiv
   604  0091  0871               	movf	?___lwdiv+1,w
   605  0092  00FB               	movwf	___lwmod@dividend+1
   606  0093  0870               	movf	?___lwdiv,w
   607  0094  00FA               	movwf	___lwmod@dividend
   608  0095  120A  118A  21A8  120A  118A  	fcall	___lwmod
   609  009A  0878               	movf	?___lwmod,w
   610  009B  1283               	bcf	3,5	;RP0=0, select bank0
   611  009C  1303               	bcf	3,6	;RP1=0, select bank0
   612  009D  0720               	addwf	??_ISR_TIMER_1,w
   613  009E  0088               	movwf	8	;volatile
   614                           
   615                           ;reloj.c: 82: counter_digito = 2;
   616  009F  3002               	movlw	2
   617  00A0  28C9               	goto	L1
   618  00A1                     i1l757:	
   619                           ;reloj.c: 84: case 2:
   620                           
   621                           ;reloj.c: 83: break;
   622                           
   623                           
   624                           ;reloj.c: 85: PORTD = (counter_digito << 4) + (counter_segundos % 60) / 10;
   625  00A1  082E               	movf	_counter_digito,w
   626  00A2  00A0               	movwf	??_ISR_TIMER_1
   627  00A3  3004               	movlw	4
   628  00A4                     u53_25:	
   629  00A4  1003               	clrc
   630  00A5  0DA0               	rlf	??_ISR_TIMER_1,f
   631  00A6  3EFF               	addlw	-1
   632  00A7  1D03               	skipz
   633  00A8  28A4               	goto	u53_25
   634  00A9  300A               	movlw	10
   635  00AA  00F0               	movwf	___lwdiv@divisor
   636  00AB  3000               	movlw	0
   637  00AC  00F1               	movwf	___lwdiv@divisor+1
   638  00AD  082C               	movf	_counter_segundos+1,w
   639  00AE  00FB               	movwf	___lwmod@dividend+1
   640  00AF  082B               	movf	_counter_segundos,w
   641  00B0  00FA               	movwf	___lwmod@dividend
   642  00B1  303C               	movlw	60
   643  00B2  00F8               	movwf	___lwmod@divisor
   644  00B3  3000               	movlw	0
   645  00B4  00F9               	movwf	___lwmod@divisor+1
   646  00B5  120A  118A  21A8  120A  118A  	fcall	___lwmod
   647  00BA  0879               	movf	?___lwmod+1,w
   648  00BB  00F3               	movwf	___lwdiv@dividend+1
   649  00BC  0878               	movf	?___lwmod,w
   650  00BD  00F2               	movwf	___lwdiv@dividend
   651  00BE  120A  118A  216C  120A  118A  	fcall	___lwdiv
   652  00C3  0870               	movf	?___lwdiv,w
   653  00C4  1283               	bcf	3,5	;RP0=0, select bank0
   654  00C5  1303               	bcf	3,6	;RP1=0, select bank0
   655  00C6  0720               	addwf	??_ISR_TIMER_1,w
   656  00C7  0088               	movwf	8	;volatile
   657                           
   658                           ;reloj.c: 86: counter_digito = 3;
   659  00C8  3003               	movlw	3
   660  00C9                     L1:	
   661  00C9  00A0               	movwf	??_ISR_TIMER_1
   662  00CA  0820               	movf	??_ISR_TIMER_1,w
   663  00CB  00AE               	movwf	_counter_digito
   664                           
   665                           ;reloj.c: 87: break;
   666  00CC  290A               	goto	i1l53
   667  00CD                     i1l761:	
   668                           ;reloj.c: 88: case 3:
   669                           
   670                           
   671                           ;reloj.c: 89: PORTD = (counter_digito << 4) + (counter_segundos % 60) % 10;
   672  00CD  082C               	movf	_counter_segundos+1,w
   673  00CE  00FB               	movwf	___lwmod@dividend+1
   674  00CF  082B               	movf	_counter_segundos,w
   675  00D0  00FA               	movwf	___lwmod@dividend
   676  00D1  303C               	movlw	60
   677  00D2  00F8               	movwf	___lwmod@divisor
   678  00D3  3000               	movlw	0
   679  00D4  00F9               	movwf	___lwmod@divisor+1
   680  00D5  120A  118A  21A8  120A  118A  	fcall	___lwmod
   681  00DA  0879               	movf	?___lwmod+1,w
   682  00DB  1283               	bcf	3,5	;RP0=0, select bank0
   683  00DC  1303               	bcf	3,6	;RP1=0, select bank0
   684  00DD  00A8               	movwf	_ISR_TIMER_1$594+1
   685  00DE  0878               	movf	?___lwmod,w
   686  00DF  00A7               	movwf	_ISR_TIMER_1$594
   687                           
   688                           ;reloj.c: 89: PORTD = (counter_digito << 4) + (counter_segundos % 60) % 10;
   689  00E0  082E               	movf	_counter_digito,w
   690  00E1  00A0               	movwf	??_ISR_TIMER_1
   691  00E2  3004               	movlw	4
   692  00E3                     u54_25:	
   693  00E3  1003               	clrc
   694  00E4  0DA0               	rlf	??_ISR_TIMER_1,f
   695  00E5  3EFF               	addlw	-1
   696  00E6  1D03               	skipz
   697  00E7  28E3               	goto	u54_25
   698  00E8  300A               	movlw	10
   699  00E9  00F8               	movwf	___lwmod@divisor
   700  00EA  3000               	movlw	0
   701  00EB  00F9               	movwf	___lwmod@divisor+1
   702  00EC  0828               	movf	_ISR_TIMER_1$594+1,w
   703  00ED  00FB               	movwf	___lwmod@dividend+1
   704  00EE  0827               	movf	_ISR_TIMER_1$594,w
   705  00EF  00FA               	movwf	___lwmod@dividend
   706  00F0  120A  118A  21A8  120A  118A  	fcall	___lwmod
   707  00F5  0878               	movf	?___lwmod,w
   708  00F6  1283               	bcf	3,5	;RP0=0, select bank0
   709  00F7  1303               	bcf	3,6	;RP1=0, select bank0
   710  00F8  0720               	addwf	??_ISR_TIMER_1,w
   711  00F9  0088               	movwf	8	;volatile
   712                           
   713                           ;reloj.c: 90: counter_digito = 0;
   714  00FA  01AE               	clrf	_counter_digito
   715                           
   716                           ;reloj.c: 92: }
   717                           
   718                           ;reloj.c: 91: break;
   719  00FB  290A               	goto	i1l53
   720  00FC                     i1l767:	
   721  00FC  082E               	movf	_counter_digito,w
   722                           
   723                           ; Switch size 1, requested type "space"
   724                           ; Number of cases is 4, Range of values is 0 to 3
   725                           ; switch strategies available:
   726                           ; Name         Instructions Cycles
   727                           ; simple_byte           13     7 (average)
   728                           ; direct_byte           20     8 (fixed)
   729                           ; jumptable            260     6 (fixed)
   730                           ;	Chosen strategy is simple_byte
   731  00FD  3A00               	xorlw	0	; case 0
   732  00FE  1903               	skipnz
   733  00FF  2848               	goto	i1l749
   734  0100  3A01               	xorlw	1	; case 1
   735  0101  1903               	skipnz
   736  0102  2878               	goto	i1l753
   737  0103  3A03               	xorlw	3	; case 2
   738  0104  1903               	skipnz
   739  0105  28A1               	goto	i1l757
   740  0106  3A01               	xorlw	1	; case 3
   741  0107  1903               	skipnz
   742  0108  28CD               	goto	i1l761
   743  0109  290A               	goto	i1l53
   744  010A                     i1l53:	
   745                           
   746                           ;reloj.c: 94: PIR1bits.TMR1IF = 0;
   747  010A  100C               	bcf	12,0	;volatile
   748  010B                     i1l57:	
   749  010B  1283               	bcf	3,5	;RP0=0, select bank0
   750  010C  0824               	movf	??_ISR_TIMER_1+4,w
   751  010D  00FF               	movwf	127
   752  010E  0823               	movf	??_ISR_TIMER_1+3,w
   753  010F  008A               	movwf	10
   754  0110  0822               	movf	??_ISR_TIMER_1+2,w
   755  0111  0084               	movwf	4
   756  0112  0E21               	swapf	(??_ISR_TIMER_1+1)^0,w
   757  0113  0083               	movwf	3
   758  0114  0EFE               	swapf	126,f
   759  0115  0E7E               	swapf	126,w
   760  0116  0009               	retfie
   761  0117                     __end_of_ISR_TIMER_1:	
   762                           
   763                           	psect	intentry
   764  0004                     __pintentry:	
   765                           ;incstack = 0
   766                           ; Regs used in _ISR_TIMER_1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   767                           
   768  0004                     interrupt_function:	
   769  007E                     saved_w	set	btemp
   770  0004  00FE               	movwf	btemp
   771  0005  0E03               	swapf	3,w
   772  0006  1283               	bcf	3,5	;RP0=0, select bank0
   773  0007  1303               	bcf	3,6	;RP1=0, select bank0
   774  0008  00A1               	movwf	??_ISR_TIMER_1+1
   775  0009  0804               	movf	4,w
   776  000A  00A2               	movwf	??_ISR_TIMER_1+2
   777  000B  080A               	movf	10,w
   778  000C  00A3               	movwf	??_ISR_TIMER_1+3
   779  000D  087F               	movf	btemp+1,w
   780  000E  00A4               	movwf	??_ISR_TIMER_1+4
   781  000F  120A  118A  2820   	ljmp	_ISR_TIMER_1
   782                           
   783                           	psect	text2
   784  01A8                     __ptext2:	
   785 ;; *************** function ___lwmod *****************
   786 ;; Defined at:
   787 ;;		line 6 in file "D:\mplab\sources\common\lwmod.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;  divisor         2    8[COMMON] unsigned int 
   790 ;;  dividend        2   10[COMMON] unsigned int 
   791 ;; Auto vars:     Size  Location     Type
   792 ;;  counter         1   13[COMMON] unsigned char 
   793 ;; Return value:  Size  Location     Type
   794 ;;                  2    8[COMMON] unsigned int 
   795 ;; Registers used:
   796 ;;		wreg, status,2, status,0
   797 ;; Tracked objects:
   798 ;;		On entry : 0/0
   799 ;;		On exit  : 0/0
   800 ;;		Unchanged: 0/0
   801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   802 ;;      Params:         4       0       0       0       0
   803 ;;      Locals:         1       0       0       0       0
   804 ;;      Temps:          1       0       0       0       0
   805 ;;      Totals:         6       0       0       0       0
   806 ;;Total ram usage:        6 bytes
   807 ;; Hardware stack levels used:    1
   808 ;; This function calls:
   809 ;;		Nothing
   810 ;; This function is called by:
   811 ;;		_ISR_TIMER_1
   812 ;; This function uses a non-reentrant model
   813 ;;
   814                           
   815                           
   816                           ;psect for function ___lwmod
   817  01A8                     ___lwmod:	
   818                           
   819                           ;incstack = 0
   820                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
   821  01A8  0878               	movf	___lwmod@divisor,w
   822  01A9  0479               	iorwf	___lwmod@divisor+1,w
   823  01AA  1903               	btfsc	3,2
   824  01AB  29D5               	goto	i1l687
   825  01AC  01FD               	clrf	___lwmod@counter
   826  01AD  0AFD               	incf	___lwmod@counter,f
   827  01AE                     i1l677:	
   828  01AE  1BF9               	btfsc	___lwmod@divisor+1,7
   829  01AF  29BC               	goto	i1l679
   830  01B0  3001               	movlw	1
   831  01B1                     u36_25:	
   832  01B1  1003               	clrc
   833  01B2  0DF8               	rlf	___lwmod@divisor,f
   834  01B3  0DF9               	rlf	___lwmod@divisor+1,f
   835  01B4  3EFF               	addlw	-1
   836  01B5  1D03               	skipz
   837  01B6  29B1               	goto	u36_25
   838  01B7  3001               	movlw	1
   839  01B8  00FC               	movwf	??___lwmod
   840  01B9  087C               	movf	??___lwmod,w
   841  01BA  07FD               	addwf	___lwmod@counter,f
   842  01BB  29AE               	goto	i1l677
   843  01BC                     i1l679:	
   844  01BC  0879               	movf	___lwmod@divisor+1,w
   845  01BD  027B               	subwf	___lwmod@dividend+1,w
   846  01BE  1D03               	skipz
   847  01BF  29C2               	goto	u38_25
   848  01C0  0878               	movf	___lwmod@divisor,w
   849  01C1  027A               	subwf	___lwmod@dividend,w
   850  01C2                     u38_25:	
   851  01C2  1C03               	skipc
   852  01C3  29CA               	goto	i1l683
   853  01C4  0878               	movf	___lwmod@divisor,w
   854  01C5  02FA               	subwf	___lwmod@dividend,f
   855  01C6  0879               	movf	___lwmod@divisor+1,w
   856  01C7  1C03               	skipc
   857  01C8  03FB               	decf	___lwmod@dividend+1,f
   858  01C9  02FB               	subwf	___lwmod@dividend+1,f
   859  01CA                     i1l683:	
   860  01CA  3001               	movlw	1
   861  01CB                     u39_25:	
   862  01CB  1003               	clrc
   863  01CC  0CF9               	rrf	___lwmod@divisor+1,f
   864  01CD  0CF8               	rrf	___lwmod@divisor,f
   865  01CE  3EFF               	addlw	-1
   866  01CF  1D03               	skipz
   867  01D0  29CB               	goto	u39_25
   868  01D1  3001               	movlw	1
   869  01D2  02FD               	subwf	___lwmod@counter,f
   870  01D3  1D03               	btfss	3,2
   871  01D4  29BC               	goto	i1l679
   872  01D5                     i1l687:	
   873  01D5  087B               	movf	___lwmod@dividend+1,w
   874  01D6  00F9               	movwf	?___lwmod+1
   875  01D7  087A               	movf	___lwmod@dividend,w
   876  01D8  00F8               	movwf	?___lwmod
   877  01D9  0008               	return
   878  01DA                     __end_of___lwmod:	
   879                           
   880                           	psect	text3
   881  016C                     __ptext3:	
   882 ;; *************** function ___lwdiv *****************
   883 ;; Defined at:
   884 ;;		line 6 in file "D:\mplab\sources\common\lwdiv.c"
   885 ;; Parameters:    Size  Location     Type
   886 ;;  divisor         2    0[COMMON] unsigned int 
   887 ;;  dividend        2    2[COMMON] unsigned int 
   888 ;; Auto vars:     Size  Location     Type
   889 ;;  quotient        2    5[COMMON] unsigned int 
   890 ;;  counter         1    7[COMMON] unsigned char 
   891 ;; Return value:  Size  Location     Type
   892 ;;                  2    0[COMMON] unsigned int 
   893 ;; Registers used:
   894 ;;		wreg, status,2, status,0
   895 ;; Tracked objects:
   896 ;;		On entry : 0/0
   897 ;;		On exit  : 0/0
   898 ;;		Unchanged: 0/0
   899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   900 ;;      Params:         4       0       0       0       0
   901 ;;      Locals:         3       0       0       0       0
   902 ;;      Temps:          1       0       0       0       0
   903 ;;      Totals:         8       0       0       0       0
   904 ;;Total ram usage:        8 bytes
   905 ;; Hardware stack levels used:    1
   906 ;; This function calls:
   907 ;;		Nothing
   908 ;; This function is called by:
   909 ;;		_ISR_TIMER_1
   910 ;; This function uses a non-reentrant model
   911 ;;
   912                           
   913                           
   914                           ;psect for function ___lwdiv
   915  016C                     ___lwdiv:	
   916                           
   917                           ;incstack = 0
   918                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
   919  016C  01F5               	clrf	___lwdiv@quotient
   920  016D  01F6               	clrf	___lwdiv@quotient+1
   921  016E  0870               	movf	___lwdiv@divisor,w
   922  016F  0471               	iorwf	___lwdiv@divisor+1,w
   923  0170  1903               	btfsc	3,2
   924  0171  29A3               	goto	i1l665
   925  0172  01F7               	clrf	___lwdiv@counter
   926  0173  0AF7               	incf	___lwdiv@counter,f
   927  0174                     i1l653:	
   928  0174  1BF1               	btfsc	___lwdiv@divisor+1,7
   929  0175  2982               	goto	i1l655
   930  0176  3001               	movlw	1
   931  0177                     u29_25:	
   932  0177  1003               	clrc
   933  0178  0DF0               	rlf	___lwdiv@divisor,f
   934  0179  0DF1               	rlf	___lwdiv@divisor+1,f
   935  017A  3EFF               	addlw	-1
   936  017B  1D03               	skipz
   937  017C  2977               	goto	u29_25
   938  017D  3001               	movlw	1
   939  017E  00F4               	movwf	??___lwdiv
   940  017F  0874               	movf	??___lwdiv,w
   941  0180  07F7               	addwf	___lwdiv@counter,f
   942  0181  2974               	goto	i1l653
   943  0182                     i1l655:	
   944  0182  3001               	movlw	1
   945  0183                     u31_25:	
   946  0183  1003               	clrc
   947  0184  0DF5               	rlf	___lwdiv@quotient,f
   948  0185  0DF6               	rlf	___lwdiv@quotient+1,f
   949  0186  3EFF               	addlw	-1
   950  0187  1D03               	skipz
   951  0188  2983               	goto	u31_25
   952  0189  0871               	movf	___lwdiv@divisor+1,w
   953  018A  0273               	subwf	___lwdiv@dividend+1,w
   954  018B  1D03               	skipz
   955  018C  298F               	goto	u32_25
   956  018D  0870               	movf	___lwdiv@divisor,w
   957  018E  0272               	subwf	___lwdiv@dividend,w
   958  018F                     u32_25:	
   959  018F  1C03               	skipc
   960  0190  2998               	goto	i1l661
   961  0191  0870               	movf	___lwdiv@divisor,w
   962  0192  02F2               	subwf	___lwdiv@dividend,f
   963  0193  0871               	movf	___lwdiv@divisor+1,w
   964  0194  1C03               	skipc
   965  0195  03F3               	decf	___lwdiv@dividend+1,f
   966  0196  02F3               	subwf	___lwdiv@dividend+1,f
   967  0197  1475               	bsf	___lwdiv@quotient,0
   968  0198                     i1l661:	
   969  0198  3001               	movlw	1
   970  0199                     u33_25:	
   971  0199  1003               	clrc
   972  019A  0CF1               	rrf	___lwdiv@divisor+1,f
   973  019B  0CF0               	rrf	___lwdiv@divisor,f
   974  019C  3EFF               	addlw	-1
   975  019D  1D03               	skipz
   976  019E  2999               	goto	u33_25
   977  019F  3001               	movlw	1
   978  01A0  02F7               	subwf	___lwdiv@counter,f
   979  01A1  1D03               	btfss	3,2
   980  01A2  2982               	goto	i1l655
   981  01A3                     i1l665:	
   982  01A3  0876               	movf	___lwdiv@quotient+1,w
   983  01A4  00F1               	movwf	?___lwdiv+1
   984  01A5  0875               	movf	___lwdiv@quotient,w
   985  01A6  00F0               	movwf	?___lwdiv
   986  01A7  0008               	return
   987  01A8                     __end_of___lwdiv:	
   988  007E                     btemp	set	126	;btemp
   989  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     11      16
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR_TIMER_1 in COMMON

    _ISR_TIMER_1->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR_TIMER_1 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_TIMER_1 in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_TIMER_1 in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_TIMER_1 in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0       0
                                              9 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _ISR_TIMER_1                                          9     9      0    1215
                                              0 BANK0      9     9      0
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     583
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     586
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _ISR_TIMER_1 (ROOT)
   ___lwdiv
   ___lwmod
     ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      1E       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      B      10       5       20.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      1E      12        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Feb 24 11:32:43 2022

            __CFG_CP$OFF 0000                       l39 014A              __CFG_LVP$ON 0000  
                    l725 0157                      l717 0130                      u420 0146  
                    u430 0147             __CFG_CPD$OFF 0000                      u557 013A  
                    u567 0152                      u577 0161                      fsr0 0004  
           __CFG_IESO$ON 0000             __CFG_FOSC$XT 0000                     i1l53 010A  
                   i1l57 010B             __CFG_WRT$OFF 0000            __CFG_FCMEN$ON 0000  
                   _main 0117                     btemp 007E            __CFG_BOREN$ON 0000  
                   start 0012            __CFG_MCLRE$ON 0000                    ?_main 0070  
          __CFG_WDTE$OFF 0000                    _ANSEL 0188          __end_of___lwdiv 01A8  
        __end_of___lwmod 01DA                    i1l661 0198                    i1l653 0174  
                  i1l655 0182                    i1l665 01A3                    i1l761 00CD  
                  i1l753 0078                    i1l683 01CA                    i1l677 01AE  
                  i1l757 00A1                    i1l749 0048                    i1l679 01BC  
                  i1l687 01D5                    i1l767 00FC                    u31_25 0183  
                  u32_25 018F                    _TMR1H 000F                    u33_25 0199  
                  _TMR1L 000E                    _PORTD 0008                    u51_25 005E  
                  u36_25 01B1                    u52_25 007B                    u29_25 0177  
                  u53_25 00A4                    u38_25 01C2                    u54_25 00E3  
                  u39_25 01CB                    _TRISD 0088                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 0015  
           ?_ISR_TIMER_1 0070             __end_of_main 016C                   ??_main 0029  
                 _TRISA0 0428                   _TRISA1 0429           __CFG_PWRTE$OFF 0000  
              ??___lwdiv 0074                ??___lwmod 007C                   saved_w 007E  
__end_of__initialization 001C           __pcstackCOMMON 0070               __pbssBANK0 002B  
             __pmaintext 0117           _counter_digito 002E               __pintentry 0004  
   __size_of_ISR_TIMER_1 00F7         _counter_segundos 002B                  ___lwdiv 016C  
                ___lwmod 01A8                  __ptext1 0020                  __ptext2 01A8  
                __ptext3 016C                _T1CONbits 0010     end_of_initialization 001C  
              _PORTAbits 0005      start_initialization 0015             _counter_20ms 002D  
              ___latbits 0002            __pcstackBANK0 0020         ___lwdiv@dividend 0072  
          ??_ISR_TIMER_1 0020                 ?___lwdiv 0070                 ?___lwmod 0078  
       ___lwdiv@quotient 0075        interrupt_function 0004                 _PIE1bits 008C  
               _PIR1bits 000C      __end_of_ISR_TIMER_1 0117         __size_of___lwdiv 003C  
       __size_of___lwmod 0032          ___lwdiv@divisor 0070          ___lwdiv@counter 0077  
               _flag_run 002F        __CFG_BOR4V$BOR40V 0000            __size_of_main 0055  
            _ISR_TIMER_1 0020               _INTCONbits 000B                 intlevel1 0000  
        _ISR_TIMER_1$593 0025          _ISR_TIMER_1$594 0027         ___lwmod@dividend 007A  
        ___lwmod@divisor 0078          ___lwmod@counter 007D  
