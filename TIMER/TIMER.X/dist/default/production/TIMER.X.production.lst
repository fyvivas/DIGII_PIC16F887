

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Sep 23 10:38:17 2021

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	dabs	1,0x7E,2
    14  0000                     
    15                           ; Version 1.41
    16                           ; Generated 25/01/2017 GMT
    17                           ; 
    18                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F887 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     	;# 
    50  0001                     	;# 
    51  0002                     	;# 
    52  0003                     	;# 
    53  0004                     	;# 
    54  0005                     	;# 
    55  0006                     	;# 
    56  0007                     	;# 
    57  0008                     	;# 
    58  0009                     	;# 
    59  000A                     	;# 
    60  000B                     	;# 
    61  000C                     	;# 
    62  000D                     	;# 
    63  000E                     	;# 
    64  000E                     	;# 
    65  000F                     	;# 
    66  0010                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0013                     	;# 
    70  0014                     	;# 
    71  0015                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001B                     	;# 
    79  001B                     	;# 
    80  001C                     	;# 
    81  001D                     	;# 
    82  001E                     	;# 
    83  001F                     	;# 
    84  0081                     	;# 
    85  0085                     	;# 
    86  0086                     	;# 
    87  0087                     	;# 
    88  0088                     	;# 
    89  0089                     	;# 
    90  008C                     	;# 
    91  008D                     	;# 
    92  008E                     	;# 
    93  008F                     	;# 
    94  0090                     	;# 
    95  0091                     	;# 
    96  0092                     	;# 
    97  0093                     	;# 
    98  0093                     	;# 
    99  0093                     	;# 
   100  0094                     	;# 
   101  0095                     	;# 
   102  0096                     	;# 
   103  0097                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009A                     	;# 
   107  009B                     	;# 
   108  009C                     	;# 
   109  009D                     	;# 
   110  009E                     	;# 
   111  009F                     	;# 
   112  0105                     	;# 
   113  0107                     	;# 
   114  0108                     	;# 
   115  0109                     	;# 
   116  010C                     	;# 
   117  010C                     	;# 
   118  010D                     	;# 
   119  010E                     	;# 
   120  010F                     	;# 
   121  0185                     	;# 
   122  0187                     	;# 
   123  0188                     	;# 
   124  0189                     	;# 
   125  018C                     	;# 
   126  018D                     	;# 
   127  0005                     _PORTAbits	set	5
   128  0008                     _PORTD	set	8
   129  0001                     _TMR0	set	1
   130  000B                     _INTCONbits	set	11
   131  0006                     _PORTB	set	6
   132  0088                     _TRISD	set	136
   133  0081                     _OPTION_REGbits	set	129
   134  042C                     _TRISA4	set	1068
   135  0430                     _TRISB0	set	1072
   136  0188                     _ANSEL	set	392
   137  0189                     _ANSELH	set	393
   138                           
   139                           ; #config settings
   140  0000                     
   141                           	psect	cinit
   142  0015                     start_initialization:	
   143  0015                     __initialization:	
   144                           
   145                           ; Clear objects allocated to COMMON
   146  0015  01F6               	clrf	__pbssCOMMON& (0+127)
   147  0016  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   148  0017                     end_of_initialization:	
   149                           ;End of C runtime variable initialization code
   150                           
   151  0017                     __end_of__initialization:	
   152  0017  0183               	clrf	3
   153  0018  120A  118A  281B   	ljmp	_main	;jump to C main() function
   154                           
   155                           	psect	bssCOMMON
   156  0076                     __pbssCOMMON:	
   157  0076                     _count_ms:	
   158  0076                     	ds	1
   159  0077                     _count:	
   160  0077                     	ds	1
   161                           
   162                           	psect	cstackCOMMON
   163  0070                     __pcstackCOMMON:	
   164  0070                     ?_ISR_TIMER_0:	
   165  0070                     ??_ISR_TIMER_0:	
   166                           ; 1 bytes @ 0x0
   167                           
   168  0070                     ?_main:	
   169                           ; 1 bytes @ 0x0
   170                           
   171                           
   172                           ; 2 bytes @ 0x0
   173  0070                     	ds	5
   174  0075                     ??___awdiv:	
   175  0075                     ??___awmod:	
   176                           ; 1 bytes @ 0x5
   177                           
   178                           
   179                           ; 1 bytes @ 0x5
   180  0075                     	ds	1
   181                           
   182                           	psect	cstackBANK0
   183  0020                     __pcstackBANK0:	
   184  0020                     ?___awdiv:	
   185  0020                     ?___awmod:	
   186                           ; 2 bytes @ 0x0
   187                           
   188  0020                     ___awdiv@divisor:	
   189                           ; 2 bytes @ 0x0
   190                           
   191  0020                     ___awmod@divisor:	
   192                           ; 2 bytes @ 0x0
   193                           
   194                           
   195                           ; 2 bytes @ 0x0
   196  0020                     	ds	2
   197  0022                     ___awdiv@dividend:	
   198  0022                     ___awmod@dividend:	
   199                           ; 2 bytes @ 0x2
   200                           
   201                           
   202                           ; 2 bytes @ 0x2
   203  0022                     	ds	2
   204  0024                     ___awdiv@counter:	
   205  0024                     ___awmod@counter:	
   206                           ; 1 bytes @ 0x4
   207                           
   208                           
   209                           ; 1 bytes @ 0x4
   210  0024                     	ds	1
   211  0025                     ___awdiv@sign:	
   212  0025                     ___awmod@sign:	
   213                           ; 1 bytes @ 0x5
   214                           
   215                           
   216                           ; 1 bytes @ 0x5
   217  0025                     	ds	1
   218  0026                     ___awdiv@quotient:	
   219                           
   220                           ; 2 bytes @ 0x6
   221  0026                     	ds	2
   222  0028                     ??_main:	
   223                           
   224                           ; 1 bytes @ 0x8
   225  0028                     	ds	2
   226                           
   227                           	psect	maintext
   228  001B                     __pmaintext:	
   229 ;;
   230 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   231 ;;
   232 ;; *************** function _main *****************
   233 ;; Defined at:
   234 ;;		line 30 in file "temporizador.c"
   235 ;; Parameters:    Size  Location     Type
   236 ;;		None
   237 ;; Auto vars:     Size  Location     Type
   238 ;;		None
   239 ;; Return value:  Size  Location     Type
   240 ;;                  2   30[None  ] int 
   241 ;; Registers used:
   242 ;;		wreg, status,2, status,0, pclath, cstack
   243 ;; Tracked objects:
   244 ;;		On entry : B00/0
   245 ;;		On exit  : 0/0
   246 ;;		Unchanged: 0/0
   247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   248 ;;      Params:         0       0       0       0       0
   249 ;;      Locals:         0       0       0       0       0
   250 ;;      Temps:          0       2       0       0       0
   251 ;;      Totals:         0       2       0       0       0
   252 ;;Total ram usage:        2 bytes
   253 ;; Hardware stack levels required when called:    2
   254 ;; This function calls:
   255 ;;		___awdiv
   256 ;;		___awmod
   257 ;; This function is called by:
   258 ;;		Startup code after reset
   259 ;; This function uses a non-reentrant model
   260 ;;
   261                           
   262                           
   263                           ;psect for function _main
   264  001B                     _main:	
   265                           
   266                           ;temporizador.c: 32: TRISB0 = 0;
   267                           
   268                           ;incstack = 0
   269                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   270  001B  1683               	bsf	3,5	;RP0=1, select bank1
   271  001C  1303               	bcf	3,6	;RP1=0, select bank1
   272  001D  1006               	bcf	6,0	;volatile
   273                           
   274                           ;temporizador.c: 33: PORTB = 0;
   275  001E  1283               	bcf	3,5	;RP0=0, select bank0
   276  001F  1303               	bcf	3,6	;RP1=0, select bank0
   277  0020  0186               	clrf	6	;volatile
   278                           
   279                           ;temporizador.c: 34: ANSELH = 0x00;
   280  0021  1683               	bsf	3,5	;RP0=1, select bank3
   281  0022  1703               	bsf	3,6	;RP1=1, select bank3
   282  0023  0189               	clrf	9	;volatile
   283                           
   284                           ;temporizador.c: 36: INTCONbits.GIE = 0;
   285  0024  138B               	bcf	11,7	;volatile
   286                           
   287                           ;temporizador.c: 37: OPTION_REGbits.T0CS = 0;
   288  0025  1683               	bsf	3,5	;RP0=1, select bank1
   289  0026  1303               	bcf	3,6	;RP1=0, select bank1
   290  0027  1281               	bcf	1,5	;volatile
   291                           
   292                           ;temporizador.c: 38: OPTION_REGbits.PSA = 0;
   293  0028  1181               	bcf	1,3	;volatile
   294                           
   295                           ;temporizador.c: 39: OPTION_REGbits.PS = 0b111;
   296  0029  3007               	movlw	7
   297  002A  0481               	iorwf	1,f	;volatile
   298                           
   299                           ;temporizador.c: 40: TMR0 = 60;
   300  002B  303C               	movlw	60
   301  002C  1283               	bcf	3,5	;RP0=0, select bank0
   302  002D  1303               	bcf	3,6	;RP1=0, select bank0
   303  002E  0081               	movwf	1	;volatile
   304                           
   305                           ;temporizador.c: 42: TRISD = 0x00;
   306  002F  1683               	bsf	3,5	;RP0=1, select bank1
   307  0030  1303               	bcf	3,6	;RP1=0, select bank1
   308  0031  0188               	clrf	8	;volatile
   309                           
   310                           ;temporizador.c: 43: PORTD = 0x00;
   311  0032  1283               	bcf	3,5	;RP0=0, select bank0
   312  0033  1303               	bcf	3,6	;RP1=0, select bank0
   313  0034  0188               	clrf	8	;volatile
   314                           
   315                           ;temporizador.c: 45: TRISA4 = 1;
   316  0035  1683               	bsf	3,5	;RP0=1, select bank1
   317  0036  1303               	bcf	3,6	;RP1=0, select bank1
   318  0037  1605               	bsf	5,4	;volatile
   319                           
   320                           ;temporizador.c: 46: ANSEL = 0x00;
   321  0038  1683               	bsf	3,5	;RP0=1, select bank3
   322  0039  1703               	bsf	3,6	;RP1=1, select bank3
   323  003A  0188               	clrf	8	;volatile
   324                           
   325                           ;temporizador.c: 48: INTCONbits.T0IF = 0;
   326  003B  110B               	bcf	11,2	;volatile
   327                           
   328                           ;temporizador.c: 49: INTCONbits.T0IE = 1;
   329  003C  168B               	bsf	11,5	;volatile
   330                           
   331                           ;temporizador.c: 50: INTCONbits.PEIE = 1;
   332  003D  170B               	bsf	11,6	;volatile
   333                           
   334                           ;temporizador.c: 51: INTCONbits.GIE = 1;
   335  003E  178B               	bsf	11,7	;volatile
   336  003F                     l889:	
   337                           ;temporizador.c: 53: while (1) {
   338                           
   339                           
   340                           ;temporizador.c: 55: PORTD = (1 << 5) + (count % 10);
   341  003F  300A               	movlw	10
   342  0040  1283               	bcf	3,5	;RP0=0, select bank0
   343  0041  1303               	bcf	3,6	;RP1=0, select bank0
   344  0042  00A0               	movwf	___awmod@divisor
   345  0043  3000               	movlw	0
   346  0044  00A1               	movwf	___awmod@divisor+1
   347  0045  0877               	movf	_count,w
   348  0046  00A8               	movwf	??_main
   349  0047  01A9               	clrf	??_main+1
   350  0048  0828               	movf	??_main,w
   351  0049  00A2               	movwf	___awmod@dividend
   352  004A  0829               	movf	??_main+1,w
   353  004B  00A3               	movwf	___awmod@dividend+1
   354  004C  120A  118A  20F4  120A  118A  	fcall	___awmod
   355  0051  1283               	bcf	3,5	;RP0=0, select bank0
   356  0052  1303               	bcf	3,6	;RP1=0, select bank0
   357  0053  0820               	movf	?___awmod,w
   358  0054  3E20               	addlw	32
   359  0055  0088               	movwf	8	;volatile
   360                           
   361                           ;temporizador.c: 56: _delay((unsigned long)((20)*(4000000/4000.0)));
   362  0056  301A               	movlw	26
   363  0057  1283               	bcf	3,5	;RP0=0, select bank0
   364  0058  1303               	bcf	3,6	;RP1=0, select bank0
   365  0059  00A9               	movwf	??_main+1
   366  005A  30F7               	movlw	247
   367  005B  00A8               	movwf	??_main
   368  005C                     u657:	
   369  005C  0BA8               	decfsz	??_main,f
   370  005D  285C               	goto	u657
   371  005E  0BA9               	decfsz	??_main+1,f
   372  005F  285C               	goto	u657
   373  0060  2861               	nop2
   374                           
   375                           ;temporizador.c: 57: PORTD = (1 << 4) + (count / 10);
   376  0061  300A               	movlw	10
   377  0062  1283               	bcf	3,5	;RP0=0, select bank0
   378  0063  1303               	bcf	3,6	;RP1=0, select bank0
   379  0064  00A0               	movwf	___awdiv@divisor
   380  0065  3000               	movlw	0
   381  0066  00A1               	movwf	___awdiv@divisor+1
   382  0067  0877               	movf	_count,w
   383  0068  00A8               	movwf	??_main
   384  0069  01A9               	clrf	??_main+1
   385  006A  0828               	movf	??_main,w
   386  006B  00A2               	movwf	___awdiv@dividend
   387  006C  0829               	movf	??_main+1,w
   388  006D  00A3               	movwf	___awdiv@dividend+1
   389  006E  120A  118A  2099  120A  118A  	fcall	___awdiv
   390  0073  1283               	bcf	3,5	;RP0=0, select bank0
   391  0074  1303               	bcf	3,6	;RP1=0, select bank0
   392  0075  0820               	movf	?___awdiv,w
   393  0076  3E10               	addlw	16
   394  0077  0088               	movwf	8	;volatile
   395                           
   396                           ;temporizador.c: 58: _delay((unsigned long)((20)*(4000000/4000.0)));
   397  0078  301A               	movlw	26
   398  0079  1283               	bcf	3,5	;RP0=0, select bank0
   399  007A  1303               	bcf	3,6	;RP1=0, select bank0
   400  007B  00A9               	movwf	??_main+1
   401  007C  30F7               	movlw	247
   402  007D  00A8               	movwf	??_main
   403  007E                     u667:	
   404  007E  0BA8               	decfsz	??_main,f
   405  007F  287E               	goto	u667
   406  0080  0BA9               	decfsz	??_main+1,f
   407  0081  287E               	goto	u667
   408  0082  2883               	nop2
   409                           
   410                           ;temporizador.c: 61: if (!PORTAbits.RA4) {
   411  0083  1283               	bcf	3,5	;RP0=0, select bank0
   412  0084  1303               	bcf	3,6	;RP1=0, select bank0
   413  0085  1A05               	btfsc	5,4	;volatile
   414  0086  283F               	goto	l889
   415                           
   416                           ;temporizador.c: 62: _delay((unsigned long)((50)*(4000000/4000.0)));
   417  0087  3041               	movlw	65
   418  0088  1283               	bcf	3,5	;RP0=0, select bank0
   419  0089  1303               	bcf	3,6	;RP1=0, select bank0
   420  008A  00A9               	movwf	??_main+1
   421  008B  30ED               	movlw	237
   422  008C  00A8               	movwf	??_main
   423  008D                     u677:	
   424  008D  0BA8               	decfsz	??_main,f
   425  008E  288D               	goto	u677
   426  008F  0BA9               	decfsz	??_main+1,f
   427  0090  288D               	goto	u677
   428  0091  2892               	nop2
   429                           
   430                           ;temporizador.c: 63: count = 0;
   431  0092  01F7               	clrf	_count
   432                           
   433                           ;temporizador.c: 64: TMR0 = 60;
   434  0093  303C               	movlw	60
   435  0094  1283               	bcf	3,5	;RP0=0, select bank0
   436  0095  1303               	bcf	3,6	;RP1=0, select bank0
   437  0096  0081               	movwf	1	;volatile
   438                           
   439                           ;temporizador.c: 65: INTCONbits.T0IF = 0;
   440  0097  110B               	bcf	11,2	;volatile
   441  0098  283F               	goto	l889
   442  0099                     __end_of_main:	
   443                           ;temporizador.c: 66: }
   444                           ;temporizador.c: 67: }
   445                           ;temporizador.c: 68: return 1;
   446                           ;	Return value of _main is never used
   447                           
   448                           
   449                           	psect	text1
   450  00F4                     __ptext1:	
   451 ;; *************** function ___awmod *****************
   452 ;; Defined at:
   453 ;;		line 6 in file "D:\mplab\sources\common\awmod.c"
   454 ;; Parameters:    Size  Location     Type
   455 ;;  divisor         2    0[BANK0 ] int 
   456 ;;  dividend        2    2[BANK0 ] int 
   457 ;; Auto vars:     Size  Location     Type
   458 ;;  sign            1    5[BANK0 ] unsigned char 
   459 ;;  counter         1    4[BANK0 ] unsigned char 
   460 ;; Return value:  Size  Location     Type
   461 ;;                  2    0[BANK0 ] int 
   462 ;; Registers used:
   463 ;;		wreg, status,2, status,0
   464 ;; Tracked objects:
   465 ;;		On entry : 0/0
   466 ;;		On exit  : 0/0
   467 ;;		Unchanged: 0/0
   468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   469 ;;      Params:         0       4       0       0       0
   470 ;;      Locals:         0       2       0       0       0
   471 ;;      Temps:          1       0       0       0       0
   472 ;;      Totals:         1       6       0       0       0
   473 ;;Total ram usage:        7 bytes
   474 ;; Hardware stack levels used:    1
   475 ;; Hardware stack levels required when called:    1
   476 ;; This function calls:
   477 ;;		Nothing
   478 ;; This function is called by:
   479 ;;		_main
   480 ;; This function uses a non-reentrant model
   481 ;;
   482                           
   483                           
   484                           ;psect for function ___awmod
   485  00F4                     ___awmod:	
   486                           
   487                           ;incstack = 0
   488                           ; Regs used in ___awmod: [wreg+status,2+status,0]
   489  00F4  1283               	bcf	3,5	;RP0=0, select bank0
   490  00F5  1303               	bcf	3,6	;RP1=0, select bank0
   491  00F6  01A5               	clrf	___awmod@sign
   492  00F7  1FA3               	btfss	___awmod@dividend+1,7
   493  00F8  2900               	goto	l829
   494  00F9  09A2               	comf	___awmod@dividend,f
   495  00FA  09A3               	comf	___awmod@dividend+1,f
   496  00FB  0AA2               	incf	___awmod@dividend,f
   497  00FC  1903               	skipnz
   498  00FD  0AA3               	incf	___awmod@dividend+1,f
   499  00FE  01A5               	clrf	___awmod@sign
   500  00FF  0AA5               	incf	___awmod@sign,f
   501  0100                     l829:	
   502  0100  1FA1               	btfss	___awmod@divisor+1,7
   503  0101  2907               	goto	l833
   504  0102  09A0               	comf	___awmod@divisor,f
   505  0103  09A1               	comf	___awmod@divisor+1,f
   506  0104  0AA0               	incf	___awmod@divisor,f
   507  0105  1903               	skipnz
   508  0106  0AA1               	incf	___awmod@divisor+1,f
   509  0107                     l833:	
   510  0107  0820               	movf	___awmod@divisor,w
   511  0108  0421               	iorwf	___awmod@divisor+1,w
   512  0109  1903               	btfsc	3,2
   513  010A  2934               	goto	l851
   514  010B  01A4               	clrf	___awmod@counter
   515  010C  0AA4               	incf	___awmod@counter,f
   516  010D                     l841:	
   517  010D  1BA1               	btfsc	___awmod@divisor+1,7
   518  010E  291B               	goto	l843
   519  010F  3001               	movlw	1
   520  0110                     u585:	
   521  0110  1003               	clrc
   522  0111  0DA0               	rlf	___awmod@divisor,f
   523  0112  0DA1               	rlf	___awmod@divisor+1,f
   524  0113  3EFF               	addlw	-1
   525  0114  1D03               	skipz
   526  0115  2910               	goto	u585
   527  0116  3001               	movlw	1
   528  0117  00F5               	movwf	??___awmod
   529  0118  0875               	movf	??___awmod,w
   530  0119  07A4               	addwf	___awmod@counter,f
   531  011A  290D               	goto	l841
   532  011B                     l843:	
   533  011B  0821               	movf	___awmod@divisor+1,w
   534  011C  0223               	subwf	___awmod@dividend+1,w
   535  011D  1D03               	skipz
   536  011E  2921               	goto	u605
   537  011F  0820               	movf	___awmod@divisor,w
   538  0120  0222               	subwf	___awmod@dividend,w
   539  0121                     u605:	
   540  0121  1C03               	skipc
   541  0122  2929               	goto	l847
   542  0123  0820               	movf	___awmod@divisor,w
   543  0124  02A2               	subwf	___awmod@dividend,f
   544  0125  0821               	movf	___awmod@divisor+1,w
   545  0126  1C03               	skipc
   546  0127  03A3               	decf	___awmod@dividend+1,f
   547  0128  02A3               	subwf	___awmod@dividend+1,f
   548  0129                     l847:	
   549  0129  3001               	movlw	1
   550  012A                     u615:	
   551  012A  1003               	clrc
   552  012B  0CA1               	rrf	___awmod@divisor+1,f
   553  012C  0CA0               	rrf	___awmod@divisor,f
   554  012D  3EFF               	addlw	-1
   555  012E  1D03               	skipz
   556  012F  292A               	goto	u615
   557  0130  3001               	movlw	1
   558  0131  02A4               	subwf	___awmod@counter,f
   559  0132  1D03               	btfss	3,2
   560  0133  291B               	goto	l843
   561  0134                     l851:	
   562  0134  0825               	movf	___awmod@sign,w
   563  0135  1903               	btfsc	3,2
   564  0136  293C               	goto	l855
   565  0137  09A2               	comf	___awmod@dividend,f
   566  0138  09A3               	comf	___awmod@dividend+1,f
   567  0139  0AA2               	incf	___awmod@dividend,f
   568  013A  1903               	skipnz
   569  013B  0AA3               	incf	___awmod@dividend+1,f
   570  013C                     l855:	
   571  013C  0823               	movf	___awmod@dividend+1,w
   572  013D  00A1               	movwf	?___awmod+1
   573  013E  0822               	movf	___awmod@dividend,w
   574  013F  00A0               	movwf	?___awmod
   575  0140  0008               	return
   576  0141                     __end_of___awmod:	
   577                           
   578                           	psect	text2
   579  0099                     __ptext2:	
   580 ;; *************** function ___awdiv *****************
   581 ;; Defined at:
   582 ;;		line 6 in file "D:\mplab\sources\common\awdiv.c"
   583 ;; Parameters:    Size  Location     Type
   584 ;;  divisor         2    0[BANK0 ] int 
   585 ;;  dividend        2    2[BANK0 ] int 
   586 ;; Auto vars:     Size  Location     Type
   587 ;;  quotient        2    6[BANK0 ] int 
   588 ;;  sign            1    5[BANK0 ] unsigned char 
   589 ;;  counter         1    4[BANK0 ] unsigned char 
   590 ;; Return value:  Size  Location     Type
   591 ;;                  2    0[BANK0 ] int 
   592 ;; Registers used:
   593 ;;		wreg, status,2, status,0
   594 ;; Tracked objects:
   595 ;;		On entry : 0/0
   596 ;;		On exit  : 0/0
   597 ;;		Unchanged: 0/0
   598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   599 ;;      Params:         0       4       0       0       0
   600 ;;      Locals:         0       4       0       0       0
   601 ;;      Temps:          1       0       0       0       0
   602 ;;      Totals:         1       8       0       0       0
   603 ;;Total ram usage:        9 bytes
   604 ;; Hardware stack levels used:    1
   605 ;; Hardware stack levels required when called:    1
   606 ;; This function calls:
   607 ;;		Nothing
   608 ;; This function is called by:
   609 ;;		_main
   610 ;; This function uses a non-reentrant model
   611 ;;
   612                           
   613                           
   614                           ;psect for function ___awdiv
   615  0099                     ___awdiv:	
   616                           
   617                           ;incstack = 0
   618                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
   619  0099  1283               	bcf	3,5	;RP0=0, select bank0
   620  009A  1303               	bcf	3,6	;RP1=0, select bank0
   621  009B  01A5               	clrf	___awdiv@sign
   622  009C  1FA1               	btfss	___awdiv@divisor+1,7
   623  009D  28A5               	goto	l785
   624  009E  09A0               	comf	___awdiv@divisor,f
   625  009F  09A1               	comf	___awdiv@divisor+1,f
   626  00A0  0AA0               	incf	___awdiv@divisor,f
   627  00A1  1903               	skipnz
   628  00A2  0AA1               	incf	___awdiv@divisor+1,f
   629  00A3  01A5               	clrf	___awdiv@sign
   630  00A4  0AA5               	incf	___awdiv@sign,f
   631  00A5                     l785:	
   632  00A5  1FA3               	btfss	___awdiv@dividend+1,7
   633  00A6  28B0               	goto	l791
   634  00A7  09A2               	comf	___awdiv@dividend,f
   635  00A8  09A3               	comf	___awdiv@dividend+1,f
   636  00A9  0AA2               	incf	___awdiv@dividend,f
   637  00AA  1903               	skipnz
   638  00AB  0AA3               	incf	___awdiv@dividend+1,f
   639  00AC  3001               	movlw	1
   640  00AD  00F5               	movwf	??___awdiv
   641  00AE  0875               	movf	??___awdiv,w
   642  00AF  06A5               	xorwf	___awdiv@sign,f
   643  00B0                     l791:	
   644  00B0  01A6               	clrf	___awdiv@quotient
   645  00B1  01A7               	clrf	___awdiv@quotient+1
   646  00B2  0820               	movf	___awdiv@divisor,w
   647  00B3  0421               	iorwf	___awdiv@divisor+1,w
   648  00B4  1903               	btfsc	3,2
   649  00B5  28E7               	goto	l813
   650  00B6  01A4               	clrf	___awdiv@counter
   651  00B7  0AA4               	incf	___awdiv@counter,f
   652  00B8                     l801:	
   653  00B8  1BA1               	btfsc	___awdiv@divisor+1,7
   654  00B9  28C6               	goto	l803
   655  00BA  3001               	movlw	1
   656  00BB                     u485:	
   657  00BB  1003               	clrc
   658  00BC  0DA0               	rlf	___awdiv@divisor,f
   659  00BD  0DA1               	rlf	___awdiv@divisor+1,f
   660  00BE  3EFF               	addlw	-1
   661  00BF  1D03               	skipz
   662  00C0  28BB               	goto	u485
   663  00C1  3001               	movlw	1
   664  00C2  00F5               	movwf	??___awdiv
   665  00C3  0875               	movf	??___awdiv,w
   666  00C4  07A4               	addwf	___awdiv@counter,f
   667  00C5  28B8               	goto	l801
   668  00C6                     l803:	
   669  00C6  3001               	movlw	1
   670  00C7                     u505:	
   671  00C7  1003               	clrc
   672  00C8  0DA6               	rlf	___awdiv@quotient,f
   673  00C9  0DA7               	rlf	___awdiv@quotient+1,f
   674  00CA  3EFF               	addlw	-1
   675  00CB  1D03               	skipz
   676  00CC  28C7               	goto	u505
   677  00CD  0821               	movf	___awdiv@divisor+1,w
   678  00CE  0223               	subwf	___awdiv@dividend+1,w
   679  00CF  1D03               	skipz
   680  00D0  28D3               	goto	u515
   681  00D1  0820               	movf	___awdiv@divisor,w
   682  00D2  0222               	subwf	___awdiv@dividend,w
   683  00D3                     u515:	
   684  00D3  1C03               	skipc
   685  00D4  28DC               	goto	l809
   686  00D5  0820               	movf	___awdiv@divisor,w
   687  00D6  02A2               	subwf	___awdiv@dividend,f
   688  00D7  0821               	movf	___awdiv@divisor+1,w
   689  00D8  1C03               	skipc
   690  00D9  03A3               	decf	___awdiv@dividend+1,f
   691  00DA  02A3               	subwf	___awdiv@dividend+1,f
   692  00DB  1426               	bsf	___awdiv@quotient,0
   693  00DC                     l809:	
   694  00DC  3001               	movlw	1
   695  00DD                     u525:	
   696  00DD  1003               	clrc
   697  00DE  0CA1               	rrf	___awdiv@divisor+1,f
   698  00DF  0CA0               	rrf	___awdiv@divisor,f
   699  00E0  3EFF               	addlw	-1
   700  00E1  1D03               	skipz
   701  00E2  28DD               	goto	u525
   702  00E3  3001               	movlw	1
   703  00E4  02A4               	subwf	___awdiv@counter,f
   704  00E5  1D03               	btfss	3,2
   705  00E6  28C6               	goto	l803
   706  00E7                     l813:	
   707  00E7  0825               	movf	___awdiv@sign,w
   708  00E8  1903               	btfsc	3,2
   709  00E9  28EF               	goto	l817
   710  00EA  09A6               	comf	___awdiv@quotient,f
   711  00EB  09A7               	comf	___awdiv@quotient+1,f
   712  00EC  0AA6               	incf	___awdiv@quotient,f
   713  00ED  1903               	skipnz
   714  00EE  0AA7               	incf	___awdiv@quotient+1,f
   715  00EF                     l817:	
   716  00EF  0827               	movf	___awdiv@quotient+1,w
   717  00F0  00A1               	movwf	?___awdiv+1
   718  00F1  0826               	movf	___awdiv@quotient,w
   719  00F2  00A0               	movwf	?___awdiv
   720  00F3  0008               	return
   721  00F4                     __end_of___awdiv:	
   722                           
   723                           	psect	text3
   724  0141                     __ptext3:	
   725 ;; *************** function _ISR_TIMER_0 *****************
   726 ;; Defined at:
   727 ;;		line 71 in file "temporizador.c"
   728 ;; Parameters:    Size  Location     Type
   729 ;;		None
   730 ;; Auto vars:     Size  Location     Type
   731 ;;		None
   732 ;; Return value:  Size  Location     Type
   733 ;;                  1    wreg      void 
   734 ;; Registers used:
   735 ;;		wreg, status,2, status,0
   736 ;; Tracked objects:
   737 ;;		On entry : 0/0
   738 ;;		On exit  : 0/0
   739 ;;		Unchanged: 0/0
   740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   741 ;;      Params:         0       0       0       0       0
   742 ;;      Locals:         0       0       0       0       0
   743 ;;      Temps:          5       0       0       0       0
   744 ;;      Totals:         5       0       0       0       0
   745 ;;Total ram usage:        5 bytes
   746 ;; Hardware stack levels used:    1
   747 ;; This function calls:
   748 ;;		Nothing
   749 ;; This function is called by:
   750 ;;		Interrupt level 1
   751 ;; This function uses a non-reentrant model
   752 ;;
   753                           
   754                           
   755                           ;psect for function _ISR_TIMER_0
   756  0141                     _ISR_TIMER_0:	
   757                           
   758                           ;temporizador.c: 72: if (INTCONbits.T0IE && INTCONbits.T0IF) {
   759  0141  1A8B               	btfsc	11,5	;volatile
   760  0142  1D0B               	btfss	11,2	;volatile
   761  0143  2959               	goto	i1l41
   762                           
   763                           ;temporizador.c: 73: PORTB = ~PORTB;
   764  0144  0986               	comf	6,f	;volatile
   765                           
   766                           ;temporizador.c: 74: count_ms++;
   767  0145  3001               	movlw	1
   768  0146  00F0               	movwf	??_ISR_TIMER_0
   769  0147  0870               	movf	??_ISR_TIMER_0,w
   770  0148  07F6               	addwf	_count_ms,f
   771                           
   772                           ;temporizador.c: 75: if(count_ms == 20){
   773  0149  3014               	movlw	20
   774  014A  0676               	xorwf	_count_ms,w
   775  014B  1D03               	btfss	3,2
   776  014C  2956               	goto	i1l643
   777                           
   778                           ;temporizador.c: 76: if (++count == 100) {
   779  014D  3001               	movlw	1
   780  014E  00F0               	movwf	??_ISR_TIMER_0
   781  014F  0870               	movf	??_ISR_TIMER_0,w
   782  0150  07F7               	addwf	_count,f
   783  0151  3064               	movlw	100
   784  0152  0677               	xorwf	_count,w
   785  0153  1903               	btfsc	3,2
   786                           
   787                           ;temporizador.c: 77: count = 0;
   788  0154  01F7               	clrf	_count
   789                           
   790                           ;temporizador.c: 78: }
   791                           ;temporizador.c: 79: count_ms = 0;
   792  0155  01F6               	clrf	_count_ms
   793  0156                     i1l643:	
   794                           
   795                           ;temporizador.c: 80: }
   796                           ;temporizador.c: 81: TMR0 = 60;
   797  0156  303C               	movlw	60
   798  0157  0081               	movwf	1	;volatile
   799                           
   800                           ;temporizador.c: 82: INTCONbits.T0IF = 0;
   801  0158  110B               	bcf	11,2	;volatile
   802  0159                     i1l41:	
   803  0159  0874               	movf	??_ISR_TIMER_0+4,w
   804  015A  00FF               	movwf	127
   805  015B  0873               	movf	??_ISR_TIMER_0+3,w
   806  015C  008A               	movwf	10
   807  015D  0872               	movf	??_ISR_TIMER_0+2,w
   808  015E  0084               	movwf	4
   809  015F  0E71               	swapf	(??_ISR_TIMER_0+1)^(0+-128),w
   810  0160  0083               	movwf	3
   811  0161  0EFE               	swapf	126,f
   812  0162  0E7E               	swapf	126,w
   813  0163  0009               	retfie
   814  0164                     __end_of_ISR_TIMER_0:	
   815  007E                     btemp	set	126	;btemp
   816  007E                     wtemp0	set	126
   817                           
   818                           	psect	intentry
   819  0004                     __pintentry:	
   820                           ;incstack = 0
   821                           ; Regs used in _ISR_TIMER_0: [wreg+status,2+status,0]
   822                           
   823  0004                     interrupt_function:	
   824  007E                     saved_w	set	btemp
   825  0004  00FE               	movwf	btemp
   826  0005  0E03               	swapf	3,w
   827  0006  00F1               	movwf	??_ISR_TIMER_0+1
   828  0007  0804               	movf	4,w
   829  0008  00F2               	movwf	??_ISR_TIMER_0+2
   830  0009  080A               	movf	10,w
   831  000A  00F3               	movwf	??_ISR_TIMER_0+3
   832  000B  1283               	bcf	3,5	;RP0=0, select bank0
   833  000C  1303               	bcf	3,6	;RP1=0, select bank0
   834  000D  087F               	movf	btemp+1,w
   835  000E  00F4               	movwf	??_ISR_TIMER_0+4
   836  000F  120A  118A  2941   	ljmp	_ISR_TIMER_0


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       8
    BANK0            80     10      10
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->___awdiv
    _main->___awmod

Critical Paths under _ISR_TIMER_0 in COMMON

    None.

Critical Paths under _main in BANK0

    _main->___awdiv

Critical Paths under _ISR_TIMER_0 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_TIMER_0 in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_TIMER_0 in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_TIMER_0 in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1138
                                              8 BANK0      2     2      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     563
                                              5 COMMON     1     1      0
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     575
                                              5 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR_TIMER_0                                          5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
   ___awmod

 _ISR_TIMER_0 (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      12       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      A       A       5       12.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      12      12        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Sep 23 10:38:17 2021

            __CFG_CP$OFF 0000             ___awdiv@sign 0025              __CFG_LVP$ON 0000  
                    l801 00B8                      l803 00C6                      l813 00E7  
                    l817 00EF                      l809 00DC                      l841 010D  
                    l833 0107                      l843 011B                      l851 0134  
                    l829 0100                      l791 00B0                      l855 013C  
                    l847 0129                      l785 00A5                      l889 003F  
                    u505 00C7             __CFG_CPD$OFF 0000                      u515 00D3  
                    u525 00DD                      u605 0121                      u615 012A  
                    u485 00BB                      u585 0110                      u657 005C  
                    u667 007E                      u677 008D                      fsr0 0004  
           ___awmod@sign 0025             __CFG_IESO$ON 0000             __CFG_FOSC$XT 0000  
                   i1l41 0159                     _TMR0 0001             __CFG_WRT$OFF 0000  
          __CFG_FCMEN$ON 0000                     _main 001B                     btemp 007E  
          __CFG_BOREN$ON 0000                     start 0012            __CFG_MCLRE$ON 0000  
                  ?_main 0070          __end_of___awdiv 00F4            __CFG_WDTE$OFF 0000  
        __end_of___awmod 0141                    _ANSEL 0188          ___awdiv@divisor 0020  
                  i1l643 0156          ___awdiv@counter 0024                    _PORTB 0006  
                  _PORTD 0008                    _TRISD 0088                    _count 0077  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 0015             ?_ISR_TIMER_0 0070             __end_of_main 0099  
                 ??_main 0028         ___awdiv@dividend 0022                   _ANSELH 0189  
                 _TRISB0 0430                   _TRISA4 042C           __CFG_PWRTE$OFF 0000  
              ??___awdiv 0075                ??___awmod 0075         ___awdiv@quotient 0026  
        ___awmod@divisor 0020          ___awmod@counter 0024                   saved_w 007E  
__end_of__initialization 0017           __pcstackCOMMON 0070           _OPTION_REGbits 0081  
             __pmaintext 001B               __pintentry 0004     __size_of_ISR_TIMER_0 0023  
                ___awdiv 0099                  ___awmod 00F4                  __ptext1 00F4  
                __ptext2 0099                  __ptext3 0141         ___awmod@dividend 0022  
   end_of_initialization 0017                _PORTAbits 0005      start_initialization 0015  
            __pbssCOMMON 0076                ___latbits 0002            __pcstackBANK0 0020  
          ??_ISR_TIMER_0 0070                 ?___awdiv 0020                 ?___awmod 0020  
      interrupt_function 0004      __end_of_ISR_TIMER_0 0164         __size_of___awdiv 005B  
       __size_of___awmod 004D        __CFG_BOR4V$BOR40V 0000                 _count_ms 0076  
          __size_of_main 007E              _ISR_TIMER_0 0141               _INTCONbits 000B  
               intlevel1 0000  
