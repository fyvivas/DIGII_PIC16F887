

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Sep 27 05:34:34 2021

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2
    57                           	psect	text43,local,class=CODE,merge=1,delta=2
    58                           	psect	text44,local,class=CODE,merge=1,delta=2
    59                           	psect	text45,local,class=CODE,merge=1,delta=2
    60                           	psect	intentry,global,class=CODE,delta=2
    61                           	psect	text16_split_1,local,class=CODE,merge=1,delta=2
    62                           	dabs	1,0x7E,2
    63  0000                     
    64                           ; Version 1.41
    65                           ; Generated 25/01/2017 GMT
    66                           ; 
    67                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution.
    81                           ; 
    82                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    83                           ;        software without specific prior written permission.
    84                           ; 
    85                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    86                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    87                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    88                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    89                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    90                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    91                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    92                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    93                           ; 
    94                           ; 
    95                           ; Code-generator required, PIC16F887 Definitions
    96                           ; 
    97                           ; SFR Addresses
    98  0000                     	;# 
    99  0001                     	;# 
   100  0002                     	;# 
   101  0003                     	;# 
   102  0004                     	;# 
   103  0005                     	;# 
   104  0006                     	;# 
   105  0007                     	;# 
   106  0008                     	;# 
   107  0009                     	;# 
   108  000A                     	;# 
   109  000B                     	;# 
   110  000C                     	;# 
   111  000D                     	;# 
   112  000E                     	;# 
   113  000E                     	;# 
   114  000F                     	;# 
   115  0010                     	;# 
   116  0011                     	;# 
   117  0012                     	;# 
   118  0013                     	;# 
   119  0014                     	;# 
   120  0015                     	;# 
   121  0015                     	;# 
   122  0016                     	;# 
   123  0017                     	;# 
   124  0018                     	;# 
   125  0019                     	;# 
   126  001A                     	;# 
   127  001B                     	;# 
   128  001B                     	;# 
   129  001C                     	;# 
   130  001D                     	;# 
   131  001E                     	;# 
   132  001F                     	;# 
   133  0081                     	;# 
   134  0085                     	;# 
   135  0086                     	;# 
   136  0087                     	;# 
   137  0088                     	;# 
   138  0089                     	;# 
   139  008C                     	;# 
   140  008D                     	;# 
   141  008E                     	;# 
   142  008F                     	;# 
   143  0090                     	;# 
   144  0091                     	;# 
   145  0092                     	;# 
   146  0093                     	;# 
   147  0093                     	;# 
   148  0093                     	;# 
   149  0094                     	;# 
   150  0095                     	;# 
   151  0096                     	;# 
   152  0097                     	;# 
   153  0098                     	;# 
   154  0099                     	;# 
   155  009A                     	;# 
   156  009B                     	;# 
   157  009C                     	;# 
   158  009D                     	;# 
   159  009E                     	;# 
   160  009F                     	;# 
   161  0105                     	;# 
   162  0107                     	;# 
   163  0108                     	;# 
   164  0109                     	;# 
   165  010C                     	;# 
   166  010C                     	;# 
   167  010D                     	;# 
   168  010E                     	;# 
   169  010F                     	;# 
   170  0185                     	;# 
   171  0187                     	;# 
   172  0188                     	;# 
   173  0189                     	;# 
   174  018C                     	;# 
   175  018D                     	;# 
   176  0000                     	;# 
   177  0001                     	;# 
   178  0002                     	;# 
   179  0003                     	;# 
   180  0004                     	;# 
   181  0005                     	;# 
   182  0006                     	;# 
   183  0007                     	;# 
   184  0008                     	;# 
   185  0009                     	;# 
   186  000A                     	;# 
   187  000B                     	;# 
   188  000C                     	;# 
   189  000D                     	;# 
   190  000E                     	;# 
   191  000E                     	;# 
   192  000F                     	;# 
   193  0010                     	;# 
   194  0011                     	;# 
   195  0012                     	;# 
   196  0013                     	;# 
   197  0014                     	;# 
   198  0015                     	;# 
   199  0015                     	;# 
   200  0016                     	;# 
   201  0017                     	;# 
   202  0018                     	;# 
   203  0019                     	;# 
   204  001A                     	;# 
   205  001B                     	;# 
   206  001B                     	;# 
   207  001C                     	;# 
   208  001D                     	;# 
   209  001E                     	;# 
   210  001F                     	;# 
   211  0081                     	;# 
   212  0085                     	;# 
   213  0086                     	;# 
   214  0087                     	;# 
   215  0088                     	;# 
   216  0089                     	;# 
   217  008C                     	;# 
   218  008D                     	;# 
   219  008E                     	;# 
   220  008F                     	;# 
   221  0090                     	;# 
   222  0091                     	;# 
   223  0092                     	;# 
   224  0093                     	;# 
   225  0093                     	;# 
   226  0093                     	;# 
   227  0094                     	;# 
   228  0095                     	;# 
   229  0096                     	;# 
   230  0097                     	;# 
   231  0098                     	;# 
   232  0099                     	;# 
   233  009A                     	;# 
   234  009B                     	;# 
   235  009C                     	;# 
   236  009D                     	;# 
   237  009E                     	;# 
   238  009F                     	;# 
   239  0105                     	;# 
   240  0107                     	;# 
   241  0108                     	;# 
   242  0109                     	;# 
   243  010C                     	;# 
   244  010C                     	;# 
   245  010D                     	;# 
   246  010E                     	;# 
   247  010F                     	;# 
   248  0185                     	;# 
   249  0187                     	;# 
   250  0188                     	;# 
   251  0189                     	;# 
   252  018C                     	;# 
   253  018D                     	;# 
   254  0000                     	;# 
   255  0001                     	;# 
   256  0002                     	;# 
   257  0003                     	;# 
   258  0004                     	;# 
   259  0005                     	;# 
   260  0006                     	;# 
   261  0007                     	;# 
   262  0008                     	;# 
   263  0009                     	;# 
   264  000A                     	;# 
   265  000B                     	;# 
   266  000C                     	;# 
   267  000D                     	;# 
   268  000E                     	;# 
   269  000E                     	;# 
   270  000F                     	;# 
   271  0010                     	;# 
   272  0011                     	;# 
   273  0012                     	;# 
   274  0013                     	;# 
   275  0014                     	;# 
   276  0015                     	;# 
   277  0015                     	;# 
   278  0016                     	;# 
   279  0017                     	;# 
   280  0018                     	;# 
   281  0019                     	;# 
   282  001A                     	;# 
   283  001B                     	;# 
   284  001B                     	;# 
   285  001C                     	;# 
   286  001D                     	;# 
   287  001E                     	;# 
   288  001F                     	;# 
   289  0081                     	;# 
   290  0085                     	;# 
   291  0086                     	;# 
   292  0087                     	;# 
   293  0088                     	;# 
   294  0089                     	;# 
   295  008C                     	;# 
   296  008D                     	;# 
   297  008E                     	;# 
   298  008F                     	;# 
   299  0090                     	;# 
   300  0091                     	;# 
   301  0092                     	;# 
   302  0093                     	;# 
   303  0093                     	;# 
   304  0093                     	;# 
   305  0094                     	;# 
   306  0095                     	;# 
   307  0096                     	;# 
   308  0097                     	;# 
   309  0098                     	;# 
   310  0099                     	;# 
   311  009A                     	;# 
   312  009B                     	;# 
   313  009C                     	;# 
   314  009D                     	;# 
   315  009E                     	;# 
   316  009F                     	;# 
   317  0105                     	;# 
   318  0107                     	;# 
   319  0108                     	;# 
   320  0109                     	;# 
   321  010C                     	;# 
   322  010C                     	;# 
   323  010D                     	;# 
   324  010E                     	;# 
   325  010F                     	;# 
   326  0185                     	;# 
   327  0187                     	;# 
   328  0188                     	;# 
   329  0189                     	;# 
   330  018C                     	;# 
   331  018D                     	;# 
   332                           
   333                           	psect	strings
   334  0000'                    __pstrings:	
   335  0000'                    stringtab:	
   336  0000'                    __stringtab:	
   337                           
   338                           ;	String table - string pointers are 1 byte each
   339  0000' 1BFF               	btfsc	btemp+1,7
   340  0001' 2800'              	ljmp	stringcode
   341  0002' 1383               	bcf	3,7
   342  0003' 187F               	btfsc	btemp+1,0
   343  0004' 1783               	bsf	3,7
   344  0005' 0800               	movf	0,w
   345  0006' 0A84               	incf	4,f
   346  0007' 1903               	skipnz
   347  0008' 0AFF               	incf	btemp+1,f
   348  0009' 0008               	return
   349  000A'                    stringcode:	
   350  000A'                    stringdir:	
   351  000A' 3000'              	movlw	high stringdir
   352  000B' 008A               	movwf	10
   353  000C' 0804               	movf	4,w
   354  000D' 0A84               	incf	4,f
   355  000E' 0782               	addwf	2,f
   356  000F'                    __stringbase:	
   357  000F' 3400               	retlw	0
   358  0010'                    __end_of__stringtab:	
   359  0010'                    _dpowers:	
   360  0010' 3401               	retlw	1
   361  0011' 3400               	retlw	0
   362  0012' 3400               	retlw	0
   363  0013' 3400               	retlw	0
   364  0014' 340A               	retlw	10
   365  0015' 3400               	retlw	0
   366  0016' 3400               	retlw	0
   367  0017' 3400               	retlw	0
   368  0018' 3464               	retlw	100
   369  0019' 3400               	retlw	0
   370  001A' 3400               	retlw	0
   371  001B' 3400               	retlw	0
   372  001C' 34E8               	retlw	232
   373  001D' 3403               	retlw	3
   374  001E' 3400               	retlw	0
   375  001F' 3400               	retlw	0
   376  0020' 3410               	retlw	16
   377  0021' 3427               	retlw	39
   378  0022' 3400               	retlw	0
   379  0023' 3400               	retlw	0
   380  0024' 34A0               	retlw	160
   381  0025' 3486               	retlw	134
   382  0026' 3401               	retlw	1
   383  0027' 3400               	retlw	0
   384  0028' 3440               	retlw	64
   385  0029' 3442               	retlw	66
   386  002A' 340F               	retlw	15
   387  002B' 3400               	retlw	0
   388  002C' 3480               	retlw	128
   389  002D' 3496               	retlw	150
   390  002E' 3498               	retlw	152
   391  002F' 3400               	retlw	0
   392  0030' 3400               	retlw	0
   393  0031' 34E1               	retlw	225
   394  0032' 34F5               	retlw	245
   395  0033' 3405               	retlw	5
   396  0034' 3400               	retlw	0
   397  0035' 34CA               	retlw	202
   398  0036' 349A               	retlw	154
   399  0037' 343B               	retlw	59
   400  0038'                    __end_of_dpowers:	
   401  0038'                    __powers_:	
   402  0038' 3400               	retlw	0
   403  0039' 3480               	retlw	128
   404  003A' 343F               	retlw	63
   405  003B' 3400               	retlw	0
   406  003C' 3420               	retlw	32
   407  003D' 3441               	retlw	65
   408  003E' 3400               	retlw	0
   409  003F' 34C8               	retlw	200
   410  0040' 3442               	retlw	66
   411  0041' 3400               	retlw	0
   412  0042' 347A               	retlw	122
   413  0043' 3444               	retlw	68
   414  0044' 3440               	retlw	64
   415  0045' 341C               	retlw	28
   416  0046' 3446               	retlw	70
   417  0047' 3450               	retlw	80
   418  0048' 34C3               	retlw	195
   419  0049' 3447               	retlw	71
   420  004A' 3424               	retlw	36
   421  004B' 3474               	retlw	116
   422  004C' 3449               	retlw	73
   423  004D' 3497               	retlw	151
   424  004E' 3418               	retlw	24
   425  004F' 344B               	retlw	75
   426  0050' 34BC               	retlw	188
   427  0051' 34BE               	retlw	190
   428  0052' 344C               	retlw	76
   429  0053' 346B               	retlw	107
   430  0054' 346E               	retlw	110
   431  0055' 344E               	retlw	78
   432  0056' 3403               	retlw	3
   433  0057' 3415               	retlw	21
   434  0058' 3450               	retlw	80
   435  0059' 3479               	retlw	121
   436  005A' 34AD               	retlw	173
   437  005B' 3460               	retlw	96
   438  005C' 34F3               	retlw	243
   439  005D' 3449               	retlw	73
   440  005E' 3471               	retlw	113
   441  005F'                    __end_of__powers_:	
   442  005F'                    __npowers_:	
   443  005F' 3400               	retlw	0
   444  0060' 3480               	retlw	128
   445  0061' 343F               	retlw	63
   446  0062' 34CD               	retlw	205
   447  0063' 34CC               	retlw	204
   448  0064' 343D               	retlw	61
   449  0065' 34D7               	retlw	215
   450  0066' 3423               	retlw	35
   451  0067' 343C               	retlw	60
   452  0068' 3412               	retlw	18
   453  0069' 3483               	retlw	131
   454  006A' 343A               	retlw	58
   455  006B' 34B7               	retlw	183
   456  006C' 34D1               	retlw	209
   457  006D' 3438               	retlw	56
   458  006E' 34C6               	retlw	198
   459  006F' 3427               	retlw	39
   460  0070' 3437               	retlw	55
   461  0071' 3438               	retlw	56
   462  0072' 3486               	retlw	134
   463  0073' 3435               	retlw	53
   464  0074' 34C0               	retlw	192
   465  0075' 34D6               	retlw	214
   466  0076' 3433               	retlw	51
   467  0077' 34CC               	retlw	204
   468  0078' 342B               	retlw	43
   469  0079' 3432               	retlw	50
   470  007A' 3470               	retlw	112
   471  007B' 3489               	retlw	137
   472  007C' 3430               	retlw	48
   473  007D' 34E7               	retlw	231
   474  007E' 34DB               	retlw	219
   475  007F' 342E               	retlw	46
   476  0080' 34E5               	retlw	229
   477  0081' 343C               	retlw	60
   478  0082' 341E               	retlw	30
   479  0083' 3442               	retlw	66
   480  0084' 34A2               	retlw	162
   481  0085' 340D               	retlw	13
   482  0086'                    __end_of__npowers_:	
   483  0018                     _RCSTA	set	24
   484  0006                     _PORTB	set	6
   485  0018                     _RCSTAbits	set	24
   486  001A                     _RCREG	set	26
   487  000B                     _INTCONbits	set	11
   488  003A                     _RC2	set	58
   489  0039                     _RC1	set	57
   490  0038                     _RC0	set	56
   491  00C4                     _CREN	set	196
   492  005F                     _GIE	set	95
   493  0065                     _RCIF	set	101
   494  0098                     _TXSTA	set	152
   495  0099                     _SPBRG	set	153
   496  0086                     _TRISB	set	134
   497  0087                     _TRISC	set	135
   498  008C                     _PIE1bits	set	140
   499  043F                     _TRISC7	set	1087
   500  043E                     _TRISC6	set	1086
   501  0086'                    STR_1:	
   502  0086' 3455               	retlw	85	;'U'
   503  0087' 3454               	retlw	84	;'T'
   504  0088' 3443               	retlw	67	;'C'
   505  0089' 3420               	retlw	32	;' '
   506  008A' 3454               	retlw	84	;'T'
   507  008B' 3469               	retlw	105	;'i'
   508  008C' 346D               	retlw	109	;'m'
   509  008D' 3465               	retlw	101	;'e'
   510  008E' 343A               	retlw	58	;':'
   511  008F' 3420               	retlw	32	;' '
   512  0090' 3400               	retlw	0
   513  0091'                    STR_9:	
   514  0091' 3425               	retlw	37	;'%'
   515  0092' 3464               	retlw	100	;'d'
   516  0093' 343A               	retlw	58	;':'
   517  0094' 3425               	retlw	37	;'%'
   518  0095' 3464               	retlw	100	;'d'
   519  0096' 343A               	retlw	58	;':'
   520  0097' 3425               	retlw	37	;'%'
   521  0098' 3464               	retlw	100	;'d'
   522  0099' 3400               	retlw	0
   523  009A'                    STR_5:	
   524  009A' 344C               	retlw	76	;'L'
   525  009B' 346F               	retlw	111	;'o'
   526  009C' 346E               	retlw	110	;'n'
   527  009D' 3467               	retlw	103	;'g'
   528  009E' 343A               	retlw	58	;':'
   529  009F' 3420               	retlw	32	;' '
   530  00A0' 3400               	retlw	0
   531  00A1'                    STR_3:	
   532  00A1' 344C               	retlw	76	;'L'
   533  00A2' 3461               	retlw	97	;'a'
   534  00A3' 3474               	retlw	116	;'t'
   535  00A4' 343A               	retlw	58	;':'
   536  00A5' 3420               	retlw	32	;' '
   537  00A6' 3400               	retlw	0
   538  00A7'                    STR_7:	
   539  00A7' 3441               	retlw	65	;'A'
   540  00A8' 346C               	retlw	108	;'l'
   541  00A9' 3474               	retlw	116	;'t'
   542  00AA' 343A               	retlw	58	;':'
   543  00AB' 3420               	retlw	32	;' '
   544  00AC' 3400               	retlw	0
   545  00AD'                    STR_4:	
   546  00AD' 3425               	retlw	37	;'%'
   547  00AE' 342E               	retlw	46	;'.'
   548  00AF' 3430               	retlw	48	;'0'
   549  00B0' 3435               	retlw	53	;'5'
   550  00B1' 3466               	retlw	102	;'f'
   551  00B2' 3400               	retlw	0
   552  00B3'                    STR_8:	
   553  00B3' 3425               	retlw	37	;'%'
   554  00B4' 342E               	retlw	46	;'.'
   555  00B5' 3432               	retlw	50	;'2'
   556  00B6' 3466               	retlw	102	;'f'
   557  00B7' 3400               	retlw	0
   558  00B8'                    STR_2:	
   559  00B8' 3420               	retlw	32	;' '
   560  00B9' 3420               	retlw	32	;' '
   561  00BA' 3400               	retlw	0
   562  00AD'                    
   563                           ; #config settings
   564  0000                     
   565                           	psect	cinit
   566  0000'                    start_initialization:	
   567  0000'                    __initialization:	
   568                           
   569                           ; Clear objects allocated to COMMON
   570  0000' 0180'              	clrf	__pbssCOMMON& (0+127)
   571  0001' 0180'              	clrf	(__pbssCOMMON+1)& (0+127)
   572  0002' 0180'              	clrf	(__pbssCOMMON+2)& (0+127)
   573  0003' 0180'              	clrf	(__pbssCOMMON+3)& (0+127)
   574  0004' 0180'              	clrf	(__pbssCOMMON+4)& (0+127)
   575                           
   576                           ; Clear objects allocated to BANK1
   577  0005' 1683               	bsf	3,5	;RP0=1, select bank1
   578  0006' 1303               	bcf	3,6	;RP1=0, select bank1
   579  0007' 0180'              	clrf	__pbssBANK1& (0+127)
   580  0008' 0180'              	clrf	(__pbssBANK1+1)& (0+127)
   581  0009' 0180'              	clrf	(__pbssBANK1+2)& (0+127)
   582  000A' 0180'              	clrf	(__pbssBANK1+3)& (0+127)
   583  000B' 0180'              	clrf	(__pbssBANK1+4)& (0+127)
   584  000C' 0180'              	clrf	(__pbssBANK1+5)& (0+127)
   585                           
   586                           ; Clear objects allocated to BANK3
   587  000D' 1783               	bsf	3,7	;select IRP bank2
   588  000E' 3000'              	movlw	low __pbssBANK3
   589  000F' 0084               	movwf	4
   590  0010' 3000'              	movlw	low (__pbssBANK3+35)
   591  0011' 120A' 118A' 2000' 120A' 118A' 	fcall	clear_ram0
   592                           
   593                           ; Clear objects allocated to BANK2
   594  0016' 3000'              	movlw	low __pbssBANK2
   595  0017' 0084               	movwf	4
   596  0018' 3000'              	movlw	low (__pbssBANK2+80)
   597  0019' 120A' 118A' 2000'  	fcall	clear_ram0
   598  001C'                    end_of_initialization:	
   599                           ;End of C runtime variable initialization code
   600                           
   601  001C'                    __end_of__initialization:	
   602  001C' 0183               	clrf	3
   603  001D' 120A' 118A' 2800'  	ljmp	_main	;jump to C main() function
   604                           
   605                           	psect	bssCOMMON
   606  0000'                    __pbssCOMMON:	
   607  0000'                    _GGA_Index:	
   608  0000'                    	ds	2
   609  0002'                    _IsLastEndGGA:	
   610  0002'                    	ds	1
   611  0003'                    _IsEndGGA:	
   612  0003'                    	ds	1
   613  0004'                    _CommaCounter:	
   614  0004'                    	ds	1
   615                           
   616                           	psect	bssBANK1
   617  0000'                    __pbssBANK1:	
   618  0000'                    _GGA_CODE:	
   619  0000'                    	ds	3
   620  0003'                    _IsItGGAString:	
   621  0003'                    	ds	1
   622  0004'                    _E_W:	
   623  0004'                    	ds	1
   624  0005'                    _N_S:	
   625  0005'                    	ds	1
   626                           
   627                           	psect	bssBANK3
   628  0000'                    __pbssBANK3:	
   629  0000'                    _GGA_Pointers:	
   630  0000'                    	ds	20
   631  0014'                    _Data_Buffer:	
   632  0014'                    	ds	15
   633                           
   634                           	psect	bssBANK2
   635  0000'                    __pbssBANK2:	
   636  0000'                    _GGA_Buffer:	
   637  0000'                    	ds	80
   638                           
   639                           	psect	clrtext
   640  0000'                    clear_ram0:	
   641                           ;	Called with FSR containing the base address, and
   642                           ;	W with the last address+1
   643                           
   644  0000' 0064               	clrwdt	;clear the watchdog before getting into this loop
   645  0001'                    clrloop0:	
   646  0001' 0180               	clrf	0	;clear RAM location pointed to by FSR
   647  0002' 0A84               	incf	4,f	;increment pointer
   648  0003' 0604               	xorwf	4,w	;XOR with final address
   649  0004' 1903               	btfsc	3,2	;have we reached the end yet?
   650  0005' 3400               	retlw	0	;all done for this memory range, return
   651  0006' 0604               	xorwf	4,w	;XOR again to restore value
   652  0007' 2800'              	goto	clrloop0	;do the next byte
   653                           
   654                           	psect	cstackBANK1
   655  0000'                    __pcstackBANK1:	
   656  0000'                    ??_sprintf:	
   657  0000'                    get_altitude@Alt_Buffer:	
   658                           ; 1 bytes @ 0x0
   659                           
   660  0000'                    get_latitude@Lat_Buffer:	
   661                           ; 12 bytes @ 0x0
   662                           
   663  0000'                    get_longitude@Long_Buffer:	
   664                           ; 15 bytes @ 0x0
   665                           
   666                           
   667                           ; 15 bytes @ 0x0
   668  0000'                    	ds	6
   669  0006'                    _sprintf$833:	
   670                           
   671                           ; 3 bytes @ 0x6
   672  0006'                    	ds	3
   673  0009'                    sprintf@ap:	
   674                           
   675                           ; 1 bytes @ 0x9
   676  0009'                    	ds	1
   677  000A'                    sprintf@flag:	
   678                           
   679                           ; 2 bytes @ 0xA
   680  000A'                    	ds	2
   681  000C'                    sprintf@exp:	
   682  000C'                    get_altitude@_Altitude:	
   683                           ; 2 bytes @ 0xC
   684                           
   685                           
   686                           ; 3 bytes @ 0xC
   687  000C'                    	ds	2
   688  000E'                    sprintf@tmpval:	
   689                           
   690                           ; 4 bytes @ 0xE
   691  000E'                    	ds	1
   692  000F'                    get_altitude@alt_pointer:	
   693  000F'                    get_latitude@_latitude:	
   694                           ; 1 bytes @ 0xF
   695                           
   696  000F'                    get_longitude@_longitude:	
   697                           ; 3 bytes @ 0xF
   698                           
   699                           
   700                           ; 3 bytes @ 0xF
   701  000F'                    	ds	1
   702  0010'                    get_altitude@alt_index:	
   703                           
   704                           ; 1 bytes @ 0x10
   705  0010'                    	ds	1
   706  0011'                    get_altitude@index:	
   707                           
   708                           ; 1 bytes @ 0x11
   709  0011'                    	ds	1
   710  0012'                    get_latitude@lat_pointer:	
   711  0012'                    get_longitude@long_pointer:	
   712                           ; 1 bytes @ 0x12
   713                           
   714  0012'                    sprintf@val:	
   715                           ; 1 bytes @ 0x12
   716                           
   717                           
   718                           ; 4 bytes @ 0x12
   719  0012'                    	ds	1
   720  0013'                    get_latitude@index:	
   721  0013'                    get_longitude@index:	
   722                           ; 1 bytes @ 0x13
   723                           
   724                           
   725                           ; 1 bytes @ 0x13
   726  0013'                    	ds	1
   727  0014'                    get_latitude@lat_index:	
   728  0014'                    get_longitude@long_index:	
   729                           ; 1 bytes @ 0x14
   730                           
   731                           
   732                           ; 1 bytes @ 0x14
   733  0014'                    	ds	2
   734  0016'                    sprintf@prec:	
   735                           
   736                           ; 2 bytes @ 0x16
   737  0016'                    	ds	2
   738  0018'                    sprintf@fval:	
   739                           
   740                           ; 3 bytes @ 0x18
   741  0018'                    	ds	3
   742  001B'                    sprintf@c:	
   743                           
   744                           ; 1 bytes @ 0x1B
   745  001B'                    	ds	1
   746  001C'                    ?_convert_time_to_UTC:	
   747  001C'                    convert_time_to_UTC@UTC_Time:	
   748                           ; 1 bytes @ 0x1C
   749                           
   750                           
   751                           ; 4 bytes @ 0x1C
   752  001C'                    	ds	4
   753  0020'                    ??_convert_time_to_UTC:	
   754                           
   755                           ; 1 bytes @ 0x20
   756  0020'                    	ds	1
   757  0021'                    _convert_time_to_UTC$828:	
   758                           
   759                           ; 4 bytes @ 0x21
   760  0021'                    	ds	4
   761  0025'                    convert_time_to_UTC@hour:	
   762                           
   763                           ; 2 bytes @ 0x25
   764  0025'                    	ds	2
   765  0027'                    convert_time_to_UTC@min:	
   766                           
   767                           ; 2 bytes @ 0x27
   768  0027'                    	ds	2
   769  0029'                    convert_time_to_UTC@sec:	
   770                           
   771                           ; 2 bytes @ 0x29
   772  0029'                    	ds	2
   773  002B'                    ??_main:	
   774                           
   775                           ; 1 bytes @ 0x2B
   776  002B'                    	ds	1
   777  002C'                    main@GPS_Buffer:	
   778                           
   779                           ; 15 bytes @ 0x2C
   780  002C'                    	ds	15
   781  003B'                    main@Time:	
   782                           
   783                           ; 4 bytes @ 0x3B
   784  003B'                    	ds	4
   785  003F'                    main@Altitude:	
   786                           
   787                           ; 3 bytes @ 0x3F
   788  003F'                    	ds	3
   789  0042'                    main@Latitude:	
   790                           
   791                           ; 3 bytes @ 0x42
   792  0042'                    	ds	3
   793  0045'                    main@Longitude:	
   794                           
   795                           ; 3 bytes @ 0x45
   796  0045'                    	ds	3
   797                           
   798                           	psect	cstackCOMMON
   799  0000'                    __pcstackCOMMON:	
   800  0000'                    ?_isdigit:	
   801  0000'                    ?_isspace:	
   802                           ; 1 bit 
   803                           
   804  0000'                    ?_LCD_Init:	
   805                           ; 1 bit 
   806                           
   807  0000'                    ?_main:	
   808                           ; 1 bytes @ 0x0
   809                           
   810  0000'                    ?_Serial_ISR:	
   811                           ; 1 bytes @ 0x0
   812                           
   813  0000'                    ??_Serial_ISR:	
   814                           ; 1 bytes @ 0x0
   815                           
   816  0000'                    ?_LCD_Command:	
   817                           ; 1 bytes @ 0x0
   818                           
   819  0000'                    ?_LCD_Char:	
   820                           ; 1 bytes @ 0x0
   821                           
   822                           
   823                           ; 1 bytes @ 0x0
   824  0000'                    	ds	5
   825  0005'                    Serial_ISR@received_char:	
   826                           
   827                           ; 1 bytes @ 0x5
   828  0005'                    	ds	1
   829                           
   830                           	psect	cstackBANK0
   831  0000'                    __pcstackBANK0:	
   832  0000'                    ?___ftge:	
   833  0000'                    ?_memset:	
   834                           ; 1 bit 
   835                           
   836  0000'                    ?_MSdelay:	
   837                           ; 1 bytes @ 0x0
   838                           
   839  0000'                    ??_isdigit:	
   840                           ; 1 bytes @ 0x0
   841                           
   842  0000'                    ??_isspace:	
   843                           ; 1 bytes @ 0x0
   844                           
   845  0000'                    ?___wmul:	
   846                           ; 1 bytes @ 0x0
   847                           
   848  0000'                    ?___awmod:	
   849                           ; 2 bytes @ 0x0
   850                           
   851  0000'                    ?___ftpack:	
   852                           ; 2 bytes @ 0x0
   853                           
   854  0000'                    ?__tdiv_to_l_:	
   855                           ; 3 bytes @ 0x0
   856                           
   857  0000'                    ?__div_to_l_:	
   858                           ; 4 bytes @ 0x0
   859                           
   860  0000'                    ?___lmul:	
   861                           ; 4 bytes @ 0x0
   862                           
   863  0000'                    ?___aldiv:	
   864                           ; 4 bytes @ 0x0
   865                           
   866  0000'                    ?___llmod:	
   867                           ; 4 bytes @ 0x0
   868                           
   869  0000'                    _isdigit$604:	
   870                           ; 4 bytes @ 0x0
   871                           
   872  0000'                    _isspace$607:	
   873                           ; 1 bytes @ 0x0
   874                           
   875  0000'                    MSdelay@val:	
   876                           ; 1 bytes @ 0x0
   877                           
   878  0000'                    ___wmul@multiplier:	
   879                           ; 2 bytes @ 0x0
   880                           
   881  0000'                    ___awmod@divisor:	
   882                           ; 2 bytes @ 0x0
   883                           
   884  0000'                    memset@c:	
   885                           ; 2 bytes @ 0x0
   886                           
   887  0000'                    __div_to_l_@f1:	
   888                           ; 2 bytes @ 0x0
   889                           
   890  0000'                    ___ftpack@arg:	
   891                           ; 3 bytes @ 0x0
   892                           
   893  0000'                    __tdiv_to_l_@f1:	
   894                           ; 3 bytes @ 0x0
   895                           
   896  0000'                    ___ftge@ff1:	
   897                           ; 3 bytes @ 0x0
   898                           
   899  0000'                    ___lmul@multiplier:	
   900                           ; 3 bytes @ 0x0
   901                           
   902  0000'                    ___aldiv@divisor:	
   903                           ; 4 bytes @ 0x0
   904                           
   905  0000'                    ___llmod@divisor:	
   906                           ; 4 bytes @ 0x0
   907                           
   908                           
   909                           ; 4 bytes @ 0x0
   910  0000'                    	ds	1
   911  0001'                    isdigit@c:	
   912  0001'                    isspace@c:	
   913                           ; 1 bytes @ 0x1
   914                           
   915                           
   916                           ; 1 bytes @ 0x1
   917  0001'                    	ds	1
   918  0002'                    ??_MSdelay:	
   919  0002'                    MSdelay@i:	
   920                           ; 1 bytes @ 0x2
   921                           
   922  0002'                    ___wmul@multiplicand:	
   923                           ; 2 bytes @ 0x2
   924                           
   925  0002'                    ___awmod@dividend:	
   926                           ; 2 bytes @ 0x2
   927                           
   928  0002'                    memset@n:	
   929                           ; 2 bytes @ 0x2
   930                           
   931                           
   932                           ; 2 bytes @ 0x2
   933  0002'                    	ds	1
   934  0003'                    ___ftpack@exp:	
   935  0003'                    __div_to_l_@f2:	
   936                           ; 1 bytes @ 0x3
   937                           
   938  0003'                    __tdiv_to_l_@f2:	
   939                           ; 3 bytes @ 0x3
   940                           
   941  0003'                    ___ftge@ff2:	
   942                           ; 3 bytes @ 0x3
   943                           
   944                           
   945                           ; 3 bytes @ 0x3
   946  0003'                    	ds	1
   947  0004'                    ??_memset:	
   948  0004'                    ??___wmul:	
   949                           ; 1 bytes @ 0x4
   950                           
   951  0004'                    ??___awmod:	
   952                           ; 1 bytes @ 0x4
   953                           
   954  0004'                    ___ftpack@sign:	
   955                           ; 1 bytes @ 0x4
   956                           
   957  0004'                    MSdelay@j:	
   958                           ; 1 bytes @ 0x4
   959                           
   960  0004'                    ___wmul@product:	
   961                           ; 2 bytes @ 0x4
   962                           
   963  0004'                    ___lmul@multiplicand:	
   964                           ; 2 bytes @ 0x4
   965                           
   966  0004'                    ___aldiv@dividend:	
   967                           ; 4 bytes @ 0x4
   968                           
   969  0004'                    ___llmod@dividend:	
   970                           ; 4 bytes @ 0x4
   971                           
   972                           
   973                           ; 4 bytes @ 0x4
   974  0004'                    	ds	1
   975  0005'                    ??___ftpack:	
   976  0005'                    ___awmod@counter:	
   977                           ; 1 bytes @ 0x5
   978                           
   979  0005'                    memset@p:	
   980                           ; 1 bytes @ 0x5
   981                           
   982                           
   983                           ; 1 bytes @ 0x5
   984  0005'                    	ds	1
   985  0006'                    ??__tdiv_to_l_:	
   986  0006'                    ??__div_to_l_:	
   987                           ; 1 bytes @ 0x6
   988                           
   989  0006'                    ??_LCD_Command:	
   990                           ; 1 bytes @ 0x6
   991                           
   992  0006'                    ??_LCD_Char:	
   993                           ; 1 bytes @ 0x6
   994                           
   995  0006'                    ??___ftge:	
   996                           ; 1 bytes @ 0x6
   997                           
   998  0006'                    LCD_Command@cmd:	
   999                           ; 1 bytes @ 0x6
  1000                           
  1001  0006'                    LCD_Char@char_data:	
  1002                           ; 1 bytes @ 0x6
  1003                           
  1004  0006'                    ___awmod@sign:	
  1005                           ; 1 bytes @ 0x6
  1006                           
  1007  0006'                    memset@p1:	
  1008                           ; 1 bytes @ 0x6
  1009                           
  1010                           
  1011                           ; 1 bytes @ 0x6
  1012  0006'                    	ds	1
  1013  0007'                    ??_LCD_Init:	
  1014  0007'                    ?_LCD_String:	
  1015                           ; 1 bytes @ 0x7
  1016                           
  1017  0007'                    ?___awdiv:	
  1018                           ; 1 bytes @ 0x7
  1019                           
  1020  0007'                    LCD_String@str:	
  1021                           ; 2 bytes @ 0x7
  1022                           
  1023  0007'                    ___awdiv@divisor:	
  1024                           ; 2 bytes @ 0x7
  1025                           
  1026                           
  1027                           ; 2 bytes @ 0x7
  1028  0007'                    	ds	1
  1029  0008'                    ??___lmul:	
  1030  0008'                    ??___aldiv:	
  1031                           ; 1 bytes @ 0x8
  1032                           
  1033  0008'                    ??___llmod:	
  1034                           ; 1 bytes @ 0x8
  1035                           
  1036  0008'                    ?___altoft:	
  1037                           ; 1 bytes @ 0x8
  1038                           
  1039  0008'                    ?___awtoft:	
  1040                           ; 3 bytes @ 0x8
  1041                           
  1042  0008'                    ?___ftdiv:	
  1043                           ; 3 bytes @ 0x8
  1044                           
  1045  0008'                    ?___lbtoft:	
  1046                           ; 3 bytes @ 0x8
  1047                           
  1048  0008'                    ?___lltoft:	
  1049                           ; 3 bytes @ 0x8
  1050                           
  1051  0008'                    ___awtoft@c:	
  1052                           ; 3 bytes @ 0x8
  1053                           
  1054  0008'                    ___ftdiv@f2:	
  1055                           ; 2 bytes @ 0x8
  1056                           
  1057  0008'                    ___altoft@c:	
  1058                           ; 3 bytes @ 0x8
  1059                           
  1060  0008'                    ___lltoft@c:	
  1061                           ; 4 bytes @ 0x8
  1062                           
  1063                           
  1064                           ; 4 bytes @ 0x8
  1065  0008'                    	ds	1
  1066  0009'                    ?_LCD_String_xy:	
  1067  0009'                    ??_LCD_String:	
  1068                           ; 1 bytes @ 0x9
  1069                           
  1070  0009'                    LCD_String_xy@pos:	
  1071                           ; 1 bytes @ 0x9
  1072                           
  1073  0009'                    ___aldiv@counter:	
  1074                           ; 1 bytes @ 0x9
  1075                           
  1076  0009'                    ___llmod@counter:	
  1077                           ; 1 bytes @ 0x9
  1078                           
  1079  0009'                    ___awdiv@dividend:	
  1080                           ; 1 bytes @ 0x9
  1081                           
  1082  0009'                    ___lmul@product:	
  1083                           ; 2 bytes @ 0x9
  1084                           
  1085                           
  1086                           ; 4 bytes @ 0x9
  1087  0009'                    	ds	1
  1088  000A'                    ?___lldiv:	
  1089  000A'                    LCD_String_xy@str:	
  1090                           ; 4 bytes @ 0xA
  1091                           
  1092  000A'                    ___aldiv@sign:	
  1093                           ; 1 bytes @ 0xA
  1094                           
  1095  000A'                    __tdiv_to_l_@quot:	
  1096                           ; 1 bytes @ 0xA
  1097                           
  1098  000A'                    ___lldiv@divisor:	
  1099                           ; 4 bytes @ 0xA
  1100                           
  1101                           
  1102                           ; 4 bytes @ 0xA
  1103  000A'                    	ds	1
  1104  000B'                    ??_LCD_String_xy:	
  1105  000B'                    ??___awdiv:	
  1106                           ; 1 bytes @ 0xB
  1107                           
  1108  000B'                    ??___awtoft:	
  1109                           ; 1 bytes @ 0xB
  1110                           
  1111  000B'                    ??___lbtoft:	
  1112                           ; 1 bytes @ 0xB
  1113                           
  1114  000B'                    LCD_String_xy@row:	
  1115                           ; 1 bytes @ 0xB
  1116                           
  1117  000B'                    ___ftdiv@f1:	
  1118                           ; 1 bytes @ 0xB
  1119                           
  1120  000B'                    ___aldiv@quotient:	
  1121                           ; 3 bytes @ 0xB
  1122                           
  1123                           
  1124                           ; 4 bytes @ 0xB
  1125  000B'                    	ds	1
  1126  000C'                    ??___altoft:	
  1127  000C'                    ??___lltoft:	
  1128                           ; 1 bytes @ 0xC
  1129                           
  1130  000C'                    ___awdiv@counter:	
  1131                           ; 1 bytes @ 0xC
  1132                           
  1133                           
  1134                           ; 1 bytes @ 0xC
  1135  000C'                    	ds	1
  1136  000D'                    ?_atol:	
  1137  000D'                    ___awdiv@sign:	
  1138                           ; 4 bytes @ 0xD
  1139                           
  1140  000D'                    ___awtoft@sign:	
  1141                           ; 1 bytes @ 0xD
  1142                           
  1143  000D'                    ___lltoft@exp:	
  1144                           ; 1 bytes @ 0xD
  1145                           
  1146                           
  1147                           ; 1 bytes @ 0xD
  1148  000D'                    	ds	1
  1149  000E'                    ??___ftdiv:	
  1150  000E'                    ___altoft@exp:	
  1151                           ; 1 bytes @ 0xE
  1152                           
  1153  000E'                    __tdiv_to_l_@cntr:	
  1154                           ; 1 bytes @ 0xE
  1155                           
  1156  000E'                    ___awdiv@quotient:	
  1157                           ; 1 bytes @ 0xE
  1158                           
  1159  000E'                    __div_to_l_@quot:	
  1160                           ; 2 bytes @ 0xE
  1161                           
  1162  000E'                    ___lldiv@dividend:	
  1163                           ; 4 bytes @ 0xE
  1164                           
  1165                           
  1166                           ; 4 bytes @ 0xE
  1167  000E'                    	ds	1
  1168  000F'                    ___altoft@sign:	
  1169  000F'                    __tdiv_to_l_@exp1:	
  1170                           ; 1 bytes @ 0xF
  1171                           
  1172  000F'                    ___lbtoft@c:	
  1173                           ; 1 bytes @ 0xF
  1174                           
  1175                           
  1176                           ; 1 bytes @ 0xF
  1177  000F'                    	ds	1
  1178  0010'                    ?___bmul:	
  1179  0010'                    ___bmul@multiplicand:	
  1180                           ; 1 bytes @ 0x10
  1181                           
  1182                           
  1183                           ; 1 bytes @ 0x10
  1184  0010'                    	ds	1
  1185  0011'                    ??_atol:	
  1186  0011'                    ??___bmul:	
  1187                           ; 1 bytes @ 0x11
  1188                           
  1189                           
  1190                           ; 1 bytes @ 0x11
  1191  0011'                    	ds	1
  1192  0012'                    ??___lldiv:	
  1193  0012'                    ___bmul@product:	
  1194                           ; 1 bytes @ 0x12
  1195                           
  1196  0012'                    __div_to_l_@cntr:	
  1197                           ; 1 bytes @ 0x12
  1198                           
  1199  0012'                    ___ftdiv@cntr:	
  1200                           ; 1 bytes @ 0x12
  1201                           
  1202                           
  1203                           ; 1 bytes @ 0x12
  1204  0012'                    	ds	1
  1205  0013'                    ___bmul@multiplier:	
  1206  0013'                    __div_to_l_@exp1:	
  1207                           ; 1 bytes @ 0x13
  1208                           
  1209  0013'                    ___ftdiv@f3:	
  1210                           ; 1 bytes @ 0x13
  1211                           
  1212  0013'                    ___lldiv@quotient:	
  1213                           ; 3 bytes @ 0x13
  1214                           
  1215                           
  1216                           ; 4 bytes @ 0x13
  1217  0013'                    	ds	1
  1218  0014'                    ?___ftmul:	
  1219  0014'                    ___ftmul@f1:	
  1220                           ; 3 bytes @ 0x14
  1221                           
  1222                           
  1223                           ; 3 bytes @ 0x14
  1224  0014'                    	ds	1
  1225  0015'                    atol@sign:	
  1226                           
  1227                           ; 1 bytes @ 0x15
  1228  0015'                    	ds	1
  1229  0016'                    ___ftdiv@exp:	
  1230  0016'                    atol@a:	
  1231                           ; 1 bytes @ 0x16
  1232                           
  1233                           
  1234                           ; 4 bytes @ 0x16
  1235  0016'                    	ds	1
  1236  0017'                    ___ftdiv@sign:	
  1237  0017'                    ___lldiv@counter:	
  1238                           ; 1 bytes @ 0x17
  1239                           
  1240  0017'                    ___ftmul@f2:	
  1241                           ; 1 bytes @ 0x17
  1242                           
  1243                           
  1244                           ; 3 bytes @ 0x17
  1245  0017'                    	ds	3
  1246  001A'                    ??___ftmul:	
  1247  001A'                    atol@s:	
  1248                           ; 1 bytes @ 0x1A
  1249                           
  1250                           
  1251                           ; 1 bytes @ 0x1A
  1252  001A'                    	ds	1
  1253  001B'                    atol@c:	
  1254                           
  1255                           ; 1 bytes @ 0x1B
  1256  001B'                    	ds	1
  1257  001C'                    ?_get_gpstime:	
  1258                           
  1259                           ; 4 bytes @ 0x1C
  1260  001C'                    	ds	2
  1261  001E'                    ___ftmul@exp:	
  1262                           
  1263                           ; 1 bytes @ 0x1E
  1264  001E'                    	ds	1
  1265  001F'                    ___ftmul@f3_as_product:	
  1266                           
  1267                           ; 3 bytes @ 0x1F
  1268  001F'                    	ds	1
  1269  0020'                    ??_get_gpstime:	
  1270                           
  1271                           ; 1 bytes @ 0x20
  1272  0020'                    	ds	1
  1273  0021'                    get_gpstime@Time_Buffer:	
  1274                           
  1275                           ; 15 bytes @ 0x21
  1276  0021'                    	ds	1
  1277  0022'                    ___ftmul@cntr:	
  1278                           
  1279                           ; 1 bytes @ 0x22
  1280  0022'                    	ds	1
  1281  0023'                    ___ftmul@sign:	
  1282                           
  1283                           ; 1 bytes @ 0x23
  1284  0023'                    	ds	1
  1285  0024'                    ?_fround:	
  1286  0024'                    ?_scale:	
  1287                           ; 3 bytes @ 0x24
  1288                           
  1289  0024'                    ?___ftneg:	
  1290                           ; 3 bytes @ 0x24
  1291                           
  1292  0024'                    ___ftneg@f1:	
  1293                           ; 3 bytes @ 0x24
  1294                           
  1295                           
  1296                           ; 3 bytes @ 0x24
  1297  0024'                    	ds	3
  1298  0027'                    ??_fround:	
  1299  0027'                    ??_scale:	
  1300                           ; 1 bytes @ 0x27
  1301                           
  1302  0027'                    ??___ftneg:	
  1303                           ; 1 bytes @ 0x27
  1304                           
  1305  0027'                    ?_strtod:	
  1306                           ; 1 bytes @ 0x27
  1307                           
  1308  0027'                    strtod@res:	
  1309                           ; 3 bytes @ 0x27
  1310                           
  1311                           
  1312                           ; 1 bytes @ 0x27
  1313  0027'                    	ds	2
  1314  0029'                    _scale$832:	
  1315                           
  1316                           ; 3 bytes @ 0x29
  1317  0029'                    	ds	1
  1318  002A'                    ??_strtod:	
  1319                           
  1320                           ; 1 bytes @ 0x2A
  1321  002A'                    	ds	2
  1322  002C'                    scale@scl:	
  1323                           
  1324                           ; 1 bytes @ 0x2C
  1325  002C'                    	ds	1
  1326  002D'                    ?___fttol:	
  1327  002D'                    ___fttol@f1:	
  1328                           ; 4 bytes @ 0x2D
  1329                           
  1330  002D'                    _fround$831:	
  1331                           ; 3 bytes @ 0x2D
  1332                           
  1333                           
  1334                           ; 3 bytes @ 0x2D
  1335  002D'                    	ds	1
  1336  002E'                    _strtod$516:	
  1337                           
  1338                           ; 3 bytes @ 0x2E
  1339  002E'                    	ds	2
  1340  0030'                    _fround$830:	
  1341  0030'                    get_gpstime@_Time:	
  1342                           ; 3 bytes @ 0x30
  1343                           
  1344                           
  1345                           ; 4 bytes @ 0x30
  1346  0030'                    	ds	1
  1347  0031'                    ??___fttol:	
  1348  0031'                    _strtod$517:	
  1349                           ; 1 bytes @ 0x31
  1350                           
  1351                           
  1352                           ; 3 bytes @ 0x31
  1353  0031'                    	ds	2
  1354  0033'                    fround@prec:	
  1355                           
  1356                           ; 1 bytes @ 0x33
  1357  0033'                    	ds	1
  1358  0034'                    ?___ftadd:	
  1359  0034'                    get_gpstime@index:	
  1360                           ; 3 bytes @ 0x34
  1361                           
  1362  0034'                    _strtod$518:	
  1363                           ; 1 bytes @ 0x34
  1364                           
  1365  0034'                    ___ftadd@f1:	
  1366                           ; 3 bytes @ 0x34
  1367                           
  1368                           
  1369                           ; 3 bytes @ 0x34
  1370  0034'                    	ds	1
  1371  0035'                    ___fttol@sign1:	
  1372                           
  1373                           ; 1 bytes @ 0x35
  1374  0035'                    	ds	1
  1375  0036'                    ___fttol@lval:	
  1376                           
  1377                           ; 4 bytes @ 0x36
  1378  0036'                    	ds	1
  1379  0037'                    _strtod$519:	
  1380  0037'                    ___ftadd@f2:	
  1381                           ; 3 bytes @ 0x37
  1382                           
  1383                           
  1384                           ; 3 bytes @ 0x37
  1385  0037'                    	ds	3
  1386  003A'                    ??___ftadd:	
  1387  003A'                    ___fttol@exp1:	
  1388                           ; 1 bytes @ 0x3A
  1389                           
  1390  003A'                    _strtod$515:	
  1391                           ; 1 bytes @ 0x3A
  1392                           
  1393                           
  1394                           ; 2 bytes @ 0x3A
  1395  003A'                    	ds	1
  1396  003B'                    ?_USART_Init:	
  1397  003B'                    USART_Init@baud_rate:	
  1398                           ; 1 bytes @ 0x3B
  1399                           
  1400                           
  1401                           ; 4 bytes @ 0x3B
  1402  003B'                    	ds	1
  1403  003C'                    strtod@eexp:	
  1404                           
  1405                           ; 1 bytes @ 0x3C
  1406  003C'                    	ds	1
  1407  003D'                    strtod@flags:	
  1408                           
  1409                           ; 1 bytes @ 0x3D
  1410  003D'                    	ds	1
  1411  003E'                    strtod@expon:	
  1412  003E'                    ___ftadd@sign:	
  1413                           ; 1 bytes @ 0x3E
  1414                           
  1415                           
  1416                           ; 1 bytes @ 0x3E
  1417  003E'                    	ds	1
  1418  003F'                    ??_USART_Init:	
  1419  003F'                    ___ftadd@exp2:	
  1420                           ; 1 bytes @ 0x3F
  1421                           
  1422  003F'                    strtod@_u:	
  1423                           ; 1 bytes @ 0x3F
  1424                           
  1425  003F'                    _USART_Init$829:	
  1426                           ; 4 bytes @ 0x3F
  1427                           
  1428                           
  1429                           ; 4 bytes @ 0x3F
  1430  003F'                    	ds	1
  1431  0040'                    ___ftadd@exp1:	
  1432                           
  1433                           ; 1 bytes @ 0x40
  1434  0040'                    	ds	1
  1435  0041'                    ?_convert_to_degrees:	
  1436  0041'                    ?___ftsub:	
  1437                           ; 3 bytes @ 0x41
  1438                           
  1439  0041'                    convert_to_degrees@NMEA_lat_long:	
  1440                           ; 3 bytes @ 0x41
  1441                           
  1442  0041'                    ___ftsub@f2:	
  1443                           ; 3 bytes @ 0x41
  1444                           
  1445                           
  1446                           ; 3 bytes @ 0x41
  1447  0041'                    	ds	2
  1448  0043'                    strtod@s:	
  1449  0043'                    USART_Init@temp:	
  1450                           ; 1 bytes @ 0x43
  1451                           
  1452                           
  1453                           ; 3 bytes @ 0x43
  1454  0043'                    	ds	1
  1455  0044'                    ??_convert_to_degrees:	
  1456  0044'                    ?_atof:	
  1457                           ; 1 bytes @ 0x44
  1458                           
  1459  0044'                    convert_to_degrees@minutes:	
  1460                           ; 3 bytes @ 0x44
  1461                           
  1462  0044'                    ___ftsub@f1:	
  1463                           ; 3 bytes @ 0x44
  1464                           
  1465                           
  1466                           ; 3 bytes @ 0x44
  1467  0044'                    	ds	3
  1468  0047'                    ??___ftsub:	
  1469  0047'                    ?_sprintf:	
  1470                           ; 1 bytes @ 0x47
  1471                           
  1472  0047'                    sprintf@sp:	
  1473                           ; 2 bytes @ 0x47
  1474                           
  1475  0047'                    convert_to_degrees@dec_deg:	
  1476                           ; 2 bytes @ 0x47
  1477                           
  1478                           
  1479                           ; 3 bytes @ 0x47
  1480  0047'                    	ds	1
  1481  0048'                    ??_atof:	
  1482  0048'                    atof@s:	
  1483                           ; 1 bytes @ 0x48
  1484                           
  1485                           
  1486                           ; 1 bytes @ 0x48
  1487  0048'                    	ds	1
  1488  0049'                    ?_get_latitude:	
  1489  0049'                    ?_get_longitude:	
  1490                           ; 3 bytes @ 0x49
  1491                           
  1492  0049'                    ?_get_altitude:	
  1493                           ; 3 bytes @ 0x49
  1494                           
  1495  0049'                    sprintf@f:	
  1496                           ; 3 bytes @ 0x49
  1497                           
  1498                           
  1499                           ; 1 bytes @ 0x49
  1500  0049'                    	ds	1
  1501  004A'                    convert_to_degrees@degrees:	
  1502                           
  1503                           ; 2 bytes @ 0x4A
  1504  004A'                    	ds	2
  1505  004C'                    ??_get_latitude:	
  1506  004C'                    ??_get_longitude:	
  1507                           ; 1 bytes @ 0x4C
  1508                           
  1509  004C'                    ??_get_altitude:	
  1510                           ; 1 bytes @ 0x4C
  1511                           
  1512  004C'                    convert_to_degrees@decimal:	
  1513                           ; 1 bytes @ 0x4C
  1514                           
  1515                           
  1516                           ; 3 bytes @ 0x4C
  1517  004C'                    	ds	4
  1518                           
  1519                           	psect	maintext
  1520  0000'                    __pmaintext:	
  1521 ;;
  1522 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1523 ;;
  1524 ;; *************** function _main *****************
  1525 ;; Defined at:
  1526 ;;		line 45 in file "GPS.c"
  1527 ;; Parameters:    Size  Location     Type
  1528 ;;		None
  1529 ;; Auto vars:     Size  Location     Type
  1530 ;;  GPS_Buffer     15   44[BANK1 ] unsigned char [15]
  1531 ;;  Time            4   59[BANK1 ] unsigned long 
  1532 ;;  Longitude       3   69[BANK1 ] float 
  1533 ;;  Latitude        3   66[BANK1 ] float 
  1534 ;;  Altitude        3   63[BANK1 ] float 
  1535 ;; Return value:  Size  Location     Type
  1536 ;;                  1    wreg      void 
  1537 ;; Registers used:
  1538 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1539 ;; Tracked objects:
  1540 ;;		On entry : B00/0
  1541 ;;		On exit  : 0/0
  1542 ;;		Unchanged: 0/0
  1543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1544 ;;      Params:         0       0       0       0       0
  1545 ;;      Locals:         0       0      28       0       0
  1546 ;;      Temps:          0       0       1       0       0
  1547 ;;      Totals:         0       0      29       0       0
  1548 ;;Total ram usage:       29 bytes
  1549 ;; Hardware stack levels required when called:    6
  1550 ;; This function calls:
  1551 ;;		_LCD_Init
  1552 ;;		_LCD_String
  1553 ;;		_LCD_String_xy
  1554 ;;		_USART_Init
  1555 ;;		_convert_time_to_UTC
  1556 ;;		_convert_to_degrees
  1557 ;;		_get_altitude
  1558 ;;		_get_gpstime
  1559 ;;		_get_latitude
  1560 ;;		_get_longitude
  1561 ;;		_memset
  1562 ;;		_sprintf
  1563 ;; This function is called by:
  1564 ;;		Startup code after reset
  1565 ;; This function uses a non-reentrant model
  1566 ;;
  1567                           
  1568                           
  1569                           ;psect for function _main
  1570  0000'                    _main:	
  1571                           
  1572                           ;GPS.c: 46: unsigned long int Time;
  1573                           ;GPS.c: 47: float Latitude,Longitude,Altitude;
  1574                           ;GPS.c: 48: char GPS_Buffer[15];
  1575                           ;GPS.c: 50: LCD_Init();
  1576                           
  1577                           ;incstack = 0
  1578                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1579  0000' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_Init
  1580                           
  1581                           ;GPS.c: 51: INTCONbits.GIE=1;
  1582  0005' 178B               	bsf	11,7	;volatile
  1583                           
  1584                           ;GPS.c: 52: INTCONbits.PEIE=1;
  1585  0006' 170B               	bsf	11,6	;volatile
  1586                           
  1587                           ;GPS.c: 53: PIE1bits.RCIE=1;
  1588  0007' 1683               	bsf	3,5	;RP0=1, select bank1
  1589  0008' 1303               	bcf	3,6	;RP1=0, select bank1
  1590  0009' 168C               	bsf	12,5	;volatile
  1591                           
  1592                           ;GPS.c: 54: USART_Init(9600);
  1593  000A' 3000               	movlw	0
  1594  000B' 1283               	bcf	3,5	;RP0=0, select bank0
  1595  000C' 1303               	bcf	3,6	;RP1=0, select bank0
  1596  000D' 00BE'              	movwf	USART_Init@baud_rate+3
  1597  000E' 3000               	movlw	0
  1598  000F' 00BD'              	movwf	USART_Init@baud_rate+2
  1599  0010' 3025               	movlw	37
  1600  0011' 00BC'              	movwf	USART_Init@baud_rate+1
  1601  0012' 3080               	movlw	128
  1602  0013' 00BB'              	movwf	USART_Init@baud_rate
  1603  0014' 120A' 118A' 2000' 120A' 118A' 	fcall	_USART_Init
  1604  0019'                    l5040:	
  1605                           ;GPS.c: 62: while(1){
  1606                           
  1607                           ;GPS.c: 76: }
  1608                           
  1609                           
  1610                           ;GPS.c: 72: if(IsItGGAString == 0){
  1611  0019' 1683               	bsf	3,5	;RP0=1, select bank1
  1612  001A' 1303               	bcf	3,6	;RP1=0, select bank1
  1613  001B' 0800'              	movf	_IsItGGAString^(0+128),w	;volatile
  1614  001C' 1903               	btfsc	3,2
  1615  001D' 2800'              	goto	l5040
  1616                           
  1617                           ;GPS.c: 77: else{
  1618                           ;GPS.c: 79: memset(GPS_Buffer,0,15);
  1619  001E' 3000               	movlw	0
  1620  001F' 1283               	bcf	3,5	;RP0=0, select bank0
  1621  0020' 1303               	bcf	3,6	;RP1=0, select bank0
  1622  0021' 0080'              	movwf	memset@c
  1623  0022' 0081'              	movwf	memset@c+1
  1624  0023' 300F               	movlw	15
  1625  0024' 0082'              	movwf	memset@n
  1626  0025' 3000               	movlw	0
  1627  0026' 0083'              	movwf	memset@n+1
  1628  0027' 3000'              	movlw	(low (main@GPS_Buffer| 0))& (0+255)
  1629  0028' 120A' 118A' 2000' 120A' 118A' 	fcall	_memset
  1630                           
  1631                           ;GPS.c: 80: LCD_String_xy(1,0,"UTC Time: ");
  1632  002D' 1283               	bcf	3,5	;RP0=0, select bank0
  1633  002E' 1303               	bcf	3,6	;RP1=0, select bank0
  1634  002F' 0189'              	clrf	LCD_String_xy@pos
  1635  0030' 3077               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1636  0031' 1683               	bsf	3,5	;RP0=1, select bank1
  1637  0032' 1303               	bcf	3,6	;RP1=0, select bank1
  1638  0033' 0080'              	movwf	??_main^(0+128)
  1639  0034' 0800'              	movf	??_main^(0+128),w
  1640  0035' 1283               	bcf	3,5	;RP0=0, select bank0
  1641  0036' 1303               	bcf	3,6	;RP1=0, select bank0
  1642  0037' 008A'              	movwf	LCD_String_xy@str
  1643  0038' 3001               	movlw	1
  1644  0039' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_String_xy
  1645                           
  1646                           ;GPS.c: 81: Time = get_gpstime();
  1647  003E' 120A' 118A' 2000' 120A' 118A' 	fcall	_get_gpstime
  1648  0043' 1283               	bcf	3,5	;RP0=0, select bank0
  1649  0044' 1303               	bcf	3,6	;RP1=0, select bank0
  1650  0045' 081F'              	movf	?_get_gpstime+3,w
  1651  0046' 1683               	bsf	3,5	;RP0=1, select bank1
  1652  0047' 1303               	bcf	3,6	;RP1=0, select bank1
  1653  0048' 0080'              	movwf	(main@Time+3)^(0+128)
  1654  0049' 1283               	bcf	3,5	;RP0=0, select bank0
  1655  004A' 1303               	bcf	3,6	;RP1=0, select bank0
  1656  004B' 081E'              	movf	?_get_gpstime+2,w
  1657  004C' 1683               	bsf	3,5	;RP0=1, select bank1
  1658  004D' 1303               	bcf	3,6	;RP1=0, select bank1
  1659  004E' 0080'              	movwf	(main@Time+2)^(0+128)
  1660  004F' 1283               	bcf	3,5	;RP0=0, select bank0
  1661  0050' 1303               	bcf	3,6	;RP1=0, select bank0
  1662  0051' 081D'              	movf	?_get_gpstime+1,w
  1663  0052' 1683               	bsf	3,5	;RP0=1, select bank1
  1664  0053' 1303               	bcf	3,6	;RP1=0, select bank1
  1665  0054' 0080'              	movwf	(main@Time+1)^(0+128)
  1666  0055' 1283               	bcf	3,5	;RP0=0, select bank0
  1667  0056' 1303               	bcf	3,6	;RP1=0, select bank0
  1668  0057' 081C'              	movf	?_get_gpstime,w
  1669  0058' 1683               	bsf	3,5	;RP0=1, select bank1
  1670  0059' 1303               	bcf	3,6	;RP1=0, select bank1
  1671  005A' 0080'              	movwf	main@Time^(0+128)
  1672                           
  1673                           ;GPS.c: 82: convert_time_to_UTC(Time);
  1674  005B' 0800'              	movf	(main@Time+3)^(0+128),w
  1675  005C' 0080'              	movwf	(convert_time_to_UTC@UTC_Time+3)^(0+128)
  1676  005D' 0800'              	movf	(main@Time+2)^(0+128),w
  1677  005E' 0080'              	movwf	(convert_time_to_UTC@UTC_Time+2)^(0+128)
  1678  005F' 0800'              	movf	(main@Time+1)^(0+128),w
  1679  0060' 0080'              	movwf	(convert_time_to_UTC@UTC_Time+1)^(0+128)
  1680  0061' 0800'              	movf	main@Time^(0+128),w
  1681  0062' 0080'              	movwf	convert_time_to_UTC@UTC_Time^(0+128)
  1682  0063' 120A' 118A' 2000' 120A' 118A' 	fcall	_convert_time_to_UTC
  1683                           
  1684                           ;GPS.c: 83: LCD_String(Data_Buffer);
  1685  0068' 3000'              	movlw	(low (_Data_Buffer| (0+256)))& (0+255)
  1686  0069' 1283               	bcf	3,5	;RP0=0, select bank0
  1687  006A' 1303               	bcf	3,6	;RP1=0, select bank0
  1688  006B' 0087'              	movwf	LCD_String@str
  1689  006C' 3001               	movlw	1
  1690  006D' 0088'              	movwf	LCD_String@str+1
  1691  006E' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_String
  1692                           
  1693                           ;GPS.c: 84: LCD_String("  ");
  1694  0073' 30A9               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1695  0074' 1283               	bcf	3,5	;RP0=0, select bank0
  1696  0075' 1303               	bcf	3,6	;RP1=0, select bank0
  1697  0076' 0087'              	movwf	LCD_String@str
  1698  0077' 3080               	movlw	128
  1699  0078' 0088'              	movwf	LCD_String@str+1
  1700  0079' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_String
  1701                           
  1702                           ;GPS.c: 90: LCD_String_xy(2,0,"Lat: ");
  1703  007E' 1283               	bcf	3,5	;RP0=0, select bank0
  1704  007F' 1303               	bcf	3,6	;RP1=0, select bank0
  1705  0080' 0189'              	clrf	LCD_String_xy@pos
  1706  0081' 3092               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1707  0082' 1683               	bsf	3,5	;RP0=1, select bank1
  1708  0083' 1303               	bcf	3,6	;RP1=0, select bank1
  1709  0084' 0080'              	movwf	??_main^(0+128)
  1710  0085' 0800'              	movf	??_main^(0+128),w
  1711  0086' 1283               	bcf	3,5	;RP0=0, select bank0
  1712  0087' 1303               	bcf	3,6	;RP1=0, select bank0
  1713  0088' 008A'              	movwf	LCD_String_xy@str
  1714  0089' 3002               	movlw	2
  1715  008A' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_String_xy
  1716                           
  1717                           ;GPS.c: 91: Latitude = get_latitude(GGA_Pointers[0]);
  1718  008F' 1683               	bsf	3,5	;RP0=1, select bank3
  1719  0090' 1703               	bsf	3,6	;RP1=1, select bank3
  1720  0091' 0800'              	movf	_GGA_Pointers^(0+384),w
  1721  0092' 120A' 118A' 2000' 120A' 118A' 	fcall	_get_latitude
  1722  0097' 1283               	bcf	3,5	;RP0=0, select bank0
  1723  0098' 1303               	bcf	3,6	;RP1=0, select bank0
  1724  0099' 0849'              	movf	?_get_latitude,w
  1725  009A' 1683               	bsf	3,5	;RP0=1, select bank1
  1726  009B' 1303               	bcf	3,6	;RP1=0, select bank1
  1727  009C' 0080'              	movwf	main@Latitude^(0+128)
  1728  009D' 1283               	bcf	3,5	;RP0=0, select bank0
  1729  009E' 1303               	bcf	3,6	;RP1=0, select bank0
  1730  009F' 084A'              	movf	?_get_latitude+1,w
  1731  00A0' 1683               	bsf	3,5	;RP0=1, select bank1
  1732  00A1' 1303               	bcf	3,6	;RP1=0, select bank1
  1733  00A2' 0080'              	movwf	(main@Latitude+1)^(0+128)
  1734  00A3' 1283               	bcf	3,5	;RP0=0, select bank0
  1735  00A4' 1303               	bcf	3,6	;RP1=0, select bank0
  1736  00A5' 084B'              	movf	?_get_latitude+2,w
  1737  00A6' 1683               	bsf	3,5	;RP0=1, select bank1
  1738  00A7' 1303               	bcf	3,6	;RP1=0, select bank1
  1739  00A8' 0080'              	movwf	(main@Latitude+2)^(0+128)
  1740                           
  1741                           ;GPS.c: 92: Latitude = convert_to_degrees(Latitude);
  1742  00A9' 0800'              	movf	main@Latitude^(0+128),w
  1743  00AA' 1283               	bcf	3,5	;RP0=0, select bank0
  1744  00AB' 1303               	bcf	3,6	;RP1=0, select bank0
  1745  00AC' 00C1'              	movwf	convert_to_degrees@NMEA_lat_long
  1746  00AD' 1683               	bsf	3,5	;RP0=1, select bank1
  1747  00AE' 1303               	bcf	3,6	;RP1=0, select bank1
  1748  00AF' 0800'              	movf	(main@Latitude+1)^(0+128),w
  1749  00B0' 1283               	bcf	3,5	;RP0=0, select bank0
  1750  00B1' 1303               	bcf	3,6	;RP1=0, select bank0
  1751  00B2' 00C2'              	movwf	convert_to_degrees@NMEA_lat_long+1
  1752  00B3' 1683               	bsf	3,5	;RP0=1, select bank1
  1753  00B4' 1303               	bcf	3,6	;RP1=0, select bank1
  1754  00B5' 0800'              	movf	(main@Latitude+2)^(0+128),w
  1755  00B6' 1283               	bcf	3,5	;RP0=0, select bank0
  1756  00B7' 1303               	bcf	3,6	;RP1=0, select bank0
  1757  00B8' 00C3'              	movwf	convert_to_degrees@NMEA_lat_long+2
  1758  00B9' 120A' 118A' 2000' 120A' 118A' 	fcall	_convert_to_degrees
  1759  00BE' 1283               	bcf	3,5	;RP0=0, select bank0
  1760  00BF' 1303               	bcf	3,6	;RP1=0, select bank0
  1761  00C0' 0841'              	movf	?_convert_to_degrees,w
  1762  00C1' 1683               	bsf	3,5	;RP0=1, select bank1
  1763  00C2' 1303               	bcf	3,6	;RP1=0, select bank1
  1764  00C3' 0080'              	movwf	main@Latitude^(0+128)
  1765  00C4' 1283               	bcf	3,5	;RP0=0, select bank0
  1766  00C5' 1303               	bcf	3,6	;RP1=0, select bank0
  1767  00C6' 0842'              	movf	?_convert_to_degrees+1,w
  1768  00C7' 1683               	bsf	3,5	;RP0=1, select bank1
  1769  00C8' 1303               	bcf	3,6	;RP1=0, select bank1
  1770  00C9' 0080'              	movwf	(main@Latitude+1)^(0+128)
  1771  00CA' 1283               	bcf	3,5	;RP0=0, select bank0
  1772  00CB' 1303               	bcf	3,6	;RP1=0, select bank0
  1773  00CC' 0843'              	movf	?_convert_to_degrees+2,w
  1774  00CD' 1683               	bsf	3,5	;RP0=1, select bank1
  1775  00CE' 1303               	bcf	3,6	;RP1=0, select bank1
  1776  00CF' 0080'              	movwf	(main@Latitude+2)^(0+128)
  1777                           
  1778                           ;GPS.c: 93: sprintf(GPS_Buffer,"%.05f",Latitude);
  1779  00D0' 3000'              	movlw	(low (main@GPS_Buffer| 0))& (0+255)
  1780  00D1' 1283               	bcf	3,5	;RP0=0, select bank0
  1781  00D2' 1303               	bcf	3,6	;RP1=0, select bank0
  1782  00D3' 00C7'              	movwf	sprintf@sp
  1783  00D4' 3000               	movlw	0
  1784  00D5' 00C8'              	movwf	sprintf@sp+1
  1785  00D6' 309E               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1786  00D7' 1683               	bsf	3,5	;RP0=1, select bank1
  1787  00D8' 1303               	bcf	3,6	;RP1=0, select bank1
  1788  00D9' 0080'              	movwf	??_main^(0+128)
  1789  00DA' 0800'              	movf	??_main^(0+128),w
  1790  00DB' 1283               	bcf	3,5	;RP0=0, select bank0
  1791  00DC' 1303               	bcf	3,6	;RP1=0, select bank0
  1792  00DD' 00C9'              	movwf	sprintf@f
  1793  00DE' 1683               	bsf	3,5	;RP0=1, select bank1
  1794  00DF' 1303               	bcf	3,6	;RP1=0, select bank1
  1795  00E0' 0800'              	movf	main@Latitude^(0+128),w
  1796  00E1' 1283               	bcf	3,5	;RP0=0, select bank0
  1797  00E2' 1303               	bcf	3,6	;RP1=0, select bank0
  1798  00E3' 00CA'              	movwf	?_sprintf+3
  1799  00E4' 1683               	bsf	3,5	;RP0=1, select bank1
  1800  00E5' 1303               	bcf	3,6	;RP1=0, select bank1
  1801  00E6' 0800'              	movf	(main@Latitude+1)^(0+128),w
  1802  00E7' 1283               	bcf	3,5	;RP0=0, select bank0
  1803  00E8' 1303               	bcf	3,6	;RP1=0, select bank0
  1804  00E9' 00CB'              	movwf	?_sprintf+4
  1805  00EA' 1683               	bsf	3,5	;RP0=1, select bank1
  1806  00EB' 1303               	bcf	3,6	;RP1=0, select bank1
  1807  00EC' 0800'              	movf	(main@Latitude+2)^(0+128),w
  1808  00ED' 1283               	bcf	3,5	;RP0=0, select bank0
  1809  00EE' 1303               	bcf	3,6	;RP1=0, select bank0
  1810  00EF' 00CC'              	movwf	?_sprintf+5
  1811  00F0' 120A' 118A' 2000' 120A' 118A' 	fcall	_sprintf
  1812                           
  1813                           ;GPS.c: 94: LCD_String(GPS_Buffer);
  1814  00F5' 3000'              	movlw	(low (main@GPS_Buffer| 0))& (0+255)
  1815  00F6' 1283               	bcf	3,5	;RP0=0, select bank0
  1816  00F7' 1303               	bcf	3,6	;RP1=0, select bank0
  1817  00F8' 0087'              	movwf	LCD_String@str
  1818  00F9' 3000               	movlw	0
  1819  00FA' 0088'              	movwf	LCD_String@str+1
  1820  00FB' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_String
  1821                           
  1822                           ;GPS.c: 100: memset(GPS_Buffer,0,15);
  1823  0100' 3000               	movlw	0
  1824  0101' 1283               	bcf	3,5	;RP0=0, select bank0
  1825  0102' 1303               	bcf	3,6	;RP1=0, select bank0
  1826  0103' 0080'              	movwf	memset@c
  1827  0104' 0081'              	movwf	memset@c+1
  1828  0105' 300F               	movlw	15
  1829  0106' 0082'              	movwf	memset@n
  1830  0107' 3000               	movlw	0
  1831  0108' 0083'              	movwf	memset@n+1
  1832  0109' 3000'              	movlw	(low (main@GPS_Buffer| 0))& (0+255)
  1833  010A' 120A' 118A' 2000' 120A' 118A' 	fcall	_memset
  1834                           
  1835                           ;GPS.c: 101: LCD_String_xy(3,0,"Long: ");
  1836  010F' 1283               	bcf	3,5	;RP0=0, select bank0
  1837  0110' 1303               	bcf	3,6	;RP1=0, select bank0
  1838  0111' 0189'              	clrf	LCD_String_xy@pos
  1839  0112' 308B               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1840  0113' 1683               	bsf	3,5	;RP0=1, select bank1
  1841  0114' 1303               	bcf	3,6	;RP1=0, select bank1
  1842  0115' 0080'              	movwf	??_main^(0+128)
  1843  0116' 0800'              	movf	??_main^(0+128),w
  1844  0117' 1283               	bcf	3,5	;RP0=0, select bank0
  1845  0118' 1303               	bcf	3,6	;RP1=0, select bank0
  1846  0119' 008A'              	movwf	LCD_String_xy@str
  1847  011A' 3003               	movlw	3
  1848  011B' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_String_xy
  1849                           
  1850                           ;GPS.c: 102: Longitude = get_longitude(GGA_Pointers[2]);
  1851  0120' 1683               	bsf	3,5	;RP0=1, select bank3
  1852  0121' 1703               	bsf	3,6	;RP1=1, select bank3
  1853  0122' 0802'              	movf	(_GGA_Pointers^(0+384)+2),w
  1854  0123' 120A' 118A' 2000' 120A' 118A' 	fcall	_get_longitude
  1855  0128' 1283               	bcf	3,5	;RP0=0, select bank0
  1856  0129' 1303               	bcf	3,6	;RP1=0, select bank0
  1857  012A' 0849'              	movf	?_get_longitude,w
  1858  012B' 1683               	bsf	3,5	;RP0=1, select bank1
  1859  012C' 1303               	bcf	3,6	;RP1=0, select bank1
  1860  012D' 0080'              	movwf	main@Longitude^(0+128)
  1861  012E' 1283               	bcf	3,5	;RP0=0, select bank0
  1862  012F' 1303               	bcf	3,6	;RP1=0, select bank0
  1863  0130' 084A'              	movf	?_get_longitude+1,w
  1864  0131' 1683               	bsf	3,5	;RP0=1, select bank1
  1865  0132' 1303               	bcf	3,6	;RP1=0, select bank1
  1866  0133' 0080'              	movwf	(main@Longitude+1)^(0+128)
  1867  0134' 1283               	bcf	3,5	;RP0=0, select bank0
  1868  0135' 1303               	bcf	3,6	;RP1=0, select bank0
  1869  0136' 084B'              	movf	?_get_longitude+2,w
  1870  0137' 1683               	bsf	3,5	;RP0=1, select bank1
  1871  0138' 1303               	bcf	3,6	;RP1=0, select bank1
  1872  0139' 0080'              	movwf	(main@Longitude+2)^(0+128)
  1873                           
  1874                           ;GPS.c: 103: Longitude = convert_to_degrees(Longitude);
  1875  013A' 0800'              	movf	main@Longitude^(0+128),w
  1876  013B' 1283               	bcf	3,5	;RP0=0, select bank0
  1877  013C' 1303               	bcf	3,6	;RP1=0, select bank0
  1878  013D' 00C1'              	movwf	convert_to_degrees@NMEA_lat_long
  1879  013E' 1683               	bsf	3,5	;RP0=1, select bank1
  1880  013F' 1303               	bcf	3,6	;RP1=0, select bank1
  1881  0140' 0800'              	movf	(main@Longitude+1)^(0+128),w
  1882  0141' 1283               	bcf	3,5	;RP0=0, select bank0
  1883  0142' 1303               	bcf	3,6	;RP1=0, select bank0
  1884  0143' 00C2'              	movwf	convert_to_degrees@NMEA_lat_long+1
  1885  0144' 1683               	bsf	3,5	;RP0=1, select bank1
  1886  0145' 1303               	bcf	3,6	;RP1=0, select bank1
  1887  0146' 0800'              	movf	(main@Longitude+2)^(0+128),w
  1888  0147' 1283               	bcf	3,5	;RP0=0, select bank0
  1889  0148' 1303               	bcf	3,6	;RP1=0, select bank0
  1890  0149' 00C3'              	movwf	convert_to_degrees@NMEA_lat_long+2
  1891  014A' 120A' 118A' 2000' 120A' 118A' 	fcall	_convert_to_degrees
  1892  014F' 1283               	bcf	3,5	;RP0=0, select bank0
  1893  0150' 1303               	bcf	3,6	;RP1=0, select bank0
  1894  0151' 0841'              	movf	?_convert_to_degrees,w
  1895  0152' 1683               	bsf	3,5	;RP0=1, select bank1
  1896  0153' 1303               	bcf	3,6	;RP1=0, select bank1
  1897  0154' 0080'              	movwf	main@Longitude^(0+128)
  1898  0155' 1283               	bcf	3,5	;RP0=0, select bank0
  1899  0156' 1303               	bcf	3,6	;RP1=0, select bank0
  1900  0157' 0842'              	movf	?_convert_to_degrees+1,w
  1901  0158' 1683               	bsf	3,5	;RP0=1, select bank1
  1902  0159' 1303               	bcf	3,6	;RP1=0, select bank1
  1903  015A' 0080'              	movwf	(main@Longitude+1)^(0+128)
  1904  015B' 1283               	bcf	3,5	;RP0=0, select bank0
  1905  015C' 1303               	bcf	3,6	;RP1=0, select bank0
  1906  015D' 0843'              	movf	?_convert_to_degrees+2,w
  1907  015E' 1683               	bsf	3,5	;RP0=1, select bank1
  1908  015F' 1303               	bcf	3,6	;RP1=0, select bank1
  1909  0160' 0080'              	movwf	(main@Longitude+2)^(0+128)
  1910                           
  1911                           ;GPS.c: 104: sprintf(GPS_Buffer,"%.05f",Longitude);
  1912  0161' 3000'              	movlw	(low (main@GPS_Buffer| 0))& (0+255)
  1913  0162' 1283               	bcf	3,5	;RP0=0, select bank0
  1914  0163' 1303               	bcf	3,6	;RP1=0, select bank0
  1915  0164' 00C7'              	movwf	sprintf@sp
  1916  0165' 3000               	movlw	0
  1917  0166' 00C8'              	movwf	sprintf@sp+1
  1918  0167' 309E               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1919  0168' 1683               	bsf	3,5	;RP0=1, select bank1
  1920  0169' 1303               	bcf	3,6	;RP1=0, select bank1
  1921  016A' 0080'              	movwf	??_main^(0+128)
  1922  016B' 0800'              	movf	??_main^(0+128),w
  1923  016C' 1283               	bcf	3,5	;RP0=0, select bank0
  1924  016D' 1303               	bcf	3,6	;RP1=0, select bank0
  1925  016E' 00C9'              	movwf	sprintf@f
  1926  016F' 1683               	bsf	3,5	;RP0=1, select bank1
  1927  0170' 1303               	bcf	3,6	;RP1=0, select bank1
  1928  0171' 0800'              	movf	main@Longitude^(0+128),w
  1929  0172' 1283               	bcf	3,5	;RP0=0, select bank0
  1930  0173' 1303               	bcf	3,6	;RP1=0, select bank0
  1931  0174' 00CA'              	movwf	?_sprintf+3
  1932  0175' 1683               	bsf	3,5	;RP0=1, select bank1
  1933  0176' 1303               	bcf	3,6	;RP1=0, select bank1
  1934  0177' 0800'              	movf	(main@Longitude+1)^(0+128),w
  1935  0178' 1283               	bcf	3,5	;RP0=0, select bank0
  1936  0179' 1303               	bcf	3,6	;RP1=0, select bank0
  1937  017A' 00CB'              	movwf	?_sprintf+4
  1938  017B' 1683               	bsf	3,5	;RP0=1, select bank1
  1939  017C' 1303               	bcf	3,6	;RP1=0, select bank1
  1940  017D' 0800'              	movf	(main@Longitude+2)^(0+128),w
  1941  017E' 1283               	bcf	3,5	;RP0=0, select bank0
  1942  017F' 1303               	bcf	3,6	;RP1=0, select bank0
  1943  0180' 00CC'              	movwf	?_sprintf+5
  1944  0181' 120A' 118A' 2000' 120A' 118A' 	fcall	_sprintf
  1945                           
  1946                           ;GPS.c: 105: LCD_String(GPS_Buffer);
  1947  0186' 3000'              	movlw	(low (main@GPS_Buffer| 0))& (0+255)
  1948  0187' 1283               	bcf	3,5	;RP0=0, select bank0
  1949  0188' 1303               	bcf	3,6	;RP1=0, select bank0
  1950  0189' 0087'              	movwf	LCD_String@str
  1951  018A' 3000               	movlw	0
  1952  018B' 0088'              	movwf	LCD_String@str+1
  1953  018C' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_String
  1954                           
  1955                           ;GPS.c: 111: memset(GPS_Buffer,0,15);
  1956  0191' 3000               	movlw	0
  1957  0192' 1283               	bcf	3,5	;RP0=0, select bank0
  1958  0193' 1303               	bcf	3,6	;RP1=0, select bank0
  1959  0194' 0080'              	movwf	memset@c
  1960  0195' 0081'              	movwf	memset@c+1
  1961  0196' 300F               	movlw	15
  1962  0197' 0082'              	movwf	memset@n
  1963  0198' 3000               	movlw	0
  1964  0199' 0083'              	movwf	memset@n+1
  1965  019A' 3000'              	movlw	(low (main@GPS_Buffer| 0))& (0+255)
  1966  019B' 120A' 118A' 2000' 120A' 118A' 	fcall	_memset
  1967                           
  1968                           ;GPS.c: 112: LCD_String_xy(4,0,"Alt: ");
  1969  01A0' 1283               	bcf	3,5	;RP0=0, select bank0
  1970  01A1' 1303               	bcf	3,6	;RP1=0, select bank0
  1971  01A2' 0189'              	clrf	LCD_String_xy@pos
  1972  01A3' 3098               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1973  01A4' 1683               	bsf	3,5	;RP0=1, select bank1
  1974  01A5' 1303               	bcf	3,6	;RP1=0, select bank1
  1975  01A6' 0080'              	movwf	??_main^(0+128)
  1976  01A7' 0800'              	movf	??_main^(0+128),w
  1977  01A8' 1283               	bcf	3,5	;RP0=0, select bank0
  1978  01A9' 1303               	bcf	3,6	;RP1=0, select bank0
  1979  01AA' 008A'              	movwf	LCD_String_xy@str
  1980  01AB' 3004               	movlw	4
  1981  01AC' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_String_xy
  1982                           
  1983                           ;GPS.c: 113: Altitude = get_altitude(GGA_Pointers[7]);
  1984  01B1' 1683               	bsf	3,5	;RP0=1, select bank3
  1985  01B2' 1703               	bsf	3,6	;RP1=1, select bank3
  1986  01B3' 0807'              	movf	(_GGA_Pointers^(0+384)+7),w
  1987  01B4' 120A' 118A' 2000' 120A' 118A' 	fcall	_get_altitude
  1988  01B9' 1283               	bcf	3,5	;RP0=0, select bank0
  1989  01BA' 1303               	bcf	3,6	;RP1=0, select bank0
  1990  01BB' 0849'              	movf	?_get_altitude,w
  1991  01BC' 1683               	bsf	3,5	;RP0=1, select bank1
  1992  01BD' 1303               	bcf	3,6	;RP1=0, select bank1
  1993  01BE' 0080'              	movwf	main@Altitude^(0+128)
  1994  01BF' 1283               	bcf	3,5	;RP0=0, select bank0
  1995  01C0' 1303               	bcf	3,6	;RP1=0, select bank0
  1996  01C1' 084A'              	movf	?_get_altitude+1,w
  1997  01C2' 1683               	bsf	3,5	;RP0=1, select bank1
  1998  01C3' 1303               	bcf	3,6	;RP1=0, select bank1
  1999  01C4' 0080'              	movwf	(main@Altitude+1)^(0+128)
  2000  01C5' 1283               	bcf	3,5	;RP0=0, select bank0
  2001  01C6' 1303               	bcf	3,6	;RP1=0, select bank0
  2002  01C7' 084B'              	movf	?_get_altitude+2,w
  2003  01C8' 1683               	bsf	3,5	;RP0=1, select bank1
  2004  01C9' 1303               	bcf	3,6	;RP1=0, select bank1
  2005  01CA' 0080'              	movwf	(main@Altitude+2)^(0+128)
  2006                           
  2007                           ;GPS.c: 114: sprintf(GPS_Buffer,"%.2f",Altitude);
  2008  01CB' 3000'              	movlw	(low (main@GPS_Buffer| 0))& (0+255)
  2009  01CC' 1283               	bcf	3,5	;RP0=0, select bank0
  2010  01CD' 1303               	bcf	3,6	;RP1=0, select bank0
  2011  01CE' 00C7'              	movwf	sprintf@sp
  2012  01CF' 3000               	movlw	0
  2013  01D0' 00C8'              	movwf	sprintf@sp+1
  2014  01D1' 30A4               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  2015  01D2' 1683               	bsf	3,5	;RP0=1, select bank1
  2016  01D3' 1303               	bcf	3,6	;RP1=0, select bank1
  2017  01D4' 0080'              	movwf	??_main^(0+128)
  2018  01D5' 0800'              	movf	??_main^(0+128),w
  2019  01D6' 1283               	bcf	3,5	;RP0=0, select bank0
  2020  01D7' 1303               	bcf	3,6	;RP1=0, select bank0
  2021  01D8' 00C9'              	movwf	sprintf@f
  2022  01D9' 1683               	bsf	3,5	;RP0=1, select bank1
  2023  01DA' 1303               	bcf	3,6	;RP1=0, select bank1
  2024  01DB' 0800'              	movf	main@Altitude^(0+128),w
  2025  01DC' 1283               	bcf	3,5	;RP0=0, select bank0
  2026  01DD' 1303               	bcf	3,6	;RP1=0, select bank0
  2027  01DE' 00CA'              	movwf	?_sprintf+3
  2028  01DF' 1683               	bsf	3,5	;RP0=1, select bank1
  2029  01E0' 1303               	bcf	3,6	;RP1=0, select bank1
  2030  01E1' 0800'              	movf	(main@Altitude+1)^(0+128),w
  2031  01E2' 1283               	bcf	3,5	;RP0=0, select bank0
  2032  01E3' 1303               	bcf	3,6	;RP1=0, select bank0
  2033  01E4' 00CB'              	movwf	?_sprintf+4
  2034  01E5' 1683               	bsf	3,5	;RP0=1, select bank1
  2035  01E6' 1303               	bcf	3,6	;RP1=0, select bank1
  2036  01E7' 0800'              	movf	(main@Altitude+2)^(0+128),w
  2037  01E8' 1283               	bcf	3,5	;RP0=0, select bank0
  2038  01E9' 1303               	bcf	3,6	;RP1=0, select bank0
  2039  01EA' 00CC'              	movwf	?_sprintf+5
  2040  01EB' 120A' 118A' 2000' 120A' 118A' 	fcall	_sprintf
  2041                           
  2042                           ;GPS.c: 115: LCD_String(GPS_Buffer);
  2043  01F0' 3000'              	movlw	(low (main@GPS_Buffer| 0))& (0+255)
  2044  01F1' 1283               	bcf	3,5	;RP0=0, select bank0
  2045  01F2' 1303               	bcf	3,6	;RP1=0, select bank0
  2046  01F3' 0087'              	movwf	LCD_String@str
  2047  01F4' 3000               	movlw	0
  2048  01F5' 0088'              	movwf	LCD_String@str+1
  2049  01F6' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_String
  2050  01FB' 2800'              	goto	l5040
  2051  01FC'                    __end_of_main:	
  2052                           
  2053                           	psect	text1
  2054  0000'                    __ptext1:	
  2055 ;; *************** function _memset *****************
  2056 ;; Defined at:
  2057 ;;		line 8 in file "D:\mplab\sources\common\memset.c"
  2058 ;; Parameters:    Size  Location     Type
  2059 ;;  p1              1    wreg     PTR void 
  2060 ;;		 -> main@GPS_Buffer(15), 
  2061 ;;  c               2    0[BANK0 ] int 
  2062 ;;  n               2    2[BANK0 ] unsigned int 
  2063 ;; Auto vars:     Size  Location     Type
  2064 ;;  p1              1    6[BANK0 ] PTR void 
  2065 ;;		 -> main@GPS_Buffer(15), 
  2066 ;;  p               1    5[BANK0 ] PTR unsigned char 
  2067 ;;		 -> main@GPS_Buffer(15), 
  2068 ;; Return value:  Size  Location     Type
  2069 ;;                  1    wreg      PTR void 
  2070 ;; Registers used:
  2071 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2072 ;; Tracked objects:
  2073 ;;		On entry : 0/0
  2074 ;;		On exit  : 0/0
  2075 ;;		Unchanged: 0/0
  2076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2077 ;;      Params:         0       4       0       0       0
  2078 ;;      Locals:         0       2       0       0       0
  2079 ;;      Temps:          0       1       0       0       0
  2080 ;;      Totals:         0       7       0       0       0
  2081 ;;Total ram usage:        7 bytes
  2082 ;; Hardware stack levels used:    1
  2083 ;; Hardware stack levels required when called:    1
  2084 ;; This function calls:
  2085 ;;		Nothing
  2086 ;; This function is called by:
  2087 ;;		_main
  2088 ;; This function uses a non-reentrant model
  2089 ;;
  2090                           
  2091                           
  2092                           ;psect for function _memset
  2093  0000'                    _memset:	
  2094                           
  2095                           ;incstack = 0
  2096                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
  2097                           ;memset@p1 stored from wreg
  2098  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2099  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  2100  0002' 0086'              	movwf	memset@p1
  2101  0003' 0806'              	movf	memset@p1,w
  2102  0004' 0084'              	movwf	??_memset
  2103  0005' 0804'              	movf	??_memset,w
  2104  0006' 0085'              	movwf	memset@p
  2105  0007'                    l4926:	
  2106  0007' 3001               	movlw	1
  2107  0008' 0282'              	subwf	memset@n,f
  2108  0009' 3000               	movlw	0
  2109  000A' 1C03               	skipc
  2110  000B' 0383'              	decf	memset@n+1,f
  2111  000C' 0283'              	subwf	memset@n+1,f
  2112  000D' 0A02'              	incf	memset@n,w
  2113  000E' 1903               	btfsc	3,2
  2114  000F' 0A03'              	incf	memset@n+1,w
  2115  0010' 1903               	btfsc	3,2
  2116  0011' 0008               	return
  2117  0012' 0800'              	movf	memset@c,w
  2118  0013' 0084'              	movwf	??_memset
  2119  0014' 0805'              	movf	memset@p,w
  2120  0015' 0084               	movwf	4
  2121  0016' 0804'              	movf	??_memset,w
  2122  0017' 1383               	bcf	3,7	;select IRP bank0
  2123  0018' 0080               	movwf	0
  2124  0019' 3001               	movlw	1
  2125  001A' 0084'              	movwf	??_memset
  2126  001B' 0804'              	movf	??_memset,w
  2127  001C' 0785'              	addwf	memset@p,f
  2128  001D' 2800'              	goto	l4926
  2129  001E'                    __end_of_memset:	
  2130                           ;	Return value of _memset is never used
  2131                           
  2132                           
  2133                           	psect	text2
  2134  0000'                    __ptext2:	
  2135 ;; *************** function _get_longitude *****************
  2136 ;; Defined at:
  2137 ;;		line 189 in file "GPS.c"
  2138 ;; Parameters:    Size  Location     Type
  2139 ;;  long_pointer    1    wreg     unsigned char 
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;  long_pointer    1   18[BANK1 ] unsigned char 
  2142 ;;  Long_Buffer    15    0[BANK1 ] unsigned char [15]
  2143 ;;  _longitude      3   15[BANK1 ] float 
  2144 ;;  long_index      1   20[BANK1 ] unsigned char 
  2145 ;;  index           1   19[BANK1 ] unsigned char 
  2146 ;; Return value:  Size  Location     Type
  2147 ;;                  3   73[BANK0 ] float 
  2148 ;; Registers used:
  2149 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2150 ;; Tracked objects:
  2151 ;;		On entry : 0/0
  2152 ;;		On exit  : 0/0
  2153 ;;		Unchanged: 0/0
  2154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2155 ;;      Params:         0       3       0       0       0
  2156 ;;      Locals:         0       0      21       0       0
  2157 ;;      Temps:          0       1       0       0       0
  2158 ;;      Totals:         0       4      21       0       0
  2159 ;;Total ram usage:       25 bytes
  2160 ;; Hardware stack levels used:    1
  2161 ;; Hardware stack levels required when called:    5
  2162 ;; This function calls:
  2163 ;;		_atof
  2164 ;; This function is called by:
  2165 ;;		_main
  2166 ;; This function uses a non-reentrant model
  2167 ;;
  2168                           
  2169                           
  2170                           ;psect for function _get_longitude
  2171  0000'                    _get_longitude:	
  2172                           
  2173                           ;incstack = 0
  2174                           ; Regs used in _get_longitude: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2175                           ;get_longitude@long_pointer stored from wreg
  2176  0000' 1683               	bsf	3,5	;RP0=1, select bank1
  2177  0001' 1303               	bcf	3,6	;RP1=0, select bank1
  2178  0002' 0080'              	movwf	get_longitude@long_pointer^(0+128)
  2179                           
  2180                           ;GPS.c: 190: unsigned char long_index;
  2181                           ;GPS.c: 191: unsigned char index = long_pointer+1;
  2182  0003' 0800'              	movf	get_longitude@long_pointer^(0+128),w
  2183  0004' 3E01               	addlw	1
  2184  0005' 1283               	bcf	3,5	;RP0=0, select bank0
  2185  0006' 1303               	bcf	3,6	;RP1=0, select bank0
  2186  0007' 00CC'              	movwf	??_get_longitude
  2187  0008' 084C'              	movf	??_get_longitude,w
  2188  0009' 1683               	bsf	3,5	;RP0=1, select bank1
  2189  000A' 1303               	bcf	3,6	;RP1=0, select bank1
  2190  000B' 0080'              	movwf	get_longitude@index^(0+128)
  2191                           
  2192                           ;GPS.c: 192: char Long_Buffer[15];
  2193                           ;GPS.c: 193: float _longitude;
  2194                           ;GPS.c: 194: long_index=0;
  2195  000C' 0180'              	clrf	get_longitude@long_index^(0+128)
  2196  000D'                    l89:	
  2197                           ;GPS.c: 197: for( ; GGA_Buffer[index]!=','; index++){
  2198                           
  2199  000D' 0800'              	movf	get_longitude@index^(0+128),w
  2200  000E' 3E00'              	addlw	(low (_GGA_Buffer| (0+256)))& (0+255)
  2201  000F' 0084               	movwf	4
  2202  0010' 302C               	movlw	44
  2203  0011' 1783               	bsf	3,7	;select IRP bank2
  2204  0012' 0600               	xorwf	0,w
  2205  0013' 1903               	btfsc	3,2
  2206  0014' 2800'              	goto	l5006
  2207                           
  2208                           ;GPS.c: 198: Long_Buffer[long_index]= GGA_Buffer[index];
  2209  0015' 0800'              	movf	get_longitude@index^(0+128),w
  2210  0016' 3E00'              	addlw	(low (_GGA_Buffer| (0+256)))& (0+255)
  2211  0017' 0084               	movwf	4
  2212  0018' 1783               	bsf	3,7	;select IRP bank2
  2213  0019' 0800               	movf	0,w
  2214  001A' 1283               	bcf	3,5	;RP0=0, select bank0
  2215  001B' 1303               	bcf	3,6	;RP1=0, select bank0
  2216  001C' 00CC'              	movwf	??_get_longitude
  2217  001D' 1683               	bsf	3,5	;RP0=1, select bank1
  2218  001E' 1303               	bcf	3,6	;RP1=0, select bank1
  2219  001F' 0800'              	movf	get_longitude@long_index^(0+128),w
  2220  0020' 3E00'              	addlw	(low (get_longitude@Long_Buffer| 0))& (0+255)
  2221  0021' 0084               	movwf	4
  2222  0022' 1283               	bcf	3,5	;RP0=0, select bank0
  2223  0023' 1303               	bcf	3,6	;RP1=0, select bank0
  2224  0024' 084C'              	movf	??_get_longitude,w
  2225  0025' 1383               	bcf	3,7	;select IRP bank1
  2226  0026' 0080               	movwf	0
  2227                           
  2228                           ;GPS.c: 199: long_index++;
  2229  0027' 3001               	movlw	1
  2230  0028' 00CC'              	movwf	??_get_longitude
  2231  0029' 084C'              	movf	??_get_longitude,w
  2232  002A' 1683               	bsf	3,5	;RP0=1, select bank1
  2233  002B' 1303               	bcf	3,6	;RP1=0, select bank1
  2234  002C' 0780'              	addwf	get_longitude@long_index^(0+128),f
  2235  002D' 3001               	movlw	1
  2236  002E' 1283               	bcf	3,5	;RP0=0, select bank0
  2237  002F' 1303               	bcf	3,6	;RP1=0, select bank0
  2238  0030' 00CC'              	movwf	??_get_longitude
  2239  0031' 084C'              	movf	??_get_longitude,w
  2240  0032' 1683               	bsf	3,5	;RP0=1, select bank1
  2241  0033' 1303               	bcf	3,6	;RP1=0, select bank1
  2242  0034' 0780'              	addwf	get_longitude@index^(0+128),f
  2243  0035' 2800'              	goto	l89
  2244  0036'                    l5006:	
  2245                           
  2246                           ;GPS.c: 200: }
  2247                           ;GPS.c: 201: long_index++;
  2248  0036' 3001               	movlw	1
  2249  0037' 1283               	bcf	3,5	;RP0=0, select bank0
  2250  0038' 1303               	bcf	3,6	;RP1=0, select bank0
  2251  0039' 00CC'              	movwf	??_get_longitude
  2252  003A' 084C'              	movf	??_get_longitude,w
  2253  003B' 1683               	bsf	3,5	;RP0=1, select bank1
  2254  003C' 1303               	bcf	3,6	;RP1=0, select bank1
  2255  003D' 0780'              	addwf	get_longitude@long_index^(0+128),f
  2256                           
  2257                           ;GPS.c: 202: E_W = GGA_Buffer[long_index];
  2258  003E' 0800'              	movf	get_longitude@long_index^(0+128),w
  2259  003F' 3E00'              	addlw	(low (_GGA_Buffer| (0+256)))& (0+255)
  2260  0040' 0084               	movwf	4
  2261  0041' 0800               	movf	0,w
  2262  0042' 1283               	bcf	3,5	;RP0=0, select bank0
  2263  0043' 1303               	bcf	3,6	;RP1=0, select bank0
  2264  0044' 00CC'              	movwf	??_get_longitude
  2265  0045' 084C'              	movf	??_get_longitude,w
  2266  0046' 1683               	bsf	3,5	;RP0=1, select bank1
  2267  0047' 1303               	bcf	3,6	;RP1=0, select bank1
  2268  0048' 0080'              	movwf	_E_W^(0+128)
  2269                           
  2270                           ;GPS.c: 203: _longitude = atof(Long_Buffer);
  2271  0049' 3000'              	movlw	(low (get_longitude@Long_Buffer| 0))& (0+255)
  2272  004A' 120A' 118A' 2000'  	fcall	_atof
  2273  004D' 1283               	bcf	3,5	;RP0=0, select bank0
  2274  004E' 1303               	bcf	3,6	;RP1=0, select bank0
  2275  004F' 0844'              	movf	?_atof,w
  2276  0050' 1683               	bsf	3,5	;RP0=1, select bank1
  2277  0051' 1303               	bcf	3,6	;RP1=0, select bank1
  2278  0052' 0080'              	movwf	get_longitude@_longitude^(0+128)
  2279  0053' 1283               	bcf	3,5	;RP0=0, select bank0
  2280  0054' 1303               	bcf	3,6	;RP1=0, select bank0
  2281  0055' 0845'              	movf	?_atof+1,w
  2282  0056' 1683               	bsf	3,5	;RP0=1, select bank1
  2283  0057' 1303               	bcf	3,6	;RP1=0, select bank1
  2284  0058' 0080'              	movwf	(get_longitude@_longitude+1)^(0+128)
  2285  0059' 1283               	bcf	3,5	;RP0=0, select bank0
  2286  005A' 1303               	bcf	3,6	;RP1=0, select bank0
  2287  005B' 0846'              	movf	?_atof+2,w
  2288  005C' 1683               	bsf	3,5	;RP0=1, select bank1
  2289  005D' 1303               	bcf	3,6	;RP1=0, select bank1
  2290  005E' 0080'              	movwf	(get_longitude@_longitude+2)^(0+128)
  2291                           
  2292                           ;GPS.c: 204: return _longitude;
  2293  005F' 0800'              	movf	get_longitude@_longitude^(0+128),w
  2294  0060' 1283               	bcf	3,5	;RP0=0, select bank0
  2295  0061' 1303               	bcf	3,6	;RP1=0, select bank0
  2296  0062' 00C9'              	movwf	?_get_longitude
  2297  0063' 1683               	bsf	3,5	;RP0=1, select bank1
  2298  0064' 1303               	bcf	3,6	;RP1=0, select bank1
  2299  0065' 0800'              	movf	(get_longitude@_longitude+1)^(0+128),w
  2300  0066' 1283               	bcf	3,5	;RP0=0, select bank0
  2301  0067' 1303               	bcf	3,6	;RP1=0, select bank0
  2302  0068' 00CA'              	movwf	?_get_longitude+1
  2303  0069' 1683               	bsf	3,5	;RP0=1, select bank1
  2304  006A' 1303               	bcf	3,6	;RP1=0, select bank1
  2305  006B' 0800'              	movf	(get_longitude@_longitude+2)^(0+128),w
  2306  006C' 1283               	bcf	3,5	;RP0=0, select bank0
  2307  006D' 1303               	bcf	3,6	;RP1=0, select bank0
  2308  006E' 00CB'              	movwf	?_get_longitude+2
  2309  006F' 0008               	return
  2310  0070'                    __end_of_get_longitude:	
  2311                           
  2312                           	psect	text3
  2313  0000'                    __ptext3:	
  2314 ;; *************** function _get_latitude *****************
  2315 ;; Defined at:
  2316 ;;		line 172 in file "GPS.c"
  2317 ;; Parameters:    Size  Location     Type
  2318 ;;  lat_pointer     1    wreg     unsigned char 
  2319 ;; Auto vars:     Size  Location     Type
  2320 ;;  lat_pointer     1   18[BANK1 ] unsigned char 
  2321 ;;  Lat_Buffer     15    0[BANK1 ] unsigned char [15]
  2322 ;;  _latitude       3   15[BANK1 ] float 
  2323 ;;  lat_index       1   20[BANK1 ] unsigned char 
  2324 ;;  index           1   19[BANK1 ] unsigned char 
  2325 ;; Return value:  Size  Location     Type
  2326 ;;                  3   73[BANK0 ] float 
  2327 ;; Registers used:
  2328 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2329 ;; Tracked objects:
  2330 ;;		On entry : 0/0
  2331 ;;		On exit  : 0/0
  2332 ;;		Unchanged: 0/0
  2333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2334 ;;      Params:         0       3       0       0       0
  2335 ;;      Locals:         0       0      21       0       0
  2336 ;;      Temps:          0       1       0       0       0
  2337 ;;      Totals:         0       4      21       0       0
  2338 ;;Total ram usage:       25 bytes
  2339 ;; Hardware stack levels used:    1
  2340 ;; Hardware stack levels required when called:    5
  2341 ;; This function calls:
  2342 ;;		_atof
  2343 ;; This function is called by:
  2344 ;;		_main
  2345 ;; This function uses a non-reentrant model
  2346 ;;
  2347                           
  2348                           
  2349                           ;psect for function _get_latitude
  2350  0000'                    _get_latitude:	
  2351                           
  2352                           ;incstack = 0
  2353                           ; Regs used in _get_latitude: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2354                           ;get_latitude@lat_pointer stored from wreg
  2355  0000' 1683               	bsf	3,5	;RP0=1, select bank1
  2356  0001' 1303               	bcf	3,6	;RP1=0, select bank1
  2357  0002' 0080'              	movwf	get_latitude@lat_pointer^(0+128)
  2358                           
  2359                           ;GPS.c: 173: unsigned char lat_index = lat_pointer+1;
  2360  0003' 0800'              	movf	get_latitude@lat_pointer^(0+128),w
  2361  0004' 3E01               	addlw	1
  2362  0005' 1283               	bcf	3,5	;RP0=0, select bank0
  2363  0006' 1303               	bcf	3,6	;RP1=0, select bank0
  2364  0007' 00CC'              	movwf	??_get_latitude
  2365  0008' 084C'              	movf	??_get_latitude,w
  2366  0009' 1683               	bsf	3,5	;RP0=1, select bank1
  2367  000A' 1303               	bcf	3,6	;RP1=0, select bank1
  2368  000B' 0080'              	movwf	get_latitude@lat_index^(0+128)
  2369                           
  2370                           ;GPS.c: 174: unsigned char index = 0;
  2371  000C' 0180'              	clrf	get_latitude@index^(0+128)
  2372  000D'                    l83:	
  2373                           ;GPS.c: 175: char Lat_Buffer[15];
  2374                           ;GPS.c: 176: float _latitude;
  2375                           ;GPS.c: 179: for(;GGA_Buffer[lat_index]!=',';lat_index++){
  2376                           
  2377  000D' 0800'              	movf	get_latitude@lat_index^(0+128),w
  2378  000E' 3E00'              	addlw	(low (_GGA_Buffer| (0+256)))& (0+255)
  2379  000F' 0084               	movwf	4
  2380  0010' 302C               	movlw	44
  2381  0011' 1783               	bsf	3,7	;select IRP bank2
  2382  0012' 0600               	xorwf	0,w
  2383  0013' 1903               	btfsc	3,2
  2384  0014' 2800'              	goto	l4974
  2385                           
  2386                           ;GPS.c: 180: Lat_Buffer[index]= GGA_Buffer[lat_index];
  2387  0015' 0800'              	movf	get_latitude@lat_index^(0+128),w
  2388  0016' 3E00'              	addlw	(low (_GGA_Buffer| (0+256)))& (0+255)
  2389  0017' 0084               	movwf	4
  2390  0018' 1783               	bsf	3,7	;select IRP bank2
  2391  0019' 0800               	movf	0,w
  2392  001A' 1283               	bcf	3,5	;RP0=0, select bank0
  2393  001B' 1303               	bcf	3,6	;RP1=0, select bank0
  2394  001C' 00CC'              	movwf	??_get_latitude
  2395  001D' 1683               	bsf	3,5	;RP0=1, select bank1
  2396  001E' 1303               	bcf	3,6	;RP1=0, select bank1
  2397  001F' 0800'              	movf	get_latitude@index^(0+128),w
  2398  0020' 3E00'              	addlw	(low (get_latitude@Lat_Buffer| 0))& (0+255)
  2399  0021' 0084               	movwf	4
  2400  0022' 1283               	bcf	3,5	;RP0=0, select bank0
  2401  0023' 1303               	bcf	3,6	;RP1=0, select bank0
  2402  0024' 084C'              	movf	??_get_latitude,w
  2403  0025' 1383               	bcf	3,7	;select IRP bank1
  2404  0026' 0080               	movwf	0
  2405                           
  2406                           ;GPS.c: 181: index++;
  2407  0027' 3001               	movlw	1
  2408  0028' 00CC'              	movwf	??_get_latitude
  2409  0029' 084C'              	movf	??_get_latitude,w
  2410  002A' 1683               	bsf	3,5	;RP0=1, select bank1
  2411  002B' 1303               	bcf	3,6	;RP1=0, select bank1
  2412  002C' 0780'              	addwf	get_latitude@index^(0+128),f
  2413  002D' 3001               	movlw	1
  2414  002E' 1283               	bcf	3,5	;RP0=0, select bank0
  2415  002F' 1303               	bcf	3,6	;RP1=0, select bank0
  2416  0030' 00CC'              	movwf	??_get_latitude
  2417  0031' 084C'              	movf	??_get_latitude,w
  2418  0032' 1683               	bsf	3,5	;RP0=1, select bank1
  2419  0033' 1303               	bcf	3,6	;RP1=0, select bank1
  2420  0034' 0780'              	addwf	get_latitude@lat_index^(0+128),f
  2421  0035' 2800'              	goto	l83
  2422  0036'                    l4974:	
  2423                           
  2424                           ;GPS.c: 182: }
  2425                           ;GPS.c: 183: lat_index++;
  2426  0036' 3001               	movlw	1
  2427  0037' 1283               	bcf	3,5	;RP0=0, select bank0
  2428  0038' 1303               	bcf	3,6	;RP1=0, select bank0
  2429  0039' 00CC'              	movwf	??_get_latitude
  2430  003A' 084C'              	movf	??_get_latitude,w
  2431  003B' 1683               	bsf	3,5	;RP0=1, select bank1
  2432  003C' 1303               	bcf	3,6	;RP1=0, select bank1
  2433  003D' 0780'              	addwf	get_latitude@lat_index^(0+128),f
  2434                           
  2435                           ;GPS.c: 184: N_S = GGA_Buffer[lat_index];
  2436  003E' 0800'              	movf	get_latitude@lat_index^(0+128),w
  2437  003F' 3E00'              	addlw	(low (_GGA_Buffer| (0+256)))& (0+255)
  2438  0040' 0084               	movwf	4
  2439  0041' 0800               	movf	0,w
  2440  0042' 1283               	bcf	3,5	;RP0=0, select bank0
  2441  0043' 1303               	bcf	3,6	;RP1=0, select bank0
  2442  0044' 00CC'              	movwf	??_get_latitude
  2443  0045' 084C'              	movf	??_get_latitude,w
  2444  0046' 1683               	bsf	3,5	;RP0=1, select bank1
  2445  0047' 1303               	bcf	3,6	;RP1=0, select bank1
  2446  0048' 0080'              	movwf	_N_S^(0+128)
  2447                           
  2448                           ;GPS.c: 185: _latitude = atof(Lat_Buffer);
  2449  0049' 3000'              	movlw	(low (get_latitude@Lat_Buffer| 0))& (0+255)
  2450  004A' 120A' 118A' 2000'  	fcall	_atof
  2451  004D' 1283               	bcf	3,5	;RP0=0, select bank0
  2452  004E' 1303               	bcf	3,6	;RP1=0, select bank0
  2453  004F' 0844'              	movf	?_atof,w
  2454  0050' 1683               	bsf	3,5	;RP0=1, select bank1
  2455  0051' 1303               	bcf	3,6	;RP1=0, select bank1
  2456  0052' 0080'              	movwf	get_latitude@_latitude^(0+128)
  2457  0053' 1283               	bcf	3,5	;RP0=0, select bank0
  2458  0054' 1303               	bcf	3,6	;RP1=0, select bank0
  2459  0055' 0845'              	movf	?_atof+1,w
  2460  0056' 1683               	bsf	3,5	;RP0=1, select bank1
  2461  0057' 1303               	bcf	3,6	;RP1=0, select bank1
  2462  0058' 0080'              	movwf	(get_latitude@_latitude+1)^(0+128)
  2463  0059' 1283               	bcf	3,5	;RP0=0, select bank0
  2464  005A' 1303               	bcf	3,6	;RP1=0, select bank0
  2465  005B' 0846'              	movf	?_atof+2,w
  2466  005C' 1683               	bsf	3,5	;RP0=1, select bank1
  2467  005D' 1303               	bcf	3,6	;RP1=0, select bank1
  2468  005E' 0080'              	movwf	(get_latitude@_latitude+2)^(0+128)
  2469                           
  2470                           ;GPS.c: 186: return _latitude;
  2471  005F' 0800'              	movf	get_latitude@_latitude^(0+128),w
  2472  0060' 1283               	bcf	3,5	;RP0=0, select bank0
  2473  0061' 1303               	bcf	3,6	;RP1=0, select bank0
  2474  0062' 00C9'              	movwf	?_get_latitude
  2475  0063' 1683               	bsf	3,5	;RP0=1, select bank1
  2476  0064' 1303               	bcf	3,6	;RP1=0, select bank1
  2477  0065' 0800'              	movf	(get_latitude@_latitude+1)^(0+128),w
  2478  0066' 1283               	bcf	3,5	;RP0=0, select bank0
  2479  0067' 1303               	bcf	3,6	;RP1=0, select bank0
  2480  0068' 00CA'              	movwf	?_get_latitude+1
  2481  0069' 1683               	bsf	3,5	;RP0=1, select bank1
  2482  006A' 1303               	bcf	3,6	;RP1=0, select bank1
  2483  006B' 0800'              	movf	(get_latitude@_latitude+2)^(0+128),w
  2484  006C' 1283               	bcf	3,5	;RP0=0, select bank0
  2485  006D' 1303               	bcf	3,6	;RP1=0, select bank0
  2486  006E' 00CB'              	movwf	?_get_latitude+2
  2487  006F' 0008               	return
  2488  0070'                    __end_of_get_latitude:	
  2489                           
  2490                           	psect	text4
  2491  0000'                    __ptext4:	
  2492 ;; *************** function _get_gpstime *****************
  2493 ;; Defined at:
  2494 ;;		line 157 in file "GPS.c"
  2495 ;; Parameters:    Size  Location     Type
  2496 ;;		None
  2497 ;; Auto vars:     Size  Location     Type
  2498 ;;  Time_Buffer    15   33[BANK0 ] unsigned char [15]
  2499 ;;  _Time           4   48[BANK0 ] unsigned long 
  2500 ;;  index           1   52[BANK0 ] unsigned char 
  2501 ;; Return value:  Size  Location     Type
  2502 ;;                  4   28[BANK0 ] unsigned long 
  2503 ;; Registers used:
  2504 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2505 ;; Tracked objects:
  2506 ;;		On entry : 0/0
  2507 ;;		On exit  : 0/0
  2508 ;;		Unchanged: 0/0
  2509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2510 ;;      Params:         0       4       0       0       0
  2511 ;;      Locals:         0      20       0       0       0
  2512 ;;      Temps:          0       1       0       0       0
  2513 ;;      Totals:         0      25       0       0       0
  2514 ;;Total ram usage:       25 bytes
  2515 ;; Hardware stack levels used:    1
  2516 ;; Hardware stack levels required when called:    3
  2517 ;; This function calls:
  2518 ;;		_atol
  2519 ;; This function is called by:
  2520 ;;		_main
  2521 ;; This function uses a non-reentrant model
  2522 ;;
  2523                           
  2524                           
  2525                           ;psect for function _get_gpstime
  2526  0000'                    _get_gpstime:	
  2527                           
  2528                           ;GPS.c: 158: unsigned char index;
  2529                           ;GPS.c: 159: unsigned char Time_Buffer[15];
  2530                           ;GPS.c: 160: unsigned long int _Time;
  2531                           ;GPS.c: 163: for(index = 0;GGA_Buffer[index]!=','; index++){
  2532                           
  2533                           ;incstack = 0
  2534                           ; Regs used in _get_gpstime: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2535  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2536  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  2537  0002' 01B4'              	clrf	get_gpstime@index
  2538  0003'                    l4952:	
  2539  0003' 0834'              	movf	get_gpstime@index,w
  2540  0004' 3E00'              	addlw	(low (_GGA_Buffer| (0+256)))& (0+255)
  2541  0005' 0084               	movwf	4
  2542  0006' 302C               	movlw	44
  2543  0007' 1783               	bsf	3,7	;select IRP bank2
  2544  0008' 0600               	xorwf	0,w
  2545  0009' 1903               	btfsc	3,2
  2546  000A' 2800'              	goto	l4954
  2547                           
  2548                           ;GPS.c: 164: Time_Buffer[index] = GGA_Buffer[index];
  2549  000B' 0834'              	movf	get_gpstime@index,w
  2550  000C' 3E00'              	addlw	(low (_GGA_Buffer| (0+256)))& (0+255)
  2551  000D' 0084               	movwf	4
  2552  000E' 1783               	bsf	3,7	;select IRP bank2
  2553  000F' 0800               	movf	0,w
  2554  0010' 00A0'              	movwf	??_get_gpstime
  2555  0011' 0834'              	movf	get_gpstime@index,w
  2556  0012' 3E00'              	addlw	(low (get_gpstime@Time_Buffer| 0))& (0+255)
  2557  0013' 0084               	movwf	4
  2558  0014' 0820'              	movf	??_get_gpstime,w
  2559  0015' 1383               	bcf	3,7	;select IRP bank0
  2560  0016' 0080               	movwf	0
  2561  0017' 3001               	movlw	1
  2562  0018' 00A0'              	movwf	??_get_gpstime
  2563  0019' 0820'              	movf	??_get_gpstime,w
  2564  001A' 07B4'              	addwf	get_gpstime@index,f
  2565  001B' 2800'              	goto	l4952
  2566  001C'                    l4954:	
  2567                           
  2568                           ;GPS.c: 165: }
  2569                           ;GPS.c: 166: _Time= atol(Time_Buffer);
  2570  001C' 3000'              	movlw	(low (get_gpstime@Time_Buffer| 0))& (0+255)
  2571  001D' 120A' 118A' 2000'  	fcall	_atol
  2572  0020' 1283               	bcf	3,5	;RP0=0, select bank0
  2573  0021' 1303               	bcf	3,6	;RP1=0, select bank0
  2574  0022' 0810'              	movf	?_atol+3,w
  2575  0023' 00B3'              	movwf	get_gpstime@_Time+3
  2576  0024' 080F'              	movf	?_atol+2,w
  2577  0025' 00B2'              	movwf	get_gpstime@_Time+2
  2578  0026' 080E'              	movf	?_atol+1,w
  2579  0027' 00B1'              	movwf	get_gpstime@_Time+1
  2580  0028' 080D'              	movf	?_atol,w
  2581  0029' 00B0'              	movwf	get_gpstime@_Time
  2582                           
  2583                           ;GPS.c: 167: return _Time;
  2584  002A' 0833'              	movf	get_gpstime@_Time+3,w
  2585  002B' 009F'              	movwf	?_get_gpstime+3
  2586  002C' 0832'              	movf	get_gpstime@_Time+2,w
  2587  002D' 009E'              	movwf	?_get_gpstime+2
  2588  002E' 0831'              	movf	get_gpstime@_Time+1,w
  2589  002F' 009D'              	movwf	?_get_gpstime+1
  2590  0030' 0830'              	movf	get_gpstime@_Time,w
  2591  0031' 009C'              	movwf	?_get_gpstime
  2592  0032' 0008               	return
  2593  0033'                    __end_of_get_gpstime:	
  2594                           
  2595                           	psect	text5
  2596  0000'                    __ptext5:	
  2597 ;; *************** function _atol *****************
  2598 ;; Defined at:
  2599 ;;		line 5 in file "D:\mplab\sources\common\atol.c"
  2600 ;; Parameters:    Size  Location     Type
  2601 ;;  s               1    wreg     PTR const unsigned char 
  2602 ;;		 -> get_gpstime@Time_Buffer(15), 
  2603 ;; Auto vars:     Size  Location     Type
  2604 ;;  s               1   26[BANK0 ] PTR const unsigned char 
  2605 ;;		 -> get_gpstime@Time_Buffer(15), 
  2606 ;;  a               4   22[BANK0 ] long 
  2607 ;;  c               1   27[BANK0 ] unsigned char 
  2608 ;;  sign            1   21[BANK0 ] unsigned char 
  2609 ;; Return value:  Size  Location     Type
  2610 ;;                  4   13[BANK0 ] long 
  2611 ;; Registers used:
  2612 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2613 ;; Tracked objects:
  2614 ;;		On entry : 0/0
  2615 ;;		On exit  : 0/0
  2616 ;;		Unchanged: 0/0
  2617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2618 ;;      Params:         0       4       0       0       0
  2619 ;;      Locals:         0       7       0       0       0
  2620 ;;      Temps:          0       4       0       0       0
  2621 ;;      Totals:         0      15       0       0       0
  2622 ;;Total ram usage:       15 bytes
  2623 ;; Hardware stack levels used:    1
  2624 ;; Hardware stack levels required when called:    2
  2625 ;; This function calls:
  2626 ;;		___lmul
  2627 ;;		_isdigit
  2628 ;; This function is called by:
  2629 ;;		_get_gpstime
  2630 ;; This function uses a non-reentrant model
  2631 ;;
  2632                           
  2633                           
  2634                           ;psect for function _atol
  2635  0000'                    _atol:	
  2636                           
  2637                           ;incstack = 0
  2638                           ; Regs used in _atol: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2639                           ;atol@s stored from wreg
  2640  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2641  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  2642  0002' 009A'              	movwf	atol@s
  2643  0003'                    l580:	
  2644  0003' 081A'              	movf	atol@s,w
  2645  0004' 0084               	movwf	4
  2646  0005' 1383               	bcf	3,7	;select IRP bank0
  2647  0006' 0800               	movf	0,w
  2648  0007' 0091'              	movwf	??_atol
  2649  0008' 0811'              	movf	??_atol,w
  2650  0009' 009B'              	movwf	atol@c
  2651  000A' 3001               	movlw	1
  2652  000B' 0091'              	movwf	??_atol
  2653  000C' 0811'              	movf	??_atol,w
  2654  000D' 079A'              	addwf	atol@s,f
  2655  000E' 3020               	movlw	32
  2656  000F' 061B'              	xorwf	atol@c,w
  2657  0010' 1903               	btfsc	3,2
  2658  0011' 2800'              	goto	l580
  2659  0012' 3009               	movlw	9
  2660  0013' 061B'              	xorwf	atol@c,w
  2661  0014' 1903               	btfsc	3,2
  2662  0015' 2800'              	goto	l580
  2663  0016' 3000               	movlw	0
  2664  0017' 0099'              	movwf	atol@a+3
  2665  0018' 3000               	movlw	0
  2666  0019' 0098'              	movwf	atol@a+2
  2667  001A' 3000               	movlw	0
  2668  001B' 0097'              	movwf	atol@a+1
  2669  001C' 3000               	movlw	0
  2670  001D' 0096'              	movwf	atol@a
  2671  001E' 0195'              	clrf	atol@sign
  2672  001F' 302D               	movlw	45
  2673  0020' 061B'              	xorwf	atol@c,w
  2674  0021' 1D03               	btfss	3,2
  2675  0022' 2800'              	goto	l4798
  2676  0023' 3001               	movlw	1
  2677  0024' 0091'              	movwf	??_atol
  2678  0025' 0811'              	movf	??_atol,w
  2679  0026' 0795'              	addwf	atol@sign,f
  2680  0027' 2800'              	goto	L1
  2681  0028'                    l4798:	
  2682  0028' 302B               	movlw	43
  2683  0029' 061B'              	xorwf	atol@c,w
  2684  002A' 1D03               	btfss	3,2
  2685  002B' 2800'              	goto	l4810
  2686  002C'                    L1:	
  2687  002C' 081A'              	movf	atol@s,w
  2688  002D' 0084               	movwf	4
  2689  002E'                    L2:	
  2690  002E' 0800               	movf	0,w
  2691  002F' 0091'              	movwf	??_atol
  2692  0030' 0811'              	movf	??_atol,w
  2693  0031' 009B'              	movwf	atol@c
  2694  0032' 3001               	movlw	1
  2695  0033' 0091'              	movwf	??_atol
  2696  0034' 0811'              	movf	??_atol,w
  2697  0035' 079A'              	addwf	atol@s,f
  2698  0036'                    l4810:	
  2699  0036' 081B'              	movf	atol@c,w
  2700  0037' 120A' 118A' 2000' 120A' 118A' 	fcall	_isdigit
  2701  003C' 1C03               	btfss	3,0
  2702  003D' 2800'              	goto	l4812
  2703  003E' 1283               	bcf	3,5	;RP0=0, select bank0
  2704  003F' 1303               	bcf	3,6	;RP1=0, select bank0
  2705  0040' 081B'              	movf	atol@c,w
  2706  0041' 3ED0               	addlw	208
  2707  0042' 0091'              	movwf	??_atol
  2708  0043' 0192'              	clrf	??_atol+1
  2709  0044' 0193'              	clrf	??_atol+2
  2710  0045' 0194'              	clrf	??_atol+3
  2711  0046' 0819'              	movf	atol@a+3,w
  2712  0047' 0083'              	movwf	___lmul@multiplier+3
  2713  0048' 0818'              	movf	atol@a+2,w
  2714  0049' 0082'              	movwf	___lmul@multiplier+2
  2715  004A' 0817'              	movf	atol@a+1,w
  2716  004B' 0081'              	movwf	___lmul@multiplier+1
  2717  004C' 0816'              	movf	atol@a,w
  2718  004D' 0080'              	movwf	___lmul@multiplier
  2719  004E' 3000               	movlw	0
  2720  004F' 0087'              	movwf	___lmul@multiplicand+3
  2721  0050' 3000               	movlw	0
  2722  0051' 0086'              	movwf	___lmul@multiplicand+2
  2723  0052' 3000               	movlw	0
  2724  0053' 0085'              	movwf	___lmul@multiplicand+1
  2725  0054' 300A               	movlw	10
  2726  0055' 0084'              	movwf	___lmul@multiplicand
  2727  0056' 120A' 118A' 2000' 120A' 118A' 	fcall	___lmul
  2728  005B' 1283               	bcf	3,5	;RP0=0, select bank0
  2729  005C' 1303               	bcf	3,6	;RP1=0, select bank0
  2730  005D' 0800'              	movf	?___lmul,w
  2731  005E' 0791'              	addwf	??_atol,f
  2732  005F' 0801'              	movf	?___lmul+1,w
  2733  0060' 1803               	skipnc
  2734  0061' 0F01'              	incfsz	?___lmul+1,w
  2735  0062' 2800'              	goto	u7620
  2736  0063' 2800'              	goto	u7621
  2737  0064'                    u7620:	
  2738  0064' 0792'              	addwf	??_atol+1,f
  2739  0065'                    u7621:	
  2740  0065' 0802'              	movf	?___lmul+2,w
  2741  0066' 1803               	skipnc
  2742  0067' 0F02'              	incfsz	?___lmul+2,w
  2743  0068' 2800'              	goto	u7622
  2744  0069' 2800'              	goto	u7623
  2745  006A'                    u7622:	
  2746  006A' 0793'              	addwf	??_atol+2,f
  2747  006B'                    u7623:	
  2748  006B' 0803'              	movf	?___lmul+3,w
  2749  006C' 1803               	skipnc
  2750  006D' 0A03'              	incf	?___lmul+3,w
  2751  006E' 0794'              	addwf	??_atol+3,f
  2752  006F' 0814'              	movf	??_atol+3,w
  2753  0070' 0099'              	movwf	atol@a+3
  2754  0071' 0813'              	movf	??_atol+2,w
  2755  0072' 0098'              	movwf	atol@a+2
  2756  0073' 0812'              	movf	??_atol+1,w
  2757  0074' 0097'              	movwf	atol@a+1
  2758  0075' 0811'              	movf	??_atol,w
  2759  0076' 0096'              	movwf	atol@a
  2760  0077' 081A'              	movf	atol@s,w
  2761  0078' 0084               	movwf	4
  2762  0079' 1383               	bcf	3,7	;select IRP bank0
  2763  007A' 2800'              	goto	L2
  2764  007B'                    l4812:	
  2765  007B' 1283               	bcf	3,5	;RP0=0, select bank0
  2766  007C' 1303               	bcf	3,6	;RP1=0, select bank0
  2767  007D' 0815'              	movf	atol@sign,w
  2768  007E' 1903               	btfsc	3,2
  2769  007F' 2800'              	goto	l4818
  2770  0080' 0916'              	comf	atol@a,w
  2771  0081' 008D'              	movwf	?_atol
  2772  0082' 0917'              	comf	atol@a+1,w
  2773  0083' 008E'              	movwf	?_atol+1
  2774  0084' 0918'              	comf	atol@a+2,w
  2775  0085' 008F'              	movwf	?_atol+2
  2776  0086' 0919'              	comf	atol@a+3,w
  2777  0087' 0090'              	movwf	?_atol+3
  2778  0088' 0A8D'              	incf	?_atol,f
  2779  0089' 1903               	skipnz
  2780  008A' 0A8E'              	incf	?_atol+1,f
  2781  008B' 1903               	skipnz
  2782  008C' 0A8F'              	incf	?_atol+2,f
  2783  008D' 1903               	skipnz
  2784  008E' 0A90'              	incf	?_atol+3,f
  2785  008F' 0008               	return
  2786  0090'                    l4818:	
  2787  0090' 0819'              	movf	atol@a+3,w
  2788  0091' 0090'              	movwf	?_atol+3
  2789  0092' 0818'              	movf	atol@a+2,w
  2790  0093' 008F'              	movwf	?_atol+2
  2791  0094' 0817'              	movf	atol@a+1,w
  2792  0095' 008E'              	movwf	?_atol+1
  2793  0096' 0816'              	movf	atol@a,w
  2794  0097' 008D'              	movwf	?_atol
  2795  0098' 0008               	return
  2796  0099'                    __end_of_atol:	
  2797                           
  2798                           	psect	text6
  2799  0000'                    __ptext6:	
  2800 ;; *************** function _get_altitude *****************
  2801 ;; Defined at:
  2802 ;;		line 207 in file "GPS.c"
  2803 ;; Parameters:    Size  Location     Type
  2804 ;;  alt_pointer     1    wreg     unsigned char 
  2805 ;; Auto vars:     Size  Location     Type
  2806 ;;  alt_pointer     1   15[BANK1 ] unsigned char 
  2807 ;;  Alt_Buffer     12    0[BANK1 ] unsigned char [12]
  2808 ;;  _Altitude       3   12[BANK1 ] float 
  2809 ;;  index           1   17[BANK1 ] unsigned char 
  2810 ;;  alt_index       1   16[BANK1 ] unsigned char 
  2811 ;; Return value:  Size  Location     Type
  2812 ;;                  3   73[BANK0 ] float 
  2813 ;; Registers used:
  2814 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2815 ;; Tracked objects:
  2816 ;;		On entry : 0/0
  2817 ;;		On exit  : 0/0
  2818 ;;		Unchanged: 0/0
  2819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2820 ;;      Params:         0       3       0       0       0
  2821 ;;      Locals:         0       0      18       0       0
  2822 ;;      Temps:          0       1       0       0       0
  2823 ;;      Totals:         0       4      18       0       0
  2824 ;;Total ram usage:       22 bytes
  2825 ;; Hardware stack levels used:    1
  2826 ;; Hardware stack levels required when called:    5
  2827 ;; This function calls:
  2828 ;;		_atof
  2829 ;; This function is called by:
  2830 ;;		_main
  2831 ;; This function uses a non-reentrant model
  2832 ;;
  2833                           
  2834                           
  2835                           ;psect for function _get_altitude
  2836  0000'                    _get_altitude:	
  2837                           
  2838                           ;incstack = 0
  2839                           ; Regs used in _get_altitude: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2840                           ;get_altitude@alt_pointer stored from wreg
  2841  0000' 1683               	bsf	3,5	;RP0=1, select bank1
  2842  0001' 1303               	bcf	3,6	;RP1=0, select bank1
  2843  0002' 0080'              	movwf	get_altitude@alt_pointer^(0+128)
  2844                           
  2845                           ;GPS.c: 208: unsigned char alt_index;
  2846                           ;GPS.c: 209: unsigned char index = alt_pointer+1;
  2847  0003' 0800'              	movf	get_altitude@alt_pointer^(0+128),w
  2848  0004' 3E01               	addlw	1
  2849  0005' 1283               	bcf	3,5	;RP0=0, select bank0
  2850  0006' 1303               	bcf	3,6	;RP1=0, select bank0
  2851  0007' 00CC'              	movwf	??_get_altitude
  2852  0008' 084C'              	movf	??_get_altitude,w
  2853  0009' 1683               	bsf	3,5	;RP0=1, select bank1
  2854  000A' 1303               	bcf	3,6	;RP1=0, select bank1
  2855  000B' 0080'              	movwf	get_altitude@index^(0+128)
  2856                           
  2857                           ;GPS.c: 210: char Alt_Buffer[12];
  2858                           ;GPS.c: 211: float _Altitude;
  2859                           ;GPS.c: 212: alt_index=0;
  2860  000C' 0180'              	clrf	get_altitude@alt_index^(0+128)
  2861  000D'                    l95:	
  2862                           ;GPS.c: 215: for( ; GGA_Buffer[index]!=','; index++){
  2863                           
  2864  000D' 0800'              	movf	get_altitude@index^(0+128),w
  2865  000E' 3E00'              	addlw	(low (_GGA_Buffer| (0+256)))& (0+255)
  2866  000F' 0084               	movwf	4
  2867  0010' 302C               	movlw	44
  2868  0011' 1783               	bsf	3,7	;select IRP bank2
  2869  0012' 0600               	xorwf	0,w
  2870  0013' 1903               	btfsc	3,2
  2871  0014' 2800'              	goto	l5026
  2872                           
  2873                           ;GPS.c: 216: Alt_Buffer[alt_index]= GGA_Buffer[index];
  2874  0015' 0800'              	movf	get_altitude@index^(0+128),w
  2875  0016' 3E00'              	addlw	(low (_GGA_Buffer| (0+256)))& (0+255)
  2876  0017' 0084               	movwf	4
  2877  0018' 1783               	bsf	3,7	;select IRP bank2
  2878  0019' 0800               	movf	0,w
  2879  001A' 1283               	bcf	3,5	;RP0=0, select bank0
  2880  001B' 1303               	bcf	3,6	;RP1=0, select bank0
  2881  001C' 00CC'              	movwf	??_get_altitude
  2882  001D' 1683               	bsf	3,5	;RP0=1, select bank1
  2883  001E' 1303               	bcf	3,6	;RP1=0, select bank1
  2884  001F' 0800'              	movf	get_altitude@alt_index^(0+128),w
  2885  0020' 3E00'              	addlw	(low (get_altitude@Alt_Buffer| 0))& (0+255)
  2886  0021' 0084               	movwf	4
  2887  0022' 1283               	bcf	3,5	;RP0=0, select bank0
  2888  0023' 1303               	bcf	3,6	;RP1=0, select bank0
  2889  0024' 084C'              	movf	??_get_altitude,w
  2890  0025' 1383               	bcf	3,7	;select IRP bank1
  2891  0026' 0080               	movwf	0
  2892                           
  2893                           ;GPS.c: 217: alt_index++;
  2894  0027' 3001               	movlw	1
  2895  0028' 00CC'              	movwf	??_get_altitude
  2896  0029' 084C'              	movf	??_get_altitude,w
  2897  002A' 1683               	bsf	3,5	;RP0=1, select bank1
  2898  002B' 1303               	bcf	3,6	;RP1=0, select bank1
  2899  002C' 0780'              	addwf	get_altitude@alt_index^(0+128),f
  2900  002D' 3001               	movlw	1
  2901  002E' 1283               	bcf	3,5	;RP0=0, select bank0
  2902  002F' 1303               	bcf	3,6	;RP1=0, select bank0
  2903  0030' 00CC'              	movwf	??_get_altitude
  2904  0031' 084C'              	movf	??_get_altitude,w
  2905  0032' 1683               	bsf	3,5	;RP0=1, select bank1
  2906  0033' 1303               	bcf	3,6	;RP1=0, select bank1
  2907  0034' 0780'              	addwf	get_altitude@index^(0+128),f
  2908  0035' 2800'              	goto	l95
  2909  0036'                    l5026:	
  2910                           
  2911                           ;GPS.c: 218: }
  2912                           ;GPS.c: 219: _Altitude = atof(Alt_Buffer);
  2913  0036' 3000'              	movlw	(low (get_altitude@Alt_Buffer| 0))& (0+255)
  2914  0037' 120A' 118A' 2000'  	fcall	_atof
  2915  003A' 1283               	bcf	3,5	;RP0=0, select bank0
  2916  003B' 1303               	bcf	3,6	;RP1=0, select bank0
  2917  003C' 0844'              	movf	?_atof,w
  2918  003D' 1683               	bsf	3,5	;RP0=1, select bank1
  2919  003E' 1303               	bcf	3,6	;RP1=0, select bank1
  2920  003F' 0080'              	movwf	get_altitude@_Altitude^(0+128)
  2921  0040' 1283               	bcf	3,5	;RP0=0, select bank0
  2922  0041' 1303               	bcf	3,6	;RP1=0, select bank0
  2923  0042' 0845'              	movf	?_atof+1,w
  2924  0043' 1683               	bsf	3,5	;RP0=1, select bank1
  2925  0044' 1303               	bcf	3,6	;RP1=0, select bank1
  2926  0045' 0080'              	movwf	(get_altitude@_Altitude+1)^(0+128)
  2927  0046' 1283               	bcf	3,5	;RP0=0, select bank0
  2928  0047' 1303               	bcf	3,6	;RP1=0, select bank0
  2929  0048' 0846'              	movf	?_atof+2,w
  2930  0049' 1683               	bsf	3,5	;RP0=1, select bank1
  2931  004A' 1303               	bcf	3,6	;RP1=0, select bank1
  2932  004B' 0080'              	movwf	(get_altitude@_Altitude+2)^(0+128)
  2933                           
  2934                           ;GPS.c: 220: return _Altitude;
  2935  004C' 0800'              	movf	get_altitude@_Altitude^(0+128),w
  2936  004D' 1283               	bcf	3,5	;RP0=0, select bank0
  2937  004E' 1303               	bcf	3,6	;RP1=0, select bank0
  2938  004F' 00C9'              	movwf	?_get_altitude
  2939  0050' 1683               	bsf	3,5	;RP0=1, select bank1
  2940  0051' 1303               	bcf	3,6	;RP1=0, select bank1
  2941  0052' 0800'              	movf	(get_altitude@_Altitude+1)^(0+128),w
  2942  0053' 1283               	bcf	3,5	;RP0=0, select bank0
  2943  0054' 1303               	bcf	3,6	;RP1=0, select bank0
  2944  0055' 00CA'              	movwf	?_get_altitude+1
  2945  0056' 1683               	bsf	3,5	;RP0=1, select bank1
  2946  0057' 1303               	bcf	3,6	;RP1=0, select bank1
  2947  0058' 0800'              	movf	(get_altitude@_Altitude+2)^(0+128),w
  2948  0059' 1283               	bcf	3,5	;RP0=0, select bank0
  2949  005A' 1303               	bcf	3,6	;RP1=0, select bank0
  2950  005B' 00CB'              	movwf	?_get_altitude+2
  2951  005C' 0008               	return
  2952  005D'                    __end_of_get_altitude:	
  2953                           
  2954                           	psect	text7
  2955  0000'                    __ptext7:	
  2956 ;; *************** function _atof *****************
  2957 ;; Defined at:
  2958 ;;		line 200 in file "D:\mplab\sources\common\atof.c"
  2959 ;; Parameters:    Size  Location     Type
  2960 ;;  s               1    wreg     PTR const unsigned char 
  2961 ;;		 -> get_altitude@Alt_Buffer(12), get_longitude@Long_Buffer(15), get_latitude@Lat_Buffer(15), 
  2962 ;; Auto vars:     Size  Location     Type
  2963 ;;  s               1   72[BANK0 ] PTR const unsigned char 
  2964 ;;		 -> get_altitude@Alt_Buffer(12), get_longitude@Long_Buffer(15), get_latitude@Lat_Buffer(15), 
  2965 ;; Return value:  Size  Location     Type
  2966 ;;                  3   68[BANK0 ] PTR const unsigned char 
  2967 ;; Registers used:
  2968 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2969 ;; Tracked objects:
  2970 ;;		On entry : 0/0
  2971 ;;		On exit  : 0/0
  2972 ;;		Unchanged: 0/0
  2973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2974 ;;      Params:         0       4       0       0       0
  2975 ;;      Locals:         0       1       0       0       0
  2976 ;;      Temps:          0       0       0       0       0
  2977 ;;      Totals:         0       5       0       0       0
  2978 ;;Total ram usage:        5 bytes
  2979 ;; Hardware stack levels used:    1
  2980 ;; Hardware stack levels required when called:    4
  2981 ;; This function calls:
  2982 ;;		_strtod
  2983 ;; This function is called by:
  2984 ;;		_get_latitude
  2985 ;;		_get_longitude
  2986 ;;		_get_altitude
  2987 ;; This function uses a non-reentrant model
  2988 ;;
  2989                           
  2990                           
  2991                           ;psect for function _atof
  2992  0000'                    _atof:	
  2993                           
  2994                           ;incstack = 0
  2995                           ; Regs used in _atof: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2996                           ;atof@s stored from wreg
  2997  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2998  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  2999  0002' 00C8'              	movwf	atof@s
  3000  0003' 01A7'              	clrf	strtod@res
  3001  0004' 0848'              	movf	atof@s,w
  3002  0005' 120A' 118A' 2000'  	fcall	_strtod
  3003  0008' 1283               	bcf	3,5	;RP0=0, select bank0
  3004  0009' 1303               	bcf	3,6	;RP1=0, select bank0
  3005  000A' 0827'              	movf	?_strtod,w
  3006  000B' 00C4'              	movwf	?_atof
  3007  000C' 0828'              	movf	?_strtod+1,w
  3008  000D' 00C5'              	movwf	?_atof+1
  3009  000E' 0829'              	movf	?_strtod+2,w
  3010  000F' 00C6'              	movwf	?_atof+2
  3011  0010' 0008               	return
  3012  0011'                    __end_of_atof:	
  3013                           
  3014                           	psect	text8
  3015  0000'                    __ptext8:	
  3016 ;; *************** function _strtod *****************
  3017 ;; Defined at:
  3018 ;;		line 35 in file "D:\mplab\sources\common\atof.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;  s               1    wreg     PTR const unsigned char 
  3021 ;;		 -> get_altitude@Alt_Buffer(12), get_longitude@Long_Buffer(15), get_latitude@Lat_Buffer(15), 
  3022 ;;  res             1   39[BANK0 ] PTR PTR const unsigned c
  3023 ;;		 -> NULL(0), 
  3024 ;; Auto vars:     Size  Location     Type
  3025 ;;  s               1   67[BANK0 ] PTR const unsigned char 
  3026 ;;		 -> get_altitude@Alt_Buffer(12), get_longitude@Long_Buffer(15), get_latitude@Lat_Buffer(15), 
  3027 ;;  _u              4   63[BANK0 ] struct .
  3028 ;;  expon           1   62[BANK0 ] char 
  3029 ;;  flags           1   61[BANK0 ] unsigned char 
  3030 ;;  eexp            1   60[BANK0 ] char 
  3031 ;; Return value:  Size  Location     Type
  3032 ;;                  3   39[BANK0 ] char 
  3033 ;; Registers used:
  3034 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3035 ;; Tracked objects:
  3036 ;;		On entry : 0/0
  3037 ;;		On exit  : 0/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3040 ;;      Params:         0       3       0       0       0
  3041 ;;      Locals:         0      22       0       0       0
  3042 ;;      Temps:          0       4       0       0       0
  3043 ;;      Totals:         0      29       0       0       0
  3044 ;;Total ram usage:       29 bytes
  3045 ;; Hardware stack levels used:    1
  3046 ;; Hardware stack levels required when called:    3
  3047 ;; This function calls:
  3048 ;;		___altoft
  3049 ;;		___bmul
  3050 ;;		___ftdiv
  3051 ;;		___ftge
  3052 ;;		___ftmul
  3053 ;;		___ftneg
  3054 ;;		___lmul
  3055 ;;		_isdigit
  3056 ;;		_isspace
  3057 ;; This function is called by:
  3058 ;;		_atof
  3059 ;; This function uses a non-reentrant model
  3060 ;;
  3061                           
  3062                           
  3063                           ;psect for function _strtod
  3064  0000'                    _strtod:	
  3065                           
  3066                           ;incstack = 0
  3067                           ; Regs used in _strtod: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3068                           ;strtod@s stored from wreg
  3069  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  3070  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  3071  0002' 00C3'              	movwf	strtod@s
  3072  0003' 0827'              	movf	strtod@res,w
  3073  0004' 1903               	btfsc	3,2
  3074  0005' 2800'              	goto	l4314
  3075  0006' 0843'              	movf	strtod@s,w
  3076  0007' 00AA'              	movwf	??_strtod
  3077  0008' 0827'              	movf	strtod@res,w
  3078  0009' 0084               	movwf	4
  3079  000A' 082A'              	movf	??_strtod,w
  3080  000B' 1383               	bcf	3,7	;select IRP bank0
  3081  000C' 0080               	movwf	0
  3082  000D'                    l4314:	
  3083  000D' 0843'              	movf	strtod@s,w
  3084  000E' 0084               	movwf	4
  3085  000F' 1383               	bcf	3,7	;select IRP bank0
  3086  0010' 0800               	movf	0,w
  3087  0011' 00BC'              	movwf	strtod@eexp
  3088  0012' 120A' 118A' 2000' 120A' 118A' 	fcall	_isspace
  3089  0017' 1C03               	btfss	3,0
  3090  0018' 2800'              	goto	l4316
  3091  0019' 3001               	movlw	1
  3092  001A' 1283               	bcf	3,5	;RP0=0, select bank0
  3093  001B' 1303               	bcf	3,6	;RP1=0, select bank0
  3094  001C' 00AA'              	movwf	??_strtod
  3095  001D' 082A'              	movf	??_strtod,w
  3096  001E' 07C3'              	addwf	strtod@s,f
  3097  001F' 2800'              	goto	l4314
  3098  0020'                    l4316:	
  3099  0020' 1283               	bcf	3,5	;RP0=0, select bank0
  3100  0021' 1303               	bcf	3,6	;RP1=0, select bank0
  3101  0022' 01BD'              	clrf	strtod@flags
  3102  0023' 302D               	movlw	45
  3103  0024' 063C'              	xorwf	strtod@eexp,w
  3104  0025' 1D03               	btfss	3,2
  3105  0026' 2800'              	goto	l4324
  3106  0027' 01BD'              	clrf	strtod@flags
  3107  0028' 0ABD'              	incf	strtod@flags,f
  3108  0029' 2800'              	goto	l4326
  3109  002A'                    l4324:	
  3110  002A' 302B               	movlw	43
  3111  002B' 063C'              	xorwf	strtod@eexp,w
  3112  002C' 1D03               	btfss	3,2
  3113  002D' 2800'              	goto	l4328
  3114  002E'                    l4326:	
  3115  002E' 3001               	movlw	1
  3116  002F' 00AA'              	movwf	??_strtod
  3117  0030' 082A'              	movf	??_strtod,w
  3118  0031' 07C3'              	addwf	strtod@s,f
  3119  0032'                    l4328:	
  3120  0032' 01BC'              	clrf	strtod@eexp
  3121  0033' 3000               	movlw	0
  3122  0034' 00C2'              	movwf	strtod@_u+3
  3123  0035' 3000               	movlw	0
  3124  0036' 00C1'              	movwf	strtod@_u+2
  3125  0037' 3000               	movlw	0
  3126  0038' 00C0'              	movwf	strtod@_u+1
  3127  0039' 3000               	movlw	0
  3128  003A' 00BF'              	movwf	strtod@_u
  3129  003B' 01BE'              	clrf	strtod@expon
  3130  003C' 2800'              	goto	l4334
  3131  003D'                    l4336:	
  3132  003D' 0843'              	movf	strtod@s,w
  3133  003E' 0084               	movwf	4
  3134  003F' 302E               	movlw	46
  3135  0040' 1383               	bcf	3,7	;select IRP bank0
  3136  0041' 0600               	xorwf	0,w
  3137  0042' 1D03               	btfss	3,2
  3138  0043' 2800'              	goto	l4342
  3139  0044' 163D'              	bsf	strtod@flags,4
  3140  0045'                    L3:	
  3141  0045' 3001               	movlw	1
  3142  0046' 00AA'              	movwf	??_strtod
  3143  0047' 082A'              	movf	??_strtod,w
  3144  0048' 07C3'              	addwf	strtod@s,f
  3145  0049'                    l4334:	
  3146  0049' 1E3D'              	btfss	strtod@flags,4
  3147  004A' 2800'              	goto	l4336
  3148  004B'                    l4342:	
  3149  004B' 0843'              	movf	strtod@s,w
  3150  004C' 0084               	movwf	4
  3151  004D' 1383               	bcf	3,7	;select IRP bank0
  3152  004E' 0800               	movf	0,w
  3153  004F' 120A' 118A' 2000' 120A' 118A' 	fcall	_isdigit
  3154  0054' 1C03               	btfss	3,0
  3155  0055' 2800'              	goto	l4362
  3156  0056' 1283               	bcf	3,5	;RP0=0, select bank0
  3157  0057' 1303               	bcf	3,6	;RP1=0, select bank0
  3158  0058' 14BD'              	bsf	strtod@flags,1
  3159  0059' 3005               	movlw	5
  3160  005A' 00BA'              	movwf	_strtod$515
  3161  005B' 3000               	movlw	0
  3162  005C' 00BB'              	movwf	_strtod$515+1
  3163  005D' 083C'              	movf	strtod@eexp,w
  3164  005E' 00AA'              	movwf	??_strtod
  3165  005F' 01AB'              	clrf	??_strtod+1
  3166  0060' 1BAA'              	btfsc	??_strtod,7
  3167  0061' 03AB'              	decf	??_strtod+1,f
  3168  0062' 083A'              	movf	_strtod$515,w
  3169  0063' 3E03               	addlw	3
  3170  0064' 00AC'              	movwf	??_strtod+2
  3171  0065' 083B'              	movf	_strtod$515+1,w
  3172  0066' 1803               	skipnc
  3173  0067' 3E01               	addlw	1
  3174  0068' 3E00               	addlw	0
  3175  0069' 00AD'              	movwf	??_strtod+3
  3176  006A' 082B'              	movf	??_strtod+1,w
  3177  006B' 062D'              	xorwf	??_strtod+3,w
  3178  006C' 1D03               	skipz
  3179  006D' 2800'              	goto	u6775
  3180  006E' 082A'              	movf	??_strtod,w
  3181  006F' 062C'              	xorwf	??_strtod+2,w
  3182  0070'                    u6775:	
  3183  0070' 1903               	skipnz
  3184  0071' 2800'              	goto	l505
  3185  0072' 1E3D'              	btfss	strtod@flags,4
  3186  0073' 2800'              	goto	l510
  3187  0074' 30FF               	movlw	255
  3188  0075' 00AA'              	movwf	??_strtod
  3189  0076' 082A'              	movf	??_strtod,w
  3190  0077' 07BE'              	addwf	strtod@expon,f
  3191  0078'                    l510:	
  3192  0078' 3001               	movlw	1
  3193  0079' 00AA'              	movwf	??_strtod
  3194  007A' 082A'              	movf	??_strtod,w
  3195  007B' 07BC'              	addwf	strtod@eexp,f
  3196  007C' 3000               	movlw	0
  3197  007D' 0083'              	movwf	___lmul@multiplier+3
  3198  007E' 3000               	movlw	0
  3199  007F' 0082'              	movwf	___lmul@multiplier+2
  3200  0080' 3000               	movlw	0
  3201  0081' 0081'              	movwf	___lmul@multiplier+1
  3202  0082' 300A               	movlw	10
  3203  0083' 0080'              	movwf	___lmul@multiplier
  3204  0084' 0842'              	movf	strtod@_u+3,w
  3205  0085' 0087'              	movwf	___lmul@multiplicand+3
  3206  0086' 0841'              	movf	strtod@_u+2,w
  3207  0087' 0086'              	movwf	___lmul@multiplicand+2
  3208  0088' 0840'              	movf	strtod@_u+1,w
  3209  0089' 0085'              	movwf	___lmul@multiplicand+1
  3210  008A' 083F'              	movf	strtod@_u,w
  3211  008B' 0084'              	movwf	___lmul@multiplicand
  3212  008C' 120A' 118A' 2000' 120A' 118A' 	fcall	___lmul
  3213  0091' 1283               	bcf	3,5	;RP0=0, select bank0
  3214  0092' 1303               	bcf	3,6	;RP1=0, select bank0
  3215  0093' 0803'              	movf	?___lmul+3,w
  3216  0094' 00C2'              	movwf	strtod@_u+3
  3217  0095' 0802'              	movf	?___lmul+2,w
  3218  0096' 00C1'              	movwf	strtod@_u+2
  3219  0097' 0801'              	movf	?___lmul+1,w
  3220  0098' 00C0'              	movwf	strtod@_u+1
  3221  0099' 0800'              	movf	?___lmul,w
  3222  009A' 00BF'              	movwf	strtod@_u
  3223  009B' 0843'              	movf	strtod@s,w
  3224  009C' 0084               	movwf	4
  3225  009D' 1383               	bcf	3,7	;select IRP bank0
  3226  009E' 0800               	movf	0,w
  3227  009F' 3ED0               	addlw	208
  3228  00A0' 00AA'              	movwf	??_strtod
  3229  00A1' 01AB'              	clrf	??_strtod+1
  3230  00A2' 01AC'              	clrf	??_strtod+2
  3231  00A3' 01AD'              	clrf	??_strtod+3
  3232  00A4' 082A'              	movf	??_strtod,w
  3233  00A5' 07BF'              	addwf	strtod@_u,f
  3234  00A6' 082B'              	movf	??_strtod+1,w
  3235  00A7' 1103               	clrz
  3236  00A8' 1803               	skipnc
  3237  00A9' 3E01               	addlw	1
  3238  00AA' 1D03               	btfss	3,2
  3239  00AB' 07C0'              	addwf	strtod@_u+1,f
  3240  00AC' 082C'              	movf	??_strtod+2,w
  3241  00AD' 1103               	clrz
  3242  00AE' 1803               	skipnc
  3243  00AF' 3E01               	addlw	1
  3244  00B0' 1D03               	btfss	3,2
  3245  00B1' 07C1'              	addwf	strtod@_u+2,f
  3246  00B2' 082D'              	movf	??_strtod+3,w
  3247  00B3' 1103               	clrz
  3248  00B4' 1803               	skipnc
  3249  00B5' 3E01               	addlw	1
  3250  00B6' 1D03               	btfss	3,2
  3251  00B7' 07C2'              	addwf	strtod@_u+3,f
  3252  00B8' 2800'              	goto	L3
  3253  00B9'                    l505:	
  3254  00B9' 1A3D'              	btfsc	strtod@flags,4
  3255  00BA' 2800'              	goto	L3
  3256  00BB' 3001               	movlw	1
  3257  00BC' 00AA'              	movwf	??_strtod
  3258  00BD' 082A'              	movf	??_strtod,w
  3259  00BE' 07BE'              	addwf	strtod@expon,f
  3260  00BF' 2800'              	goto	L3
  3261  00C0'                    l4362:	
  3262  00C0' 1283               	bcf	3,5	;RP0=0, select bank0
  3263  00C1' 1303               	bcf	3,6	;RP1=0, select bank0
  3264  00C2' 01BC'              	clrf	strtod@eexp
  3265  00C3' 0843'              	movf	strtod@s,w
  3266  00C4' 0084               	movwf	4
  3267  00C5' 3065               	movlw	101
  3268  00C6' 1383               	bcf	3,7	;select IRP bank0
  3269  00C7' 0600               	xorwf	0,w
  3270  00C8' 1903               	btfsc	3,2
  3271  00C9' 2800'              	goto	l4368
  3272  00CA' 0843'              	movf	strtod@s,w
  3273  00CB' 0084               	movwf	4
  3274  00CC' 3045               	movlw	69
  3275  00CD' 0600               	xorwf	0,w
  3276  00CE' 1D03               	btfss	3,2
  3277  00CF' 2800'              	goto	l4402
  3278  00D0'                    l4368:	
  3279  00D0' 3001               	movlw	1
  3280  00D1' 00AA'              	movwf	??_strtod
  3281  00D2' 082A'              	movf	??_strtod,w
  3282  00D3' 07C3'              	addwf	strtod@s,f
  3283  00D4' 0843'              	movf	strtod@s,w
  3284  00D5' 0084               	movwf	4
  3285  00D6' 302D               	movlw	45
  3286  00D7' 0600               	xorwf	0,w
  3287  00D8' 1D03               	btfss	3,2
  3288  00D9' 2800'              	goto	l4374
  3289  00DA' 15BD'              	bsf	strtod@flags,3
  3290  00DB' 2800'              	goto	l4378
  3291  00DC'                    l4374:	
  3292  00DC' 0843'              	movf	strtod@s,w
  3293  00DD' 0084               	movwf	4
  3294  00DE' 302B               	movlw	43
  3295  00DF' 0600               	xorwf	0,w
  3296  00E0' 1D03               	btfss	3,2
  3297  00E1' 2800'              	goto	l4380
  3298  00E2'                    l4378:	
  3299  00E2' 3001               	movlw	1
  3300  00E3' 00AA'              	movwf	??_strtod
  3301  00E4' 082A'              	movf	??_strtod,w
  3302  00E5' 07C3'              	addwf	strtod@s,f
  3303  00E6'                    l4380:	
  3304  00E6' 0843'              	movf	strtod@s,w
  3305  00E7' 0084               	movwf	4
  3306  00E8' 3030               	movlw	48
  3307  00E9' 0600               	xorwf	0,w
  3308  00EA' 1903               	btfsc	3,2
  3309  00EB' 2800'              	goto	l4378
  3310  00EC' 0843'              	movf	strtod@s,w
  3311  00ED' 0084               	movwf	4
  3312  00EE' 0800               	movf	0,w
  3313  00EF' 120A' 118A' 2000' 120A' 118A' 	fcall	_isdigit
  3314  00F4' 1C03               	btfss	3,0
  3315  00F5' 2800'              	goto	l4398
  3316  00F6' 1283               	bcf	3,5	;RP0=0, select bank0
  3317  00F7' 1303               	bcf	3,6	;RP1=0, select bank0
  3318  00F8' 0843'              	movf	strtod@s,w
  3319  00F9' 0084               	movwf	4
  3320  00FA' 1383               	bcf	3,7	;select IRP bank0
  3321  00FB' 0800               	movf	0,w
  3322  00FC' 3ED0               	addlw	208
  3323  00FD' 00AA'              	movwf	??_strtod
  3324  00FE' 082A'              	movf	??_strtod,w
  3325  00FF' 00BC'              	movwf	strtod@eexp
  3326  0100' 3001               	movlw	1
  3327  0101' 00AA'              	movwf	??_strtod
  3328  0102' 082A'              	movf	??_strtod,w
  3329  0103' 07C3'              	addwf	strtod@s,f
  3330  0104' 0843'              	movf	strtod@s,w
  3331  0105' 0084               	movwf	4
  3332  0106' 0800               	movf	0,w
  3333  0107' 120A' 118A' 2000' 120A' 118A' 	fcall	_isdigit
  3334  010C' 1C03               	btfss	3,0
  3335  010D' 2800'              	goto	l4398
  3336  010E' 1283               	bcf	3,5	;RP0=0, select bank0
  3337  010F' 1303               	bcf	3,6	;RP1=0, select bank0
  3338  0110' 0843'              	movf	strtod@s,w
  3339  0111' 0084               	movwf	4
  3340  0112' 300A               	movlw	10
  3341  0113' 00AA'              	movwf	??_strtod
  3342  0114' 082A'              	movf	??_strtod,w
  3343  0115' 0090'              	movwf	___bmul@multiplicand
  3344  0116' 083C'              	movf	strtod@eexp,w
  3345  0117' 120A' 118A' 2000' 120A' 118A' 	fcall	___bmul
  3346  011C' 1383               	bcf	3,7	;select IRP bank0
  3347  011D' 0700               	addwf	0,w
  3348  011E' 3ED0               	addlw	-48
  3349  011F' 1283               	bcf	3,5	;RP0=0, select bank0
  3350  0120' 1303               	bcf	3,6	;RP1=0, select bank0
  3351  0121' 00AB'              	movwf	??_strtod+1
  3352  0122' 082B'              	movf	??_strtod+1,w
  3353  0123' 00BC'              	movwf	strtod@eexp
  3354  0124' 3001               	movlw	1
  3355  0125' 00AA'              	movwf	??_strtod
  3356  0126' 082A'              	movf	??_strtod,w
  3357  0127' 07C3'              	addwf	strtod@s,f
  3358  0128' 0843'              	movf	strtod@s,w
  3359  0129' 0084               	movwf	4
  3360  012A' 0800               	movf	0,w
  3361  012B' 120A' 118A' 2000' 120A' 118A' 	fcall	_isdigit
  3362  0130' 1C03               	btfss	3,0
  3363  0131' 2800'              	goto	l4398
  3364  0132' 1283               	bcf	3,5	;RP0=0, select bank0
  3365  0133' 1303               	bcf	3,6	;RP1=0, select bank0
  3366  0134' 0843'              	movf	strtod@s,w
  3367  0135' 0084               	movwf	4
  3368  0136' 300A               	movlw	10
  3369  0137' 00AA'              	movwf	??_strtod
  3370  0138' 082A'              	movf	??_strtod,w
  3371  0139' 0090'              	movwf	___bmul@multiplicand
  3372  013A' 083C'              	movf	strtod@eexp,w
  3373  013B' 120A' 118A' 2000' 120A' 118A' 	fcall	___bmul
  3374  0140' 1383               	bcf	3,7	;select IRP bank0
  3375  0141' 0700               	addwf	0,w
  3376  0142' 3ED0               	addlw	-48
  3377  0143' 1283               	bcf	3,5	;RP0=0, select bank0
  3378  0144' 1303               	bcf	3,6	;RP1=0, select bank0
  3379  0145' 00AB'              	movwf	??_strtod+1
  3380  0146' 082B'              	movf	??_strtod+1,w
  3381  0147' 00BC'              	movwf	strtod@eexp
  3382  0148'                    l4398:	
  3383  0148' 1283               	bcf	3,5	;RP0=0, select bank0
  3384  0149' 1303               	bcf	3,6	;RP1=0, select bank0
  3385  014A' 1DBD'              	btfss	strtod@flags,3
  3386  014B' 2800'              	goto	l4402
  3387  014C' 09BC'              	comf	strtod@eexp,f
  3388  014D' 0ABC'              	incf	strtod@eexp,f
  3389  014E'                    l4402:	
  3390  014E' 083C'              	movf	strtod@eexp,w
  3391  014F' 00AA'              	movwf	??_strtod
  3392  0150' 082A'              	movf	??_strtod,w
  3393  0151' 07BE'              	addwf	strtod@expon,f
  3394  0152' 0827'              	movf	strtod@res,w
  3395  0153' 1D03               	btfss	3,2
  3396  0154' 1CBD'              	btfss	strtod@flags,1
  3397  0155' 2800'              	goto	l4410
  3398  0156' 0843'              	movf	strtod@s,w
  3399  0157' 00AA'              	movwf	??_strtod
  3400  0158' 0827'              	movf	strtod@res,w
  3401  0159' 0084               	movwf	4
  3402  015A' 082A'              	movf	??_strtod,w
  3403  015B' 1383               	bcf	3,7	;select IRP bank0
  3404  015C' 0080               	movwf	0
  3405  015D'                    l4410:	
  3406  015D' 0842'              	movf	strtod@_u+3,w
  3407  015E' 008B'              	movwf	___altoft@c+3
  3408  015F' 0841'              	movf	strtod@_u+2,w
  3409  0160' 008A'              	movwf	___altoft@c+2
  3410  0161' 0840'              	movf	strtod@_u+1,w
  3411  0162' 0089'              	movwf	___altoft@c+1
  3412  0163' 083F'              	movf	strtod@_u,w
  3413  0164' 0088'              	movwf	___altoft@c
  3414  0165' 120A' 118A' 2000' 120A' 118A' 	fcall	___altoft
  3415  016A' 1283               	bcf	3,5	;RP0=0, select bank0
  3416  016B' 1303               	bcf	3,6	;RP1=0, select bank0
  3417  016C' 0808'              	movf	?___altoft,w
  3418  016D' 00BF'              	movwf	strtod@_u
  3419  016E' 0809'              	movf	?___altoft+1,w
  3420  016F' 00C0'              	movwf	strtod@_u+1
  3421  0170' 080A'              	movf	?___altoft+2,w
  3422  0171' 00C1'              	movwf	strtod@_u+2
  3423  0172' 0841'              	movf	strtod@_u+2,w
  3424  0173' 0440'              	iorwf	strtod@_u+1,w
  3425  0174' 043F'              	iorwf	strtod@_u,w
  3426  0175' 1D03               	skipz
  3427  0176' 2800'              	goto	l527
  3428  0177' 3000               	movlw	0
  3429  0178' 00A7'              	movwf	?_strtod
  3430  0179' 3000               	movlw	0
  3431  017A' 00A8'              	movwf	?_strtod+1
  3432  017B' 3000               	movlw	0
  3433  017C' 00A9'              	movwf	?_strtod+2
  3434  017D' 0008               	return
  3435  017E'                    l527:	
  3436  017E' 1FBE'              	btfss	strtod@expon,7
  3437  017F' 2800'              	goto	l4456
  3438  0180' 09BE'              	comf	strtod@expon,f
  3439  0181' 0ABE'              	incf	strtod@expon,f
  3440  0182'                    l4424:	
  3441  0182' 083E'              	movf	strtod@expon,w
  3442  0183' 3A80               	xorlw	128
  3443  0184' 3E76               	addlw	-138
  3444  0185' 1C03               	btfss	3,0
  3445  0186' 2800'              	goto	l4430
  3446  0187' 3003               	movlw	3
  3447  0188' 0088'              	movwf	___ftdiv@f2
  3448  0189' 3015               	movlw	21
  3449  018A' 0089'              	movwf	___ftdiv@f2+1
  3450  018B' 3050               	movlw	80
  3451  018C' 008A'              	movwf	___ftdiv@f2+2
  3452  018D' 083F'              	movf	strtod@_u,w
  3453  018E' 008B'              	movwf	___ftdiv@f1
  3454  018F' 0840'              	movf	strtod@_u+1,w
  3455  0190' 008C'              	movwf	___ftdiv@f1+1
  3456  0191' 0841'              	movf	strtod@_u+2,w
  3457  0192' 008D'              	movwf	___ftdiv@f1+2
  3458  0193' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftdiv
  3459  0198' 1283               	bcf	3,5	;RP0=0, select bank0
  3460  0199' 1303               	bcf	3,6	;RP1=0, select bank0
  3461  019A' 0808'              	movf	?___ftdiv,w
  3462  019B' 00BF'              	movwf	strtod@_u
  3463  019C' 0809'              	movf	?___ftdiv+1,w
  3464  019D' 00C0'              	movwf	strtod@_u+1
  3465  019E' 080A'              	movf	?___ftdiv+2,w
  3466  019F' 00C1'              	movwf	strtod@_u+2
  3467  01A0' 30F6               	movlw	246
  3468  01A1' 00AA'              	movwf	??_strtod
  3469  01A2' 082A'              	movf	??_strtod,w
  3470  01A3' 07BE'              	addwf	strtod@expon,f
  3471  01A4' 2800'              	goto	l4424
  3472  01A5'                    l4426:	
  3473  01A5' 3000               	movlw	0
  3474  01A6' 0088'              	movwf	___ftdiv@f2
  3475  01A7' 3020               	movlw	32
  3476  01A8' 0089'              	movwf	___ftdiv@f2+1
  3477  01A9' 3041               	movlw	65
  3478  01AA' 008A'              	movwf	___ftdiv@f2+2
  3479  01AB' 083F'              	movf	strtod@_u,w
  3480  01AC' 008B'              	movwf	___ftdiv@f1
  3481  01AD' 0840'              	movf	strtod@_u+1,w
  3482  01AE' 008C'              	movwf	___ftdiv@f1+1
  3483  01AF' 0841'              	movf	strtod@_u+2,w
  3484  01B0' 008D'              	movwf	___ftdiv@f1+2
  3485  01B1' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftdiv
  3486  01B6' 1283               	bcf	3,5	;RP0=0, select bank0
  3487  01B7' 1303               	bcf	3,6	;RP1=0, select bank0
  3488  01B8' 0808'              	movf	?___ftdiv,w
  3489  01B9' 00BF'              	movwf	strtod@_u
  3490  01BA' 0809'              	movf	?___ftdiv+1,w
  3491  01BB' 00C0'              	movwf	strtod@_u+1
  3492  01BC' 080A'              	movf	?___ftdiv+2,w
  3493  01BD' 00C1'              	movwf	strtod@_u+2
  3494  01BE' 30FF               	movlw	255
  3495  01BF' 00AA'              	movwf	??_strtod
  3496  01C0' 082A'              	movf	??_strtod,w
  3497  01C1' 07BE'              	addwf	strtod@expon,f
  3498  01C2'                    l4430:	
  3499  01C2' 083E'              	movf	strtod@expon,w
  3500  01C3' 1D03               	btfss	3,2
  3501  01C4' 2800'              	goto	l4426
  3502  01C5' 3000               	movlw	0
  3503  01C6' 00AE'              	movwf	_strtod$516
  3504  01C7' 3080               	movlw	128
  3505  01C8' 00AF'              	movwf	_strtod$516+1
  3506  01C9' 3000               	movlw	0
  3507  01CA' 00B0'              	movwf	_strtod$516+2
  3508  01CB' 083F'              	movf	strtod@_u,w
  3509  01CC' 0080'              	movwf	___ftge@ff1
  3510  01CD' 0840'              	movf	strtod@_u+1,w
  3511  01CE' 0081'              	movwf	___ftge@ff1+1
  3512  01CF' 0841'              	movf	strtod@_u+2,w
  3513  01D0' 0082'              	movwf	___ftge@ff1+2
  3514  01D1' 082E'              	movf	_strtod$516,w
  3515  01D2' 0083'              	movwf	___ftge@ff2
  3516  01D3' 082F'              	movf	_strtod$516+1,w
  3517  01D4' 0084'              	movwf	___ftge@ff2+1
  3518  01D5' 0830'              	movf	_strtod$516+2,w
  3519  01D6' 0085'              	movwf	___ftge@ff2+2
  3520  01D7' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftge
  3521  01DC' 1803               	btfsc	3,0
  3522  01DD' 2800'              	goto	l550
  3523  01DE' 1283               	bcf	3,5	;RP0=0, select bank0
  3524  01DF' 1303               	bcf	3,6	;RP1=0, select bank0
  3525  01E0' 1C3D'              	btfss	strtod@flags,0
  3526  01E1' 2800'              	goto	l4452
  3527  01E2' 3000               	movlw	0
  3528  01E3' 00B1'              	movwf	_strtod$517
  3529  01E4' 3080               	movlw	128
  3530  01E5' 00B2'              	movwf	_strtod$517+1
  3531  01E6' 3000               	movlw	0
  3532  01E7' 00B3'              	movwf	_strtod$517+2
  3533  01E8' 0831'              	movf	_strtod$517,w
  3534  01E9' 00A4'              	movwf	___ftneg@f1
  3535  01EA' 0832'              	movf	_strtod$517+1,w
  3536  01EB' 00A5'              	movwf	___ftneg@f1+1
  3537  01EC' 0833'              	movf	_strtod$517+2,w
  3538  01ED' 00A6'              	movwf	___ftneg@f1+2
  3539  01EE' 120A' 118A' 2000'  	fcall	___ftneg
  3540  01F1' 1283               	bcf	3,5	;RP0=0, select bank0
  3541  01F2' 1303               	bcf	3,6	;RP1=0, select bank0
  3542  01F3' 0824'              	movf	?___ftneg,w
  3543  01F4' 00A7'              	movwf	?_strtod
  3544  01F5' 0825'              	movf	?___ftneg+1,w
  3545  01F6' 00A8'              	movwf	?_strtod+1
  3546  01F7' 0826'              	movf	?___ftneg+2,w
  3547  01F8' 00A9'              	movwf	?_strtod+2
  3548  01F9' 0008               	return
  3549  01FA'                    l4452:	
  3550  01FA' 3000               	movlw	0
  3551  01FB' 00A7'              	movwf	?_strtod
  3552  01FC' 3080               	movlw	128
  3553  01FD' 00A8'              	movwf	?_strtod+1
  3554  01FE' 3000               	movlw	0
  3555  01FF' 00A9'              	movwf	?_strtod+2
  3556  0200' 0008               	return
  3557  0201'                    l4456:	
  3558  0201' 083E'              	movf	strtod@expon,w
  3559  0202' 3A80               	xorlw	128
  3560  0203' 3E7F               	addlw	-129
  3561  0204' 1803               	btfsc	3,0
  3562  0205' 2800'              	goto	l4464
  3563  0206' 2800'              	goto	l550
  3564  0207'                    l4460:	
  3565  0207' 3003               	movlw	3
  3566  0208' 0094'              	movwf	___ftmul@f1
  3567  0209' 3015               	movlw	21
  3568  020A' 0095'              	movwf	___ftmul@f1+1
  3569  020B' 3050               	movlw	80
  3570  020C' 0096'              	movwf	___ftmul@f1+2
  3571  020D' 083F'              	movf	strtod@_u,w
  3572  020E' 0097'              	movwf	___ftmul@f2
  3573  020F' 0840'              	movf	strtod@_u+1,w
  3574  0210' 0098'              	movwf	___ftmul@f2+1
  3575  0211' 0841'              	movf	strtod@_u+2,w
  3576  0212' 0099'              	movwf	___ftmul@f2+2
  3577  0213' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftmul
  3578  0218' 1283               	bcf	3,5	;RP0=0, select bank0
  3579  0219' 1303               	bcf	3,6	;RP1=0, select bank0
  3580  021A' 0814'              	movf	?___ftmul,w
  3581  021B' 00BF'              	movwf	strtod@_u
  3582  021C' 0815'              	movf	?___ftmul+1,w
  3583  021D' 00C0'              	movwf	strtod@_u+1
  3584  021E' 0816'              	movf	?___ftmul+2,w
  3585  021F' 00C1'              	movwf	strtod@_u+2
  3586  0220' 30F6               	movlw	246
  3587  0221' 00AA'              	movwf	??_strtod
  3588  0222' 082A'              	movf	??_strtod,w
  3589  0223' 07BE'              	addwf	strtod@expon,f
  3590  0224'                    l4464:	
  3591  0224' 300A               	movlw	10
  3592  0225' 023E'              	subwf	strtod@expon,w
  3593  0226' 1C03               	btfss	3,0
  3594  0227' 2800'              	goto	l4470
  3595  0228' 2800'              	goto	l4460
  3596  0229'                    l4466:	
  3597  0229' 3000               	movlw	0
  3598  022A' 0094'              	movwf	___ftmul@f1
  3599  022B' 3020               	movlw	32
  3600  022C' 0095'              	movwf	___ftmul@f1+1
  3601  022D' 3041               	movlw	65
  3602  022E' 0096'              	movwf	___ftmul@f1+2
  3603  022F' 083F'              	movf	strtod@_u,w
  3604  0230' 0097'              	movwf	___ftmul@f2
  3605  0231' 0840'              	movf	strtod@_u+1,w
  3606  0232' 0098'              	movwf	___ftmul@f2+1
  3607  0233' 0841'              	movf	strtod@_u+2,w
  3608  0234' 0099'              	movwf	___ftmul@f2+2
  3609  0235' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftmul
  3610  023A' 1283               	bcf	3,5	;RP0=0, select bank0
  3611  023B' 1303               	bcf	3,6	;RP1=0, select bank0
  3612  023C' 0814'              	movf	?___ftmul,w
  3613  023D' 00BF'              	movwf	strtod@_u
  3614  023E' 0815'              	movf	?___ftmul+1,w
  3615  023F' 00C0'              	movwf	strtod@_u+1
  3616  0240' 0816'              	movf	?___ftmul+2,w
  3617  0241' 00C1'              	movwf	strtod@_u+2
  3618  0242' 30FF               	movlw	255
  3619  0243' 00AA'              	movwf	??_strtod
  3620  0244' 082A'              	movf	??_strtod,w
  3621  0245' 07BE'              	addwf	strtod@expon,f
  3622  0246'                    l4470:	
  3623  0246' 083E'              	movf	strtod@expon,w
  3624  0247' 1D03               	btfss	3,2
  3625  0248' 2800'              	goto	l4466
  3626  0249' 30FF               	movlw	255
  3627  024A' 00B4'              	movwf	_strtod$518
  3628  024B' 307F               	movlw	127
  3629  024C' 00B5'              	movwf	_strtod$518+1
  3630  024D' 307F               	movlw	127
  3631  024E' 00B6'              	movwf	_strtod$518+2
  3632  024F' 0834'              	movf	_strtod$518,w
  3633  0250' 0080'              	movwf	___ftge@ff1
  3634  0251' 0835'              	movf	_strtod$518+1,w
  3635  0252' 0081'              	movwf	___ftge@ff1+1
  3636  0253' 0836'              	movf	_strtod$518+2,w
  3637  0254' 0082'              	movwf	___ftge@ff1+2
  3638  0255' 083F'              	movf	strtod@_u,w
  3639  0256' 0083'              	movwf	___ftge@ff2
  3640  0257' 0840'              	movf	strtod@_u+1,w
  3641  0258' 0084'              	movwf	___ftge@ff2+1
  3642  0259' 0841'              	movf	strtod@_u+2,w
  3643  025A' 0085'              	movwf	___ftge@ff2+2
  3644  025B' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftge
  3645  0260' 1803               	btfsc	3,0
  3646  0261' 2800'              	goto	l550
  3647  0262' 1283               	bcf	3,5	;RP0=0, select bank0
  3648  0263' 1303               	bcf	3,6	;RP1=0, select bank0
  3649  0264' 1C3D'              	btfss	strtod@flags,0
  3650  0265' 2800'              	goto	l4492
  3651  0266' 3000               	movlw	0
  3652  0267' 00B7'              	movwf	_strtod$519
  3653  0268' 3080               	movlw	128
  3654  0269' 00B8'              	movwf	_strtod$519+1
  3655  026A' 3000               	movlw	0
  3656  026B' 00B9'              	movwf	_strtod$519+2
  3657  026C' 0837'              	movf	_strtod$519,w
  3658  026D' 00A4'              	movwf	___ftneg@f1
  3659  026E' 0838'              	movf	_strtod$519+1,w
  3660  026F' 00A5'              	movwf	___ftneg@f1+1
  3661  0270' 0839'              	movf	_strtod$519+2,w
  3662  0271' 00A6'              	movwf	___ftneg@f1+2
  3663  0272' 120A' 118A' 2000'  	fcall	___ftneg
  3664  0275' 1283               	bcf	3,5	;RP0=0, select bank0
  3665  0276' 1303               	bcf	3,6	;RP1=0, select bank0
  3666  0277' 0824'              	movf	?___ftneg,w
  3667  0278' 00A7'              	movwf	?_strtod
  3668  0279' 0825'              	movf	?___ftneg+1,w
  3669  027A' 00A8'              	movwf	?_strtod+1
  3670  027B' 0826'              	movf	?___ftneg+2,w
  3671  027C' 00A9'              	movwf	?_strtod+2
  3672  027D' 0008               	return
  3673  027E'                    l4492:	
  3674  027E' 3000               	movlw	0
  3675  027F' 00A7'              	movwf	?_strtod
  3676  0280' 3080               	movlw	128
  3677  0281' 00A8'              	movwf	?_strtod+1
  3678  0282' 3000               	movlw	0
  3679  0283' 00A9'              	movwf	?_strtod+2
  3680  0284' 0008               	return
  3681  0285'                    l550:	
  3682  0285' 1283               	bcf	3,5	;RP0=0, select bank0
  3683  0286' 1303               	bcf	3,6	;RP1=0, select bank0
  3684  0287' 1C3D'              	btfss	strtod@flags,0
  3685  0288' 2800'              	goto	l4498
  3686  0289' 083F'              	movf	strtod@_u,w
  3687  028A' 00A4'              	movwf	___ftneg@f1
  3688  028B' 0840'              	movf	strtod@_u+1,w
  3689  028C' 00A5'              	movwf	___ftneg@f1+1
  3690  028D' 0841'              	movf	strtod@_u+2,w
  3691  028E' 00A6'              	movwf	___ftneg@f1+2
  3692  028F' 120A' 118A' 2000'  	fcall	___ftneg
  3693  0292' 1283               	bcf	3,5	;RP0=0, select bank0
  3694  0293' 1303               	bcf	3,6	;RP1=0, select bank0
  3695  0294' 0824'              	movf	?___ftneg,w
  3696  0295' 00BF'              	movwf	strtod@_u
  3697  0296' 0825'              	movf	?___ftneg+1,w
  3698  0297' 00C0'              	movwf	strtod@_u+1
  3699  0298' 0826'              	movf	?___ftneg+2,w
  3700  0299' 00C1'              	movwf	strtod@_u+2
  3701  029A'                    l4498:	
  3702  029A' 083F'              	movf	strtod@_u,w
  3703  029B' 00A7'              	movwf	?_strtod
  3704  029C' 0840'              	movf	strtod@_u+1,w
  3705  029D' 00A8'              	movwf	?_strtod+1
  3706  029E' 0841'              	movf	strtod@_u+2,w
  3707  029F' 00A9'              	movwf	?_strtod+2
  3708  02A0' 0008               	return
  3709  02A1'                    __end_of_strtod:	
  3710                           
  3711                           	psect	text9
  3712  0000'                    __ptext9:	
  3713 ;; *************** function _isspace *****************
  3714 ;; Defined at:
  3715 ;;		line 8 in file "D:\mplab\sources\common\isspace.c"
  3716 ;; Parameters:    Size  Location     Type
  3717 ;;  c               1    wreg     unsigned char 
  3718 ;; Auto vars:     Size  Location     Type
  3719 ;;  c               1    1[BANK0 ] unsigned char 
  3720 ;; Return value:  Size  Location     Type
  3721 ;;		None               void
  3722 ;; Registers used:
  3723 ;;		wreg, status,2, status,0
  3724 ;; Tracked objects:
  3725 ;;		On entry : 0/0
  3726 ;;		On exit  : 0/0
  3727 ;;		Unchanged: 0/0
  3728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3729 ;;      Params:         0       0       0       0       0
  3730 ;;      Locals:         0       2       0       0       0
  3731 ;;      Temps:          0       0       0       0       0
  3732 ;;      Totals:         0       2       0       0       0
  3733 ;;Total ram usage:        2 bytes
  3734 ;; Hardware stack levels used:    1
  3735 ;; Hardware stack levels required when called:    1
  3736 ;; This function calls:
  3737 ;;		Nothing
  3738 ;; This function is called by:
  3739 ;;		_strtod
  3740 ;; This function uses a non-reentrant model
  3741 ;;
  3742                           
  3743                           
  3744                           ;psect for function _isspace
  3745  0000'                    _isspace:	
  3746                           
  3747                           ;incstack = 0
  3748                           ; Regs used in _isspace: [wreg+status,2+status,0]
  3749                           ;isspace@c stored from wreg
  3750  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  3751  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  3752  0002' 0081'              	movwf	isspace@c
  3753  0003' 0180'              	clrf	_isspace$607
  3754  0004' 0A80'              	incf	_isspace$607,f
  3755  0005' 3020               	movlw	32
  3756  0006' 0601'              	xorwf	isspace@c,w
  3757  0007' 1903               	btfsc	3,2
  3758  0008' 2800'              	goto	l3962
  3759  0009' 300E               	movlw	14
  3760  000A' 0201'              	subwf	isspace@c,w
  3761  000B' 1803               	skipnc
  3762  000C' 2800'              	goto	l3960
  3763  000D' 3009               	movlw	9
  3764  000E' 0201'              	subwf	isspace@c,w
  3765  000F' 1803               	skipnc
  3766  0010' 2800'              	goto	l3962
  3767  0011'                    l3960:	
  3768  0011' 0180'              	clrf	_isspace$607
  3769  0012'                    l3962:	
  3770  0012' 0C00'              	rrf	_isspace$607,w
  3771  0013' 0008               	return
  3772  0014'                    __end_of_isspace:	
  3773                           
  3774                           	psect	text10
  3775  0000'                    __ptext10:	
  3776 ;; *************** function ___lmul *****************
  3777 ;; Defined at:
  3778 ;;		line 15 in file "D:\mplab\sources\common\Umul32.c"
  3779 ;; Parameters:    Size  Location     Type
  3780 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3781 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3782 ;; Auto vars:     Size  Location     Type
  3783 ;;  product         4    9[BANK0 ] unsigned long 
  3784 ;; Return value:  Size  Location     Type
  3785 ;;                  4    0[BANK0 ] unsigned long 
  3786 ;; Registers used:
  3787 ;;		wreg, status,2, status,0
  3788 ;; Tracked objects:
  3789 ;;		On entry : 0/0
  3790 ;;		On exit  : 0/0
  3791 ;;		Unchanged: 0/0
  3792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3793 ;;      Params:         0       8       0       0       0
  3794 ;;      Locals:         0       4       0       0       0
  3795 ;;      Temps:          0       1       0       0       0
  3796 ;;      Totals:         0      13       0       0       0
  3797 ;;Total ram usage:       13 bytes
  3798 ;; Hardware stack levels used:    1
  3799 ;; Hardware stack levels required when called:    1
  3800 ;; This function calls:
  3801 ;;		Nothing
  3802 ;; This function is called by:
  3803 ;;		_strtod
  3804 ;;		_atol
  3805 ;; This function uses a non-reentrant model
  3806 ;;
  3807                           
  3808                           
  3809                           ;psect for function ___lmul
  3810  0000'                    ___lmul:	
  3811                           
  3812                           ;incstack = 0
  3813                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3814  0000' 3000               	movlw	0
  3815  0001' 1283               	bcf	3,5	;RP0=0, select bank0
  3816  0002' 1303               	bcf	3,6	;RP1=0, select bank0
  3817  0003' 008C'              	movwf	___lmul@product+3
  3818  0004' 3000               	movlw	0
  3819  0005' 008B'              	movwf	___lmul@product+2
  3820  0006' 3000               	movlw	0
  3821  0007' 008A'              	movwf	___lmul@product+1
  3822  0008' 3000               	movlw	0
  3823  0009' 0089'              	movwf	___lmul@product
  3824  000A'                    l3924:	
  3825  000A' 1C00'              	btfss	___lmul@multiplier,0
  3826  000B' 2800'              	goto	l3928
  3827  000C' 0804'              	movf	___lmul@multiplicand,w
  3828  000D' 0789'              	addwf	___lmul@product,f
  3829  000E' 0805'              	movf	___lmul@multiplicand+1,w
  3830  000F' 1103               	clrz
  3831  0010' 1803               	skipnc
  3832  0011' 3E01               	addlw	1
  3833  0012' 1D03               	btfss	3,2
  3834  0013' 078A'              	addwf	___lmul@product+1,f
  3835  0014' 0806'              	movf	___lmul@multiplicand+2,w
  3836  0015' 1103               	clrz
  3837  0016' 1803               	skipnc
  3838  0017' 3E01               	addlw	1
  3839  0018' 1D03               	btfss	3,2
  3840  0019' 078B'              	addwf	___lmul@product+2,f
  3841  001A' 0807'              	movf	___lmul@multiplicand+3,w
  3842  001B' 1103               	clrz
  3843  001C' 1803               	skipnc
  3844  001D' 3E01               	addlw	1
  3845  001E' 1D03               	btfss	3,2
  3846  001F' 078C'              	addwf	___lmul@product+3,f
  3847  0020'                    l3928:	
  3848  0020' 3001               	movlw	1
  3849  0021' 0088'              	movwf	??___lmul
  3850  0022'                    u5845:	
  3851  0022' 1003               	clrc
  3852  0023' 0D84'              	rlf	___lmul@multiplicand,f
  3853  0024' 0D85'              	rlf	___lmul@multiplicand+1,f
  3854  0025' 0D86'              	rlf	___lmul@multiplicand+2,f
  3855  0026' 0D87'              	rlf	___lmul@multiplicand+3,f
  3856  0027' 0B88'              	decfsz	??___lmul,f
  3857  0028' 2800'              	goto	u5845
  3858  0029' 3001               	movlw	1
  3859  002A'                    u5855:	
  3860  002A' 1003               	clrc
  3861  002B' 0C83'              	rrf	___lmul@multiplier+3,f
  3862  002C' 0C82'              	rrf	___lmul@multiplier+2,f
  3863  002D' 0C81'              	rrf	___lmul@multiplier+1,f
  3864  002E' 0C80'              	rrf	___lmul@multiplier,f
  3865  002F' 3EFF               	addlw	-1
  3866  0030' 1D03               	skipz
  3867  0031' 2800'              	goto	u5855
  3868  0032' 0803'              	movf	___lmul@multiplier+3,w
  3869  0033' 0402'              	iorwf	___lmul@multiplier+2,w
  3870  0034' 0401'              	iorwf	___lmul@multiplier+1,w
  3871  0035' 0400'              	iorwf	___lmul@multiplier,w
  3872  0036' 1D03               	skipz
  3873  0037' 2800'              	goto	l3924
  3874  0038' 080C'              	movf	___lmul@product+3,w
  3875  0039' 0083'              	movwf	?___lmul+3
  3876  003A' 080B'              	movf	___lmul@product+2,w
  3877  003B' 0082'              	movwf	?___lmul+2
  3878  003C' 080A'              	movf	___lmul@product+1,w
  3879  003D' 0081'              	movwf	?___lmul+1
  3880  003E' 0809'              	movf	___lmul@product,w
  3881  003F' 0080'              	movwf	?___lmul
  3882  0040' 0008               	return
  3883  0041'                    __end_of___lmul:	
  3884                           
  3885                           	psect	text11
  3886  0000'                    __ptext11:	
  3887 ;; *************** function ___altoft *****************
  3888 ;; Defined at:
  3889 ;;		line 42 in file "D:\mplab\sources\common\altoft.c"
  3890 ;; Parameters:    Size  Location     Type
  3891 ;;  c               4    8[BANK0 ] long 
  3892 ;; Auto vars:     Size  Location     Type
  3893 ;;  sign            1   15[BANK0 ] unsigned char 
  3894 ;;  exp             1   14[BANK0 ] unsigned char 
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  3    8[BANK0 ] float 
  3897 ;; Registers used:
  3898 ;;		wreg, status,2, status,0, pclath, cstack
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3904 ;;      Params:         0       4       0       0       0
  3905 ;;      Locals:         0       2       0       0       0
  3906 ;;      Temps:          0       2       0       0       0
  3907 ;;      Totals:         0       8       0       0       0
  3908 ;;Total ram usage:        8 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; Hardware stack levels required when called:    2
  3911 ;; This function calls:
  3912 ;;		___ftpack
  3913 ;; This function is called by:
  3914 ;;		_strtod
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           
  3919                           ;psect for function ___altoft
  3920  0000'                    ___altoft:	
  3921                           
  3922                           ;incstack = 0
  3923                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  3924  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  3925  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  3926  0002' 018F'              	clrf	___altoft@sign
  3927  0003' 308E               	movlw	142
  3928  0004' 008C'              	movwf	??___altoft
  3929  0005' 080C'              	movf	??___altoft,w
  3930  0006' 008E'              	movwf	___altoft@exp
  3931  0007' 1F8B'              	btfss	___altoft@c+3,7
  3932  0008' 2800'              	goto	l3946
  3933  0009' 0988'              	comf	___altoft@c,f
  3934  000A' 0989'              	comf	___altoft@c+1,f
  3935  000B' 098A'              	comf	___altoft@c+2,f
  3936  000C' 098B'              	comf	___altoft@c+3,f
  3937  000D' 0A88'              	incf	___altoft@c,f
  3938  000E' 1903               	skipnz
  3939  000F' 0A89'              	incf	___altoft@c+1,f
  3940  0010' 1903               	skipnz
  3941  0011' 0A8A'              	incf	___altoft@c+2,f
  3942  0012' 1903               	skipnz
  3943  0013' 0A8B'              	incf	___altoft@c+3,f
  3944  0014' 018F'              	clrf	___altoft@sign
  3945  0015' 0A8F'              	incf	___altoft@sign,f
  3946  0016'                    l3946:	
  3947  0016' 30FF               	movlw	255
  3948  0017' 050B'              	andwf	___altoft@c+3,w
  3949  0018' 1903               	btfsc	3,2
  3950  0019' 2800'              	goto	l3948
  3951  001A' 3001               	movlw	1
  3952  001B'                    u5885:	
  3953  001B' 1003               	clrc
  3954  001C' 0C8B'              	rrf	___altoft@c+3,f
  3955  001D' 0C8A'              	rrf	___altoft@c+2,f
  3956  001E' 0C89'              	rrf	___altoft@c+1,f
  3957  001F' 0C88'              	rrf	___altoft@c,f
  3958  0020' 3EFF               	addlw	-1
  3959  0021' 1D03               	skipz
  3960  0022' 2800'              	goto	u5885
  3961  0023' 3001               	movlw	1
  3962  0024' 008C'              	movwf	??___altoft
  3963  0025' 080C'              	movf	??___altoft,w
  3964  0026' 078E'              	addwf	___altoft@exp,f
  3965  0027' 2800'              	goto	l3946
  3966  0028'                    l3948:	
  3967  0028' 0808'              	movf	___altoft@c,w
  3968  0029' 0080'              	movwf	___ftpack@arg
  3969  002A' 0809'              	movf	___altoft@c+1,w
  3970  002B' 0081'              	movwf	___ftpack@arg+1
  3971  002C' 080A'              	movf	___altoft@c+2,w
  3972  002D' 0082'              	movwf	___ftpack@arg+2
  3973  002E' 080E'              	movf	___altoft@exp,w
  3974  002F' 008C'              	movwf	??___altoft
  3975  0030' 080C'              	movf	??___altoft,w
  3976  0031' 0083'              	movwf	___ftpack@exp
  3977  0032' 080F'              	movf	___altoft@sign,w
  3978  0033' 008D'              	movwf	??___altoft+1
  3979  0034' 080D'              	movf	??___altoft+1,w
  3980  0035' 0084'              	movwf	___ftpack@sign
  3981  0036' 120A' 118A' 2000'  	fcall	___ftpack
  3982  0039' 1283               	bcf	3,5	;RP0=0, select bank0
  3983  003A' 1303               	bcf	3,6	;RP1=0, select bank0
  3984  003B' 0800'              	movf	?___ftpack,w
  3985  003C' 0088'              	movwf	?___altoft
  3986  003D' 0801'              	movf	?___ftpack+1,w
  3987  003E' 0089'              	movwf	?___altoft+1
  3988  003F' 0802'              	movf	?___ftpack+2,w
  3989  0040' 008A'              	movwf	?___altoft+2
  3990  0041' 0008               	return
  3991  0042'                    __end_of___altoft:	
  3992                           
  3993                           	psect	text12
  3994  0000'                    __ptext12:	
  3995 ;; *************** function _convert_to_degrees *****************
  3996 ;; Defined at:
  3997 ;;		line 235 in file "GPS.c"
  3998 ;; Parameters:    Size  Location     Type
  3999 ;;  NMEA_lat_lon    3   65[BANK0 ] float 
  4000 ;; Auto vars:     Size  Location     Type
  4001 ;;  decimal         3   76[BANK0 ] float 
  4002 ;;  dec_deg         3   71[BANK0 ] float 
  4003 ;;  minutes         3   68[BANK0 ] float 
  4004 ;;  position        3    0        float 
  4005 ;;  degrees         2   74[BANK0 ] int 
  4006 ;; Return value:  Size  Location     Type
  4007 ;;                  3   65[BANK0 ] float 
  4008 ;; Registers used:
  4009 ;;		wreg, status,2, status,0, pclath, cstack
  4010 ;; Tracked objects:
  4011 ;;		On entry : 0/0
  4012 ;;		On exit  : 0/0
  4013 ;;		Unchanged: 0/0
  4014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4015 ;;      Params:         0       3       0       0       0
  4016 ;;      Locals:         0      11       0       0       0
  4017 ;;      Temps:          0       0       0       0       0
  4018 ;;      Totals:         0      14       0       0       0
  4019 ;;Total ram usage:       14 bytes
  4020 ;; Hardware stack levels used:    1
  4021 ;; Hardware stack levels required when called:    3
  4022 ;; This function calls:
  4023 ;;		___awtoft
  4024 ;;		___ftadd
  4025 ;;		___ftdiv
  4026 ;;		___ftmul
  4027 ;;		___ftneg
  4028 ;;		___fttol
  4029 ;; This function is called by:
  4030 ;;		_main
  4031 ;; This function uses a non-reentrant model
  4032 ;;
  4033                           
  4034                           
  4035                           ;psect for function _convert_to_degrees
  4036  0000'                    _convert_to_degrees:	
  4037                           
  4038                           ;GPS.c: 238: float minutes, dec_deg, decimal;
  4039                           ;GPS.c: 240: int degrees;
  4040                           ;GPS.c: 242: float position;
  4041                           ;GPS.c: 244: degrees = (int)(NMEA_lat_long/100.00);
  4042                           
  4043                           ;incstack = 0
  4044                           ; Regs used in _convert_to_degrees: [wreg+status,2+status,0+pclath+cstack]
  4045  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  4046  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  4047  0002' 0841'              	movf	convert_to_degrees@NMEA_lat_long,w
  4048  0003' 008B'              	movwf	___ftdiv@f1
  4049  0004' 0842'              	movf	convert_to_degrees@NMEA_lat_long+1,w
  4050  0005' 008C'              	movwf	___ftdiv@f1+1
  4051  0006' 0843'              	movf	convert_to_degrees@NMEA_lat_long+2,w
  4052  0007' 008D'              	movwf	___ftdiv@f1+2
  4053  0008' 3000               	movlw	0
  4054  0009' 0088'              	movwf	___ftdiv@f2
  4055  000A' 30C8               	movlw	200
  4056  000B' 0089'              	movwf	___ftdiv@f2+1
  4057  000C' 3042               	movlw	66
  4058  000D' 008A'              	movwf	___ftdiv@f2+2
  4059  000E' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftdiv
  4060  0013' 1283               	bcf	3,5	;RP0=0, select bank0
  4061  0014' 1303               	bcf	3,6	;RP1=0, select bank0
  4062  0015' 0808'              	movf	?___ftdiv,w
  4063  0016' 00AD'              	movwf	___fttol@f1
  4064  0017' 0809'              	movf	?___ftdiv+1,w
  4065  0018' 00AE'              	movwf	___fttol@f1+1
  4066  0019' 080A'              	movf	?___ftdiv+2,w
  4067  001A' 00AF'              	movwf	___fttol@f1+2
  4068  001B' 120A' 118A' 2000' 120A' 118A' 	fcall	___fttol
  4069  0020' 1283               	bcf	3,5	;RP0=0, select bank0
  4070  0021' 1303               	bcf	3,6	;RP1=0, select bank0
  4071  0022' 082E'              	movf	?___fttol+1,w
  4072  0023' 00CB'              	movwf	convert_to_degrees@degrees+1
  4073  0024' 082D'              	movf	?___fttol,w
  4074  0025' 00CA'              	movwf	convert_to_degrees@degrees
  4075                           
  4076                           ;GPS.c: 245: minutes = NMEA_lat_long - degrees*100.00;
  4077  0026' 0841'              	movf	convert_to_degrees@NMEA_lat_long,w
  4078  0027' 00B4'              	movwf	___ftadd@f1
  4079  0028' 0842'              	movf	convert_to_degrees@NMEA_lat_long+1,w
  4080  0029' 00B5'              	movwf	___ftadd@f1+1
  4081  002A' 0843'              	movf	convert_to_degrees@NMEA_lat_long+2,w
  4082  002B' 00B6'              	movwf	___ftadd@f1+2
  4083  002C' 084B'              	movf	convert_to_degrees@degrees+1,w
  4084  002D' 0089'              	movwf	___awtoft@c+1
  4085  002E' 084A'              	movf	convert_to_degrees@degrees,w
  4086  002F' 0088'              	movwf	___awtoft@c
  4087  0030' 120A' 118A' 2000' 120A' 118A' 	fcall	___awtoft
  4088  0035' 1283               	bcf	3,5	;RP0=0, select bank0
  4089  0036' 1303               	bcf	3,6	;RP1=0, select bank0
  4090  0037' 0808'              	movf	?___awtoft,w
  4091  0038' 0097'              	movwf	___ftmul@f2
  4092  0039' 0809'              	movf	?___awtoft+1,w
  4093  003A' 0098'              	movwf	___ftmul@f2+1
  4094  003B' 080A'              	movf	?___awtoft+2,w
  4095  003C' 0099'              	movwf	___ftmul@f2+2
  4096  003D' 3000               	movlw	0
  4097  003E' 0094'              	movwf	___ftmul@f1
  4098  003F' 30C8               	movlw	200
  4099  0040' 0095'              	movwf	___ftmul@f1+1
  4100  0041' 3042               	movlw	66
  4101  0042' 0096'              	movwf	___ftmul@f1+2
  4102  0043' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftmul
  4103  0048' 1283               	bcf	3,5	;RP0=0, select bank0
  4104  0049' 1303               	bcf	3,6	;RP1=0, select bank0
  4105  004A' 0814'              	movf	?___ftmul,w
  4106  004B' 00A4'              	movwf	___ftneg@f1
  4107  004C' 0815'              	movf	?___ftmul+1,w
  4108  004D' 00A5'              	movwf	___ftneg@f1+1
  4109  004E' 0816'              	movf	?___ftmul+2,w
  4110  004F' 00A6'              	movwf	___ftneg@f1+2
  4111  0050' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftneg
  4112  0055' 1283               	bcf	3,5	;RP0=0, select bank0
  4113  0056' 1303               	bcf	3,6	;RP1=0, select bank0
  4114  0057' 0824'              	movf	?___ftneg,w
  4115  0058' 00B7'              	movwf	___ftadd@f2
  4116  0059' 0825'              	movf	?___ftneg+1,w
  4117  005A' 00B8'              	movwf	___ftadd@f2+1
  4118  005B' 0826'              	movf	?___ftneg+2,w
  4119  005C' 00B9'              	movwf	___ftadd@f2+2
  4120  005D' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftadd
  4121  0062' 1283               	bcf	3,5	;RP0=0, select bank0
  4122  0063' 1303               	bcf	3,6	;RP1=0, select bank0
  4123  0064' 0834'              	movf	?___ftadd,w
  4124  0065' 00C4'              	movwf	convert_to_degrees@minutes
  4125  0066' 0835'              	movf	?___ftadd+1,w
  4126  0067' 00C5'              	movwf	convert_to_degrees@minutes+1
  4127  0068' 0836'              	movf	?___ftadd+2,w
  4128  0069' 00C6'              	movwf	convert_to_degrees@minutes+2
  4129                           
  4130                           ;GPS.c: 246: dec_deg = minutes / 60.00;
  4131  006A' 3000               	movlw	0
  4132  006B' 0088'              	movwf	___ftdiv@f2
  4133  006C' 3070               	movlw	112
  4134  006D' 0089'              	movwf	___ftdiv@f2+1
  4135  006E' 3042               	movlw	66
  4136  006F' 008A'              	movwf	___ftdiv@f2+2
  4137  0070' 0844'              	movf	convert_to_degrees@minutes,w
  4138  0071' 008B'              	movwf	___ftdiv@f1
  4139  0072' 0845'              	movf	convert_to_degrees@minutes+1,w
  4140  0073' 008C'              	movwf	___ftdiv@f1+1
  4141  0074' 0846'              	movf	convert_to_degrees@minutes+2,w
  4142  0075' 008D'              	movwf	___ftdiv@f1+2
  4143  0076' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftdiv
  4144  007B' 1283               	bcf	3,5	;RP0=0, select bank0
  4145  007C' 1303               	bcf	3,6	;RP1=0, select bank0
  4146  007D' 0808'              	movf	?___ftdiv,w
  4147  007E' 00C7'              	movwf	convert_to_degrees@dec_deg
  4148  007F' 0809'              	movf	?___ftdiv+1,w
  4149  0080' 00C8'              	movwf	convert_to_degrees@dec_deg+1
  4150  0081' 080A'              	movf	?___ftdiv+2,w
  4151  0082' 00C9'              	movwf	convert_to_degrees@dec_deg+2
  4152                           
  4153                           ;GPS.c: 247: decimal = degrees + dec_deg;
  4154  0083' 0847'              	movf	convert_to_degrees@dec_deg,w
  4155  0084' 00B4'              	movwf	___ftadd@f1
  4156  0085' 0848'              	movf	convert_to_degrees@dec_deg+1,w
  4157  0086' 00B5'              	movwf	___ftadd@f1+1
  4158  0087' 0849'              	movf	convert_to_degrees@dec_deg+2,w
  4159  0088' 00B6'              	movwf	___ftadd@f1+2
  4160  0089' 084B'              	movf	convert_to_degrees@degrees+1,w
  4161  008A' 0089'              	movwf	___awtoft@c+1
  4162  008B' 084A'              	movf	convert_to_degrees@degrees,w
  4163  008C' 0088'              	movwf	___awtoft@c
  4164  008D' 120A' 118A' 2000' 120A' 118A' 	fcall	___awtoft
  4165  0092' 1283               	bcf	3,5	;RP0=0, select bank0
  4166  0093' 1303               	bcf	3,6	;RP1=0, select bank0
  4167  0094' 0808'              	movf	?___awtoft,w
  4168  0095' 00B7'              	movwf	___ftadd@f2
  4169  0096' 0809'              	movf	?___awtoft+1,w
  4170  0097' 00B8'              	movwf	___ftadd@f2+1
  4171  0098' 080A'              	movf	?___awtoft+2,w
  4172  0099' 00B9'              	movwf	___ftadd@f2+2
  4173  009A' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftadd
  4174  009F' 1283               	bcf	3,5	;RP0=0, select bank0
  4175  00A0' 1303               	bcf	3,6	;RP1=0, select bank0
  4176  00A1' 0834'              	movf	?___ftadd,w
  4177  00A2' 00CC'              	movwf	convert_to_degrees@decimal
  4178  00A3' 0835'              	movf	?___ftadd+1,w
  4179  00A4' 00CD'              	movwf	convert_to_degrees@decimal+1
  4180  00A5' 0836'              	movf	?___ftadd+2,w
  4181  00A6' 00CE'              	movwf	convert_to_degrees@decimal+2
  4182                           
  4183                           ;GPS.c: 248: if (N_S == 'S' || E_W == 'W') {
  4184  00A7' 3053               	movlw	83
  4185  00A8' 1683               	bsf	3,5	;RP0=1, select bank1
  4186  00A9' 1303               	bcf	3,6	;RP1=0, select bank1
  4187  00AA' 0600'              	xorwf	_N_S^(0+128),w
  4188  00AB' 1903               	btfsc	3,2
  4189  00AC' 2800'              	goto	l4990
  4190  00AD' 3057               	movlw	87
  4191  00AE' 0600'              	xorwf	_E_W^(0+128),w
  4192  00AF' 1D03               	btfss	3,2
  4193  00B0' 2800'              	goto	l4992
  4194  00B1'                    l4990:	
  4195                           
  4196                           ;GPS.c: 249: decimal *= -1;
  4197  00B1' 3000               	movlw	0
  4198  00B2' 1283               	bcf	3,5	;RP0=0, select bank0
  4199  00B3' 1303               	bcf	3,6	;RP1=0, select bank0
  4200  00B4' 0094'              	movwf	___ftmul@f1
  4201  00B5' 3080               	movlw	128
  4202  00B6' 0095'              	movwf	___ftmul@f1+1
  4203  00B7' 30BF               	movlw	191
  4204  00B8' 0096'              	movwf	___ftmul@f1+2
  4205  00B9' 084C'              	movf	convert_to_degrees@decimal,w
  4206  00BA' 0097'              	movwf	___ftmul@f2
  4207  00BB' 084D'              	movf	convert_to_degrees@decimal+1,w
  4208  00BC' 0098'              	movwf	___ftmul@f2+1
  4209  00BD' 084E'              	movf	convert_to_degrees@decimal+2,w
  4210  00BE' 0099'              	movwf	___ftmul@f2+2
  4211  00BF' 120A' 118A' 2000'  	fcall	___ftmul
  4212  00C2' 1283               	bcf	3,5	;RP0=0, select bank0
  4213  00C3' 1303               	bcf	3,6	;RP1=0, select bank0
  4214  00C4' 0814'              	movf	?___ftmul,w
  4215  00C5' 00CC'              	movwf	convert_to_degrees@decimal
  4216  00C6' 0815'              	movf	?___ftmul+1,w
  4217  00C7' 00CD'              	movwf	convert_to_degrees@decimal+1
  4218  00C8' 0816'              	movf	?___ftmul+2,w
  4219  00C9' 00CE'              	movwf	convert_to_degrees@decimal+2
  4220  00CA'                    l4992:	
  4221                           
  4222                           ;GPS.c: 250: }
  4223                           ;GPS.c: 252: return decimal;
  4224  00CA' 1283               	bcf	3,5	;RP0=0, select bank0
  4225  00CB' 084C'              	movf	convert_to_degrees@decimal,w
  4226  00CC' 00C1'              	movwf	?_convert_to_degrees
  4227  00CD' 084D'              	movf	convert_to_degrees@decimal+1,w
  4228  00CE' 00C2'              	movwf	?_convert_to_degrees+1
  4229  00CF' 084E'              	movf	convert_to_degrees@decimal+2,w
  4230  00D0' 00C3'              	movwf	?_convert_to_degrees+2
  4231  00D1' 0008               	return
  4232  00D2'                    __end_of_convert_to_degrees:	
  4233                           
  4234                           	psect	text13
  4235  0000'                    __ptext13:	
  4236 ;; *************** function ___ftdiv *****************
  4237 ;; Defined at:
  4238 ;;		line 56 in file "D:\mplab\sources\common\ftdiv.c"
  4239 ;; Parameters:    Size  Location     Type
  4240 ;;  f2              3    8[BANK0 ] float 
  4241 ;;  f1              3   11[BANK0 ] float 
  4242 ;; Auto vars:     Size  Location     Type
  4243 ;;  f3              3   19[BANK0 ] float 
  4244 ;;  sign            1   23[BANK0 ] unsigned char 
  4245 ;;  exp             1   22[BANK0 ] unsigned char 
  4246 ;;  cntr            1   18[BANK0 ] unsigned char 
  4247 ;; Return value:  Size  Location     Type
  4248 ;;                  3    8[BANK0 ] float 
  4249 ;; Registers used:
  4250 ;;		wreg, status,2, status,0, pclath, cstack
  4251 ;; Tracked objects:
  4252 ;;		On entry : 0/0
  4253 ;;		On exit  : 0/0
  4254 ;;		Unchanged: 0/0
  4255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4256 ;;      Params:         0       6       0       0       0
  4257 ;;      Locals:         0       6       0       0       0
  4258 ;;      Temps:          0       4       0       0       0
  4259 ;;      Totals:         0      16       0       0       0
  4260 ;;Total ram usage:       16 bytes
  4261 ;; Hardware stack levels used:    1
  4262 ;; Hardware stack levels required when called:    2
  4263 ;; This function calls:
  4264 ;;		___ftpack
  4265 ;; This function is called by:
  4266 ;;		_convert_to_degrees
  4267 ;;		_strtod
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           
  4272                           ;psect for function ___ftdiv
  4273  0000'                    ___ftdiv:	
  4274                           
  4275                           ;incstack = 0
  4276                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  4277  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  4278  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  4279  0002' 080B'              	movf	___ftdiv@f1,w
  4280  0003' 008E'              	movwf	??___ftdiv
  4281  0004' 080C'              	movf	___ftdiv@f1+1,w
  4282  0005' 008F'              	movwf	??___ftdiv+1
  4283  0006' 080D'              	movf	___ftdiv@f1+2,w
  4284  0007' 0090'              	movwf	??___ftdiv+2
  4285  0008' 1003               	clrc
  4286  0009' 0D0F'              	rlf	??___ftdiv+1,w
  4287  000A' 0D10'              	rlf	??___ftdiv+2,w
  4288  000B' 0091'              	movwf	??___ftdiv+3
  4289  000C' 0811'              	movf	??___ftdiv+3,w
  4290  000D' 0096'              	movwf	___ftdiv@exp
  4291  000E' 0816'              	movf	___ftdiv@exp,w
  4292  000F' 1D03               	btfss	3,2
  4293  0010' 2800'              	goto	l4124
  4294  0011' 3000               	movlw	0
  4295  0012' 0088'              	movwf	?___ftdiv
  4296  0013' 3000               	movlw	0
  4297  0014' 0089'              	movwf	?___ftdiv+1
  4298  0015' 3000               	movlw	0
  4299  0016' 008A'              	movwf	?___ftdiv+2
  4300  0017' 0008               	return
  4301  0018'                    l4124:	
  4302  0018' 0808'              	movf	___ftdiv@f2,w
  4303  0019' 008E'              	movwf	??___ftdiv
  4304  001A' 0809'              	movf	___ftdiv@f2+1,w
  4305  001B' 008F'              	movwf	??___ftdiv+1
  4306  001C' 080A'              	movf	___ftdiv@f2+2,w
  4307  001D' 0090'              	movwf	??___ftdiv+2
  4308  001E' 1003               	clrc
  4309  001F' 0D0F'              	rlf	??___ftdiv+1,w
  4310  0020' 0D10'              	rlf	??___ftdiv+2,w
  4311  0021' 0091'              	movwf	??___ftdiv+3
  4312  0022' 0811'              	movf	??___ftdiv+3,w
  4313  0023' 0097'              	movwf	___ftdiv@sign
  4314  0024' 0817'              	movf	___ftdiv@sign,w
  4315  0025' 1D03               	btfss	3,2
  4316  0026' 2800'              	goto	l4130
  4317  0027' 3000               	movlw	0
  4318  0028' 0088'              	movwf	?___ftdiv
  4319  0029' 3000               	movlw	0
  4320  002A' 0089'              	movwf	?___ftdiv+1
  4321  002B' 3000               	movlw	0
  4322  002C' 008A'              	movwf	?___ftdiv+2
  4323  002D' 0008               	return
  4324  002E'                    l4130:	
  4325  002E' 3000               	movlw	0
  4326  002F' 0093'              	movwf	___ftdiv@f3
  4327  0030' 3000               	movlw	0
  4328  0031' 0094'              	movwf	___ftdiv@f3+1
  4329  0032' 3000               	movlw	0
  4330  0033' 0095'              	movwf	___ftdiv@f3+2
  4331  0034' 3089               	movlw	137
  4332  0035' 0717'              	addwf	___ftdiv@sign,w
  4333  0036' 008E'              	movwf	??___ftdiv
  4334  0037' 080E'              	movf	??___ftdiv,w
  4335  0038' 0296'              	subwf	___ftdiv@exp,f
  4336  0039' 080B'              	movf	___ftdiv@f1,w
  4337  003A' 008E'              	movwf	??___ftdiv
  4338  003B' 080C'              	movf	___ftdiv@f1+1,w
  4339  003C' 008F'              	movwf	??___ftdiv+1
  4340  003D' 080D'              	movf	___ftdiv@f1+2,w
  4341  003E' 0090'              	movwf	??___ftdiv+2
  4342  003F' 3010               	movlw	16
  4343  0040'                    u6385:	
  4344  0040' 1003               	clrc
  4345  0041' 0C90'              	rrf	??___ftdiv+2,f
  4346  0042' 0C8F'              	rrf	??___ftdiv+1,f
  4347  0043' 0C8E'              	rrf	??___ftdiv,f
  4348  0044' 3EFF               	addlw	-1
  4349  0045' 1D03               	skipz
  4350  0046' 2800'              	goto	u6385
  4351  0047' 080E'              	movf	??___ftdiv,w
  4352  0048' 0091'              	movwf	??___ftdiv+3
  4353  0049' 0811'              	movf	??___ftdiv+3,w
  4354  004A' 0097'              	movwf	___ftdiv@sign
  4355  004B' 0808'              	movf	___ftdiv@f2,w
  4356  004C' 008E'              	movwf	??___ftdiv
  4357  004D' 0809'              	movf	___ftdiv@f2+1,w
  4358  004E' 008F'              	movwf	??___ftdiv+1
  4359  004F' 080A'              	movf	___ftdiv@f2+2,w
  4360  0050' 0090'              	movwf	??___ftdiv+2
  4361  0051' 3010               	movlw	16
  4362  0052'                    u6395:	
  4363  0052' 1003               	clrc
  4364  0053' 0C90'              	rrf	??___ftdiv+2,f
  4365  0054' 0C8F'              	rrf	??___ftdiv+1,f
  4366  0055' 0C8E'              	rrf	??___ftdiv,f
  4367  0056' 3EFF               	addlw	-1
  4368  0057' 1D03               	skipz
  4369  0058' 2800'              	goto	u6395
  4370  0059' 080E'              	movf	??___ftdiv,w
  4371  005A' 0091'              	movwf	??___ftdiv+3
  4372  005B' 0811'              	movf	??___ftdiv+3,w
  4373  005C' 0697'              	xorwf	___ftdiv@sign,f
  4374  005D' 3080               	movlw	128
  4375  005E' 008E'              	movwf	??___ftdiv
  4376  005F' 080E'              	movf	??___ftdiv,w
  4377  0060' 0597'              	andwf	___ftdiv@sign,f
  4378  0061' 178C'              	bsf	___ftdiv@f1+1,7
  4379  0062' 30FF               	movlw	255
  4380  0063' 058B'              	andwf	___ftdiv@f1,f
  4381  0064' 30FF               	movlw	255
  4382  0065' 058C'              	andwf	___ftdiv@f1+1,f
  4383  0066' 3000               	movlw	0
  4384  0067' 058D'              	andwf	___ftdiv@f1+2,f
  4385  0068' 1789'              	bsf	___ftdiv@f2+1,7
  4386  0069' 30FF               	movlw	255
  4387  006A' 0588'              	andwf	___ftdiv@f2,f
  4388  006B' 30FF               	movlw	255
  4389  006C' 0589'              	andwf	___ftdiv@f2+1,f
  4390  006D' 3000               	movlw	0
  4391  006E' 058A'              	andwf	___ftdiv@f2+2,f
  4392  006F' 3018               	movlw	24
  4393  0070' 008E'              	movwf	??___ftdiv
  4394  0071' 080E'              	movf	??___ftdiv,w
  4395  0072' 0092'              	movwf	___ftdiv@cntr
  4396  0073'                    l4144:	
  4397  0073' 3001               	movlw	1
  4398  0074'                    u6405:	
  4399  0074' 1003               	clrc
  4400  0075' 0D93'              	rlf	___ftdiv@f3,f
  4401  0076' 0D94'              	rlf	___ftdiv@f3+1,f
  4402  0077' 0D95'              	rlf	___ftdiv@f3+2,f
  4403  0078' 3EFF               	addlw	-1
  4404  0079' 1D03               	skipz
  4405  007A' 2800'              	goto	u6405
  4406  007B' 080A'              	movf	___ftdiv@f2+2,w
  4407  007C' 020D'              	subwf	___ftdiv@f1+2,w
  4408  007D' 1D03               	skipz
  4409  007E' 2800'              	goto	u6415
  4410  007F' 0809'              	movf	___ftdiv@f2+1,w
  4411  0080' 020C'              	subwf	___ftdiv@f1+1,w
  4412  0081' 1D03               	skipz
  4413  0082' 2800'              	goto	u6415
  4414  0083' 0808'              	movf	___ftdiv@f2,w
  4415  0084' 020B'              	subwf	___ftdiv@f1,w
  4416  0085'                    u6415:	
  4417  0085' 1C03               	skipc
  4418  0086' 2800'              	goto	l4152
  4419  0087' 0808'              	movf	___ftdiv@f2,w
  4420  0088' 028B'              	subwf	___ftdiv@f1,f
  4421  0089' 0809'              	movf	___ftdiv@f2+1,w
  4422  008A' 1C03               	skipc
  4423  008B' 0F09'              	incfsz	___ftdiv@f2+1,w
  4424  008C' 028C'              	subwf	___ftdiv@f1+1,f
  4425  008D' 080A'              	movf	___ftdiv@f2+2,w
  4426  008E' 1C03               	skipc
  4427  008F' 0A0A'              	incf	___ftdiv@f2+2,w
  4428  0090' 028D'              	subwf	___ftdiv@f1+2,f
  4429  0091' 1413'              	bsf	___ftdiv@f3,0
  4430  0092'                    l4152:	
  4431  0092' 3001               	movlw	1
  4432  0093'                    u6425:	
  4433  0093' 1003               	clrc
  4434  0094' 0D8B'              	rlf	___ftdiv@f1,f
  4435  0095' 0D8C'              	rlf	___ftdiv@f1+1,f
  4436  0096' 0D8D'              	rlf	___ftdiv@f1+2,f
  4437  0097' 3EFF               	addlw	-1
  4438  0098' 1D03               	skipz
  4439  0099' 2800'              	goto	u6425
  4440  009A' 3001               	movlw	1
  4441  009B' 0292'              	subwf	___ftdiv@cntr,f
  4442  009C' 1D03               	btfss	3,2
  4443  009D' 2800'              	goto	l4144
  4444  009E' 0813'              	movf	___ftdiv@f3,w
  4445  009F' 0080'              	movwf	___ftpack@arg
  4446  00A0' 0814'              	movf	___ftdiv@f3+1,w
  4447  00A1' 0081'              	movwf	___ftpack@arg+1
  4448  00A2' 0815'              	movf	___ftdiv@f3+2,w
  4449  00A3' 0082'              	movwf	___ftpack@arg+2
  4450  00A4' 0816'              	movf	___ftdiv@exp,w
  4451  00A5' 008E'              	movwf	??___ftdiv
  4452  00A6' 080E'              	movf	??___ftdiv,w
  4453  00A7' 0083'              	movwf	___ftpack@exp
  4454  00A8' 0817'              	movf	___ftdiv@sign,w
  4455  00A9' 008F'              	movwf	??___ftdiv+1
  4456  00AA' 080F'              	movf	??___ftdiv+1,w
  4457  00AB' 0084'              	movwf	___ftpack@sign
  4458  00AC' 120A' 118A' 2000'  	fcall	___ftpack
  4459  00AF' 1283               	bcf	3,5	;RP0=0, select bank0
  4460  00B0' 1303               	bcf	3,6	;RP1=0, select bank0
  4461  00B1' 0800'              	movf	?___ftpack,w
  4462  00B2' 0088'              	movwf	?___ftdiv
  4463  00B3' 0801'              	movf	?___ftpack+1,w
  4464  00B4' 0089'              	movwf	?___ftdiv+1
  4465  00B5' 0802'              	movf	?___ftpack+2,w
  4466  00B6' 008A'              	movwf	?___ftdiv+2
  4467  00B7' 0008               	return
  4468  00B8'                    __end_of___ftdiv:	
  4469                           
  4470                           	psect	text14
  4471  0000'                    __ptext14:	
  4472 ;; *************** function ___awtoft *****************
  4473 ;; Defined at:
  4474 ;;		line 32 in file "D:\mplab\sources\common\awtoft.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;  c               2    8[BANK0 ] int 
  4477 ;; Auto vars:     Size  Location     Type
  4478 ;;  sign            1   13[BANK0 ] unsigned char 
  4479 ;; Return value:  Size  Location     Type
  4480 ;;                  3    8[BANK0 ] float 
  4481 ;; Registers used:
  4482 ;;		wreg, status,2, status,0, pclath, cstack
  4483 ;; Tracked objects:
  4484 ;;		On entry : 0/0
  4485 ;;		On exit  : 0/0
  4486 ;;		Unchanged: 0/0
  4487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4488 ;;      Params:         0       3       0       0       0
  4489 ;;      Locals:         0       1       0       0       0
  4490 ;;      Temps:          0       2       0       0       0
  4491 ;;      Totals:         0       6       0       0       0
  4492 ;;Total ram usage:        6 bytes
  4493 ;; Hardware stack levels used:    1
  4494 ;; Hardware stack levels required when called:    2
  4495 ;; This function calls:
  4496 ;;		___ftpack
  4497 ;; This function is called by:
  4498 ;;		_convert_to_degrees
  4499 ;; This function uses a non-reentrant model
  4500 ;;
  4501                           
  4502                           
  4503                           ;psect for function ___awtoft
  4504  0000'                    ___awtoft:	
  4505                           
  4506                           ;incstack = 0
  4507                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  4508  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  4509  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  4510  0002' 018D'              	clrf	___awtoft@sign
  4511  0003' 1F89'              	btfss	___awtoft@c+1,7
  4512  0004' 2800'              	goto	l4888
  4513  0005' 0988'              	comf	___awtoft@c,f
  4514  0006' 0989'              	comf	___awtoft@c+1,f
  4515  0007' 0A88'              	incf	___awtoft@c,f
  4516  0008' 1903               	skipnz
  4517  0009' 0A89'              	incf	___awtoft@c+1,f
  4518  000A' 018D'              	clrf	___awtoft@sign
  4519  000B' 0A8D'              	incf	___awtoft@sign,f
  4520  000C'                    l4888:	
  4521  000C' 0808'              	movf	___awtoft@c,w
  4522  000D' 0080'              	movwf	___ftpack@arg
  4523  000E' 0809'              	movf	___awtoft@c+1,w
  4524  000F' 0081'              	movwf	___ftpack@arg+1
  4525  0010' 0182'              	clrf	___ftpack@arg+2
  4526  0011' 308E               	movlw	142
  4527  0012' 008B'              	movwf	??___awtoft
  4528  0013' 080B'              	movf	??___awtoft,w
  4529  0014' 0083'              	movwf	___ftpack@exp
  4530  0015' 080D'              	movf	___awtoft@sign,w
  4531  0016' 008C'              	movwf	??___awtoft+1
  4532  0017' 080C'              	movf	??___awtoft+1,w
  4533  0018' 0084'              	movwf	___ftpack@sign
  4534  0019' 120A' 118A' 2000'  	fcall	___ftpack
  4535  001C' 1283               	bcf	3,5	;RP0=0, select bank0
  4536  001D' 1303               	bcf	3,6	;RP1=0, select bank0
  4537  001E' 0800'              	movf	?___ftpack,w
  4538  001F' 0088'              	movwf	?___awtoft
  4539  0020' 0801'              	movf	?___ftpack+1,w
  4540  0021' 0089'              	movwf	?___awtoft+1
  4541  0022' 0802'              	movf	?___ftpack+2,w
  4542  0023' 008A'              	movwf	?___awtoft+2
  4543  0024' 0008               	return
  4544  0025'                    __end_of___awtoft:	
  4545                           
  4546                           	psect	text15
  4547  0000'                    __ptext15:	
  4548 ;; *************** function _convert_time_to_UTC *****************
  4549 ;; Defined at:
  4550 ;;		line 223 in file "GPS.c"
  4551 ;; Parameters:    Size  Location     Type
  4552 ;;  UTC_Time        4   28[BANK1 ] unsigned long 
  4553 ;; Auto vars:     Size  Location     Type
  4554 ;;  sec             2   41[BANK1 ] unsigned int 
  4555 ;;  min             2   39[BANK1 ] unsigned int 
  4556 ;;  hour            2   37[BANK1 ] unsigned int 
  4557 ;; Return value:  Size  Location     Type
  4558 ;;                  1    wreg      void 
  4559 ;; Registers used:
  4560 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4561 ;; Tracked objects:
  4562 ;;		On entry : 0/0
  4563 ;;		On exit  : 0/0
  4564 ;;		Unchanged: 0/0
  4565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4566 ;;      Params:         0       0       4       0       0
  4567 ;;      Locals:         0       0      10       0       0
  4568 ;;      Temps:          0       0       1       0       0
  4569 ;;      Totals:         0       0      15       0       0
  4570 ;;Total ram usage:       15 bytes
  4571 ;; Hardware stack levels used:    1
  4572 ;; Hardware stack levels required when called:    5
  4573 ;; This function calls:
  4574 ;;		___lldiv
  4575 ;;		___llmod
  4576 ;;		_sprintf
  4577 ;; This function is called by:
  4578 ;;		_main
  4579 ;; This function uses a non-reentrant model
  4580 ;;
  4581                           
  4582                           
  4583                           ;psect for function _convert_time_to_UTC
  4584  0000'                    _convert_time_to_UTC:	
  4585                           
  4586                           ;GPS.c: 225: unsigned int hour, min, sec;
  4587                           ;GPS.c: 227: hour = (UTC_Time / 10000);
  4588                           
  4589                           ;incstack = 0
  4590                           ; Regs used in _convert_time_to_UTC: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  4591  0000' 3000               	movlw	0
  4592  0001' 1283               	bcf	3,5	;RP0=0, select bank0
  4593  0002' 1303               	bcf	3,6	;RP1=0, select bank0
  4594  0003' 008D'              	movwf	___lldiv@divisor+3
  4595  0004' 3000               	movlw	0
  4596  0005' 008C'              	movwf	___lldiv@divisor+2
  4597  0006' 3027               	movlw	39
  4598  0007' 008B'              	movwf	___lldiv@divisor+1
  4599  0008' 3010               	movlw	16
  4600  0009' 008A'              	movwf	___lldiv@divisor
  4601  000A' 1683               	bsf	3,5	;RP0=1, select bank1
  4602  000B' 1303               	bcf	3,6	;RP1=0, select bank1
  4603  000C' 0800'              	movf	(convert_time_to_UTC@UTC_Time+3)^(0+128),w
  4604  000D' 1283               	bcf	3,5	;RP0=0, select bank0
  4605  000E' 1303               	bcf	3,6	;RP1=0, select bank0
  4606  000F' 0091'              	movwf	___lldiv@dividend+3
  4607  0010' 1683               	bsf	3,5	;RP0=1, select bank1
  4608  0011' 1303               	bcf	3,6	;RP1=0, select bank1
  4609  0012' 0800'              	movf	(convert_time_to_UTC@UTC_Time+2)^(0+128),w
  4610  0013' 1283               	bcf	3,5	;RP0=0, select bank0
  4611  0014' 1303               	bcf	3,6	;RP1=0, select bank0
  4612  0015' 0090'              	movwf	___lldiv@dividend+2
  4613  0016' 1683               	bsf	3,5	;RP0=1, select bank1
  4614  0017' 1303               	bcf	3,6	;RP1=0, select bank1
  4615  0018' 0800'              	movf	(convert_time_to_UTC@UTC_Time+1)^(0+128),w
  4616  0019' 1283               	bcf	3,5	;RP0=0, select bank0
  4617  001A' 1303               	bcf	3,6	;RP1=0, select bank0
  4618  001B' 008F'              	movwf	___lldiv@dividend+1
  4619  001C' 1683               	bsf	3,5	;RP0=1, select bank1
  4620  001D' 1303               	bcf	3,6	;RP1=0, select bank1
  4621  001E' 0800'              	movf	convert_time_to_UTC@UTC_Time^(0+128),w
  4622  001F' 1283               	bcf	3,5	;RP0=0, select bank0
  4623  0020' 1303               	bcf	3,6	;RP1=0, select bank0
  4624  0021' 008E'              	movwf	___lldiv@dividend
  4625  0022' 120A' 118A' 2000' 120A' 118A' 	fcall	___lldiv
  4626  0027' 1283               	bcf	3,5	;RP0=0, select bank0
  4627  0028' 1303               	bcf	3,6	;RP1=0, select bank0
  4628  0029' 080B'              	movf	?___lldiv+1,w
  4629  002A' 1683               	bsf	3,5	;RP0=1, select bank1
  4630  002B' 1303               	bcf	3,6	;RP1=0, select bank1
  4631  002C' 0080'              	movwf	(convert_time_to_UTC@hour+1)^(0+128)
  4632  002D' 1283               	bcf	3,5	;RP0=0, select bank0
  4633  002E' 1303               	bcf	3,6	;RP1=0, select bank0
  4634  002F' 080A'              	movf	?___lldiv,w
  4635  0030' 1683               	bsf	3,5	;RP0=1, select bank1
  4636  0031' 1303               	bcf	3,6	;RP1=0, select bank1
  4637  0032' 0080'              	movwf	convert_time_to_UTC@hour^(0+128)
  4638                           
  4639                           ;GPS.c: 228: min = (UTC_Time % 10000) / 100;
  4640  0033' 3000               	movlw	0
  4641  0034' 1283               	bcf	3,5	;RP0=0, select bank0
  4642  0035' 1303               	bcf	3,6	;RP1=0, select bank0
  4643  0036' 008D'              	movwf	___lldiv@divisor+3
  4644  0037' 3000               	movlw	0
  4645  0038' 008C'              	movwf	___lldiv@divisor+2
  4646  0039' 3000               	movlw	0
  4647  003A' 008B'              	movwf	___lldiv@divisor+1
  4648  003B' 3064               	movlw	100
  4649  003C' 008A'              	movwf	___lldiv@divisor
  4650  003D' 1683               	bsf	3,5	;RP0=1, select bank1
  4651  003E' 1303               	bcf	3,6	;RP1=0, select bank1
  4652  003F' 0800'              	movf	(convert_time_to_UTC@UTC_Time+3)^(0+128),w
  4653  0040' 1283               	bcf	3,5	;RP0=0, select bank0
  4654  0041' 1303               	bcf	3,6	;RP1=0, select bank0
  4655  0042' 0087'              	movwf	___llmod@dividend+3
  4656  0043' 1683               	bsf	3,5	;RP0=1, select bank1
  4657  0044' 1303               	bcf	3,6	;RP1=0, select bank1
  4658  0045' 0800'              	movf	(convert_time_to_UTC@UTC_Time+2)^(0+128),w
  4659  0046' 1283               	bcf	3,5	;RP0=0, select bank0
  4660  0047' 1303               	bcf	3,6	;RP1=0, select bank0
  4661  0048' 0086'              	movwf	___llmod@dividend+2
  4662  0049' 1683               	bsf	3,5	;RP0=1, select bank1
  4663  004A' 1303               	bcf	3,6	;RP1=0, select bank1
  4664  004B' 0800'              	movf	(convert_time_to_UTC@UTC_Time+1)^(0+128),w
  4665  004C' 1283               	bcf	3,5	;RP0=0, select bank0
  4666  004D' 1303               	bcf	3,6	;RP1=0, select bank0
  4667  004E' 0085'              	movwf	___llmod@dividend+1
  4668  004F' 1683               	bsf	3,5	;RP0=1, select bank1
  4669  0050' 1303               	bcf	3,6	;RP1=0, select bank1
  4670  0051' 0800'              	movf	convert_time_to_UTC@UTC_Time^(0+128),w
  4671  0052' 1283               	bcf	3,5	;RP0=0, select bank0
  4672  0053' 1303               	bcf	3,6	;RP1=0, select bank0
  4673  0054' 0084'              	movwf	___llmod@dividend
  4674  0055' 3000               	movlw	0
  4675  0056' 0083'              	movwf	___llmod@divisor+3
  4676  0057' 3000               	movlw	0
  4677  0058' 0082'              	movwf	___llmod@divisor+2
  4678  0059' 3027               	movlw	39
  4679  005A' 0081'              	movwf	___llmod@divisor+1
  4680  005B' 3010               	movlw	16
  4681  005C' 0080'              	movwf	___llmod@divisor
  4682  005D' 120A' 118A' 2000' 120A' 118A' 	fcall	___llmod
  4683  0062' 1283               	bcf	3,5	;RP0=0, select bank0
  4684  0063' 1303               	bcf	3,6	;RP1=0, select bank0
  4685  0064' 0803'              	movf	?___llmod+3,w
  4686  0065' 0091'              	movwf	___lldiv@dividend+3
  4687  0066' 0802'              	movf	?___llmod+2,w
  4688  0067' 0090'              	movwf	___lldiv@dividend+2
  4689  0068' 0801'              	movf	?___llmod+1,w
  4690  0069' 008F'              	movwf	___lldiv@dividend+1
  4691  006A' 0800'              	movf	?___llmod,w
  4692  006B' 008E'              	movwf	___lldiv@dividend
  4693  006C' 120A' 118A' 2000' 120A' 118A' 	fcall	___lldiv
  4694  0071' 1283               	bcf	3,5	;RP0=0, select bank0
  4695  0072' 1303               	bcf	3,6	;RP1=0, select bank0
  4696  0073' 080B'              	movf	?___lldiv+1,w
  4697  0074' 1683               	bsf	3,5	;RP0=1, select bank1
  4698  0075' 1303               	bcf	3,6	;RP1=0, select bank1
  4699  0076' 0080'              	movwf	(convert_time_to_UTC@min+1)^(0+128)
  4700  0077' 1283               	bcf	3,5	;RP0=0, select bank0
  4701  0078' 1303               	bcf	3,6	;RP1=0, select bank0
  4702  0079' 080A'              	movf	?___lldiv,w
  4703  007A' 1683               	bsf	3,5	;RP0=1, select bank1
  4704  007B' 1303               	bcf	3,6	;RP1=0, select bank1
  4705  007C' 0080'              	movwf	convert_time_to_UTC@min^(0+128)
  4706                           
  4707                           ;GPS.c: 229: sec = (UTC_Time % 10000) % 100;
  4708  007D' 0800'              	movf	(convert_time_to_UTC@UTC_Time+3)^(0+128),w
  4709  007E' 1283               	bcf	3,5	;RP0=0, select bank0
  4710  007F' 1303               	bcf	3,6	;RP1=0, select bank0
  4711  0080' 0087'              	movwf	___llmod@dividend+3
  4712  0081' 1683               	bsf	3,5	;RP0=1, select bank1
  4713  0082' 1303               	bcf	3,6	;RP1=0, select bank1
  4714  0083' 0800'              	movf	(convert_time_to_UTC@UTC_Time+2)^(0+128),w
  4715  0084' 1283               	bcf	3,5	;RP0=0, select bank0
  4716  0085' 1303               	bcf	3,6	;RP1=0, select bank0
  4717  0086' 0086'              	movwf	___llmod@dividend+2
  4718  0087' 1683               	bsf	3,5	;RP0=1, select bank1
  4719  0088' 1303               	bcf	3,6	;RP1=0, select bank1
  4720  0089' 0800'              	movf	(convert_time_to_UTC@UTC_Time+1)^(0+128),w
  4721  008A' 1283               	bcf	3,5	;RP0=0, select bank0
  4722  008B' 1303               	bcf	3,6	;RP1=0, select bank0
  4723  008C' 0085'              	movwf	___llmod@dividend+1
  4724  008D' 1683               	bsf	3,5	;RP0=1, select bank1
  4725  008E' 1303               	bcf	3,6	;RP1=0, select bank1
  4726  008F' 0800'              	movf	convert_time_to_UTC@UTC_Time^(0+128),w
  4727  0090' 1283               	bcf	3,5	;RP0=0, select bank0
  4728  0091' 1303               	bcf	3,6	;RP1=0, select bank0
  4729  0092' 0084'              	movwf	___llmod@dividend
  4730  0093' 3000               	movlw	0
  4731  0094' 0083'              	movwf	___llmod@divisor+3
  4732  0095' 3000               	movlw	0
  4733  0096' 0082'              	movwf	___llmod@divisor+2
  4734  0097' 3027               	movlw	39
  4735  0098' 0081'              	movwf	___llmod@divisor+1
  4736  0099' 3010               	movlw	16
  4737  009A' 0080'              	movwf	___llmod@divisor
  4738  009B' 120A' 118A' 2000' 120A' 118A' 	fcall	___llmod
  4739  00A0' 1283               	bcf	3,5	;RP0=0, select bank0
  4740  00A1' 1303               	bcf	3,6	;RP1=0, select bank0
  4741  00A2' 0803'              	movf	?___llmod+3,w
  4742  00A3' 1683               	bsf	3,5	;RP0=1, select bank1
  4743  00A4' 1303               	bcf	3,6	;RP1=0, select bank1
  4744  00A5' 0080'              	movwf	(_convert_time_to_UTC$828+3)^(0+128)
  4745  00A6' 1283               	bcf	3,5	;RP0=0, select bank0
  4746  00A7' 1303               	bcf	3,6	;RP1=0, select bank0
  4747  00A8' 0802'              	movf	?___llmod+2,w
  4748  00A9' 1683               	bsf	3,5	;RP0=1, select bank1
  4749  00AA' 1303               	bcf	3,6	;RP1=0, select bank1
  4750  00AB' 0080'              	movwf	(_convert_time_to_UTC$828+2)^(0+128)
  4751  00AC' 1283               	bcf	3,5	;RP0=0, select bank0
  4752  00AD' 1303               	bcf	3,6	;RP1=0, select bank0
  4753  00AE' 0801'              	movf	?___llmod+1,w
  4754  00AF' 1683               	bsf	3,5	;RP0=1, select bank1
  4755  00B0' 1303               	bcf	3,6	;RP1=0, select bank1
  4756  00B1' 0080'              	movwf	(_convert_time_to_UTC$828+1)^(0+128)
  4757  00B2' 1283               	bcf	3,5	;RP0=0, select bank0
  4758  00B3' 1303               	bcf	3,6	;RP1=0, select bank0
  4759  00B4' 0800'              	movf	?___llmod,w
  4760  00B5' 1683               	bsf	3,5	;RP0=1, select bank1
  4761  00B6' 1303               	bcf	3,6	;RP1=0, select bank1
  4762  00B7' 0080'              	movwf	_convert_time_to_UTC$828^(0+128)
  4763                           
  4764                           ;GPS.c: 229: sec = (UTC_Time % 10000) % 100;
  4765  00B8' 3000               	movlw	0
  4766  00B9' 1283               	bcf	3,5	;RP0=0, select bank0
  4767  00BA' 1303               	bcf	3,6	;RP1=0, select bank0
  4768  00BB' 0083'              	movwf	___llmod@divisor+3
  4769  00BC' 3000               	movlw	0
  4770  00BD' 0082'              	movwf	___llmod@divisor+2
  4771  00BE' 3000               	movlw	0
  4772  00BF' 0081'              	movwf	___llmod@divisor+1
  4773  00C0' 3064               	movlw	100
  4774  00C1' 0080'              	movwf	___llmod@divisor
  4775  00C2' 1683               	bsf	3,5	;RP0=1, select bank1
  4776  00C3' 1303               	bcf	3,6	;RP1=0, select bank1
  4777  00C4' 0800'              	movf	(_convert_time_to_UTC$828+3)^(0+128),w
  4778  00C5' 1283               	bcf	3,5	;RP0=0, select bank0
  4779  00C6' 1303               	bcf	3,6	;RP1=0, select bank0
  4780  00C7' 0087'              	movwf	___llmod@dividend+3
  4781  00C8' 1683               	bsf	3,5	;RP0=1, select bank1
  4782  00C9' 1303               	bcf	3,6	;RP1=0, select bank1
  4783  00CA' 0800'              	movf	(_convert_time_to_UTC$828+2)^(0+128),w
  4784  00CB' 1283               	bcf	3,5	;RP0=0, select bank0
  4785  00CC' 1303               	bcf	3,6	;RP1=0, select bank0
  4786  00CD' 0086'              	movwf	___llmod@dividend+2
  4787  00CE' 1683               	bsf	3,5	;RP0=1, select bank1
  4788  00CF' 1303               	bcf	3,6	;RP1=0, select bank1
  4789  00D0' 0800'              	movf	(_convert_time_to_UTC$828+1)^(0+128),w
  4790  00D1' 1283               	bcf	3,5	;RP0=0, select bank0
  4791  00D2' 1303               	bcf	3,6	;RP1=0, select bank0
  4792  00D3' 0085'              	movwf	___llmod@dividend+1
  4793  00D4' 1683               	bsf	3,5	;RP0=1, select bank1
  4794  00D5' 1303               	bcf	3,6	;RP1=0, select bank1
  4795  00D6' 0800'              	movf	_convert_time_to_UTC$828^(0+128),w
  4796  00D7' 1283               	bcf	3,5	;RP0=0, select bank0
  4797  00D8' 1303               	bcf	3,6	;RP1=0, select bank0
  4798  00D9' 0084'              	movwf	___llmod@dividend
  4799  00DA' 120A' 118A' 2000' 120A' 118A' 	fcall	___llmod
  4800  00DF' 1283               	bcf	3,5	;RP0=0, select bank0
  4801  00E0' 1303               	bcf	3,6	;RP1=0, select bank0
  4802  00E1' 0801'              	movf	?___llmod+1,w
  4803  00E2' 1683               	bsf	3,5	;RP0=1, select bank1
  4804  00E3' 1303               	bcf	3,6	;RP1=0, select bank1
  4805  00E4' 0080'              	movwf	(convert_time_to_UTC@sec+1)^(0+128)
  4806  00E5' 1283               	bcf	3,5	;RP0=0, select bank0
  4807  00E6' 1303               	bcf	3,6	;RP1=0, select bank0
  4808  00E7' 0800'              	movf	?___llmod,w
  4809  00E8' 1683               	bsf	3,5	;RP0=1, select bank1
  4810  00E9' 1303               	bcf	3,6	;RP1=0, select bank1
  4811  00EA' 0080'              	movwf	convert_time_to_UTC@sec^(0+128)
  4812                           
  4813                           ;GPS.c: 231: sprintf(Data_Buffer, "%d:%d:%d", hour,min,sec);
  4814  00EB' 3000'              	movlw	(low (_Data_Buffer| (0+256)))& (0+255)
  4815  00EC' 1283               	bcf	3,5	;RP0=0, select bank0
  4816  00ED' 1303               	bcf	3,6	;RP1=0, select bank0
  4817  00EE' 00C7'              	movwf	sprintf@sp
  4818  00EF' 3001               	movlw	1
  4819  00F0' 00C8'              	movwf	sprintf@sp+1
  4820  00F1' 3082               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  4821  00F2' 1683               	bsf	3,5	;RP0=1, select bank1
  4822  00F3' 1303               	bcf	3,6	;RP1=0, select bank1
  4823  00F4' 0080'              	movwf	??_convert_time_to_UTC^(0+128)
  4824  00F5' 0800'              	movf	??_convert_time_to_UTC^(0+128),w
  4825  00F6' 1283               	bcf	3,5	;RP0=0, select bank0
  4826  00F7' 1303               	bcf	3,6	;RP1=0, select bank0
  4827  00F8' 00C9'              	movwf	sprintf@f
  4828  00F9' 1683               	bsf	3,5	;RP0=1, select bank1
  4829  00FA' 1303               	bcf	3,6	;RP1=0, select bank1
  4830  00FB' 0800'              	movf	(convert_time_to_UTC@hour+1)^(0+128),w
  4831  00FC' 1283               	bcf	3,5	;RP0=0, select bank0
  4832  00FD' 1303               	bcf	3,6	;RP1=0, select bank0
  4833  00FE' 00CB'              	movwf	?_sprintf+4
  4834  00FF' 1683               	bsf	3,5	;RP0=1, select bank1
  4835  0100' 1303               	bcf	3,6	;RP1=0, select bank1
  4836  0101' 0800'              	movf	convert_time_to_UTC@hour^(0+128),w
  4837  0102' 1283               	bcf	3,5	;RP0=0, select bank0
  4838  0103' 1303               	bcf	3,6	;RP1=0, select bank0
  4839  0104' 00CA'              	movwf	?_sprintf+3
  4840  0105' 1683               	bsf	3,5	;RP0=1, select bank1
  4841  0106' 1303               	bcf	3,6	;RP1=0, select bank1
  4842  0107' 0800'              	movf	(convert_time_to_UTC@min+1)^(0+128),w
  4843  0108' 1283               	bcf	3,5	;RP0=0, select bank0
  4844  0109' 1303               	bcf	3,6	;RP1=0, select bank0
  4845  010A' 00CD'              	movwf	?_sprintf+6
  4846  010B' 1683               	bsf	3,5	;RP0=1, select bank1
  4847  010C' 1303               	bcf	3,6	;RP1=0, select bank1
  4848  010D' 0800'              	movf	convert_time_to_UTC@min^(0+128),w
  4849  010E' 1283               	bcf	3,5	;RP0=0, select bank0
  4850  010F' 1303               	bcf	3,6	;RP1=0, select bank0
  4851  0110' 00CC'              	movwf	?_sprintf+5
  4852  0111' 1683               	bsf	3,5	;RP0=1, select bank1
  4853  0112' 1303               	bcf	3,6	;RP1=0, select bank1
  4854  0113' 0800'              	movf	(convert_time_to_UTC@sec+1)^(0+128),w
  4855  0114' 1283               	bcf	3,5	;RP0=0, select bank0
  4856  0115' 1303               	bcf	3,6	;RP1=0, select bank0
  4857  0116' 00CF'              	movwf	?_sprintf+8
  4858  0117' 1683               	bsf	3,5	;RP0=1, select bank1
  4859  0118' 1303               	bcf	3,6	;RP1=0, select bank1
  4860  0119' 0800'              	movf	convert_time_to_UTC@sec^(0+128),w
  4861  011A' 1283               	bcf	3,5	;RP0=0, select bank0
  4862  011B' 1303               	bcf	3,6	;RP1=0, select bank0
  4863  011C' 00CE'              	movwf	?_sprintf+7
  4864  011D' 120A' 118A' 2000'  	fcall	_sprintf
  4865  0120' 0008               	return
  4866  0121'                    __end_of_convert_time_to_UTC:	
  4867                           
  4868                           	psect	text16
  4869  0000'                    __ptext16:	
  4870 ;; *************** function _sprintf *****************
  4871 ;; Defined at:
  4872 ;;		line 492 in file "D:\mplab\sources\common\doprnt.c"
  4873 ;; Parameters:    Size  Location     Type
  4874 ;;  sp              2   71[BANK0 ] PTR unsigned char 
  4875 ;;		 -> Data_Buffer(15), main@GPS_Buffer(15), 
  4876 ;;  f               1   73[BANK0 ] PTR const unsigned char 
  4877 ;;		 -> STR_9(9), STR_8(5), STR_6(6), STR_4(6), 
  4878 ;; Auto vars:     Size  Location     Type
  4879 ;;  val             4   18[BANK1 ] unsigned long 
  4880 ;;  tmpval          4   14[BANK1 ] struct .
  4881 ;;  fval            3   24[BANK1 ] struct .
  4882 ;;  prec            2   22[BANK1 ] int 
  4883 ;;  exp             2   12[BANK1 ] int 
  4884 ;;  flag            2   10[BANK1 ] unsigned short 
  4885 ;;  cp              2    0        PTR const unsigned char 
  4886 ;;  len             2    0        unsigned int 
  4887 ;;  width           2    0        int 
  4888 ;;  c               1   27[BANK1 ] char 
  4889 ;;  ap              1    9[BANK1 ] PTR void [1]
  4890 ;;		 -> ?_sprintf(2), 
  4891 ;;  d               1    0        unsigned char 
  4892 ;; Return value:  Size  Location     Type
  4893 ;;                  2   71[BANK0 ] int 
  4894 ;; Registers used:
  4895 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4896 ;; Tracked objects:
  4897 ;;		On entry : 0/0
  4898 ;;		On exit  : 0/0
  4899 ;;		Unchanged: 0/0
  4900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4901 ;;      Params:         0       9       0       0       0
  4902 ;;      Locals:         0       0      22       0       0
  4903 ;;      Temps:          0       0       6       0       0
  4904 ;;      Totals:         0       9      28       0       0
  4905 ;;Total ram usage:       37 bytes
  4906 ;; Hardware stack levels used:    1
  4907 ;; Hardware stack levels required when called:    4
  4908 ;; This function calls:
  4909 ;;		___awdiv
  4910 ;;		___ftadd
  4911 ;;		___ftge
  4912 ;;		___ftmul
  4913 ;;		___ftneg
  4914 ;;		___ftsub
  4915 ;;		___fttol
  4916 ;;		___lldiv
  4917 ;;		___llmod
  4918 ;;		___lltoft
  4919 ;;		___wmul
  4920 ;;		__div_to_l_
  4921 ;;		__tdiv_to_l_
  4922 ;;		_fround
  4923 ;;		_isdigit
  4924 ;;		_scale
  4925 ;; This function is called by:
  4926 ;;		_main
  4927 ;;		_convert_time_to_UTC
  4928 ;; This function uses a non-reentrant model
  4929 ;;
  4930                           
  4931                           
  4932                           ;psect for function _sprintf
  4933  0000'                    _sprintf:	
  4934                           
  4935                           ;doprnt.c: 494: va_list ap;
  4936                           ;doprnt.c: 499: signed char c;
  4937                           ;doprnt.c: 501: int width;
  4938                           ;doprnt.c: 504: int prec;
  4939                           ;doprnt.c: 508: unsigned short flag;
  4940                           ;doprnt.c: 515: char d;
  4941                           ;doprnt.c: 516: double fval;
  4942                           ;doprnt.c: 517: int exp;
  4943                           ;doprnt.c: 523: union {
  4944                           ;doprnt.c: 524: unsigned long vd;
  4945                           ;doprnt.c: 525: double integ;
  4946                           ;doprnt.c: 526: } tmpval;
  4947                           ;doprnt.c: 528: unsigned long val;
  4948                           ;doprnt.c: 529: unsigned len;
  4949                           ;doprnt.c: 530: const char * cp;
  4950                           ;doprnt.c: 533: *ap = __va_start();
  4951                           
  4952                           ;incstack = 0
  4953                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4954  0000' 3000'              	movlw	(low ((?_sprintf| 0+3)))& (0+255)
  4955  0001' 1683               	bsf	3,5	;RP0=1, select bank1
  4956  0002' 1303               	bcf	3,6	;RP1=0, select bank1
  4957  0003' 0080'              	movwf	??_sprintf^(0+128)
  4958  0004' 0800'              	movf	??_sprintf^(0+128),w
  4959  0005' 0080'              	movwf	sprintf@ap^(0+128)
  4960  0006'                    l4772:	
  4961                           ;doprnt.c: 536: while(c = *f++) {
  4962                           
  4963  0006' 3001               	movlw	1
  4964  0007' 1283               	bcf	3,5	;RP0=0, select bank0
  4965  0008' 07C9'              	addwf	sprintf@f,f
  4966  0009' 30FF               	movlw	-1
  4967  000A' 0749'              	addwf	sprintf@f,w
  4968  000B' 0084               	movwf	4
  4969  000C' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  4970  0011' 1683               	bsf	3,5	;RP0=1, select bank1
  4971  0012' 1303               	bcf	3,6	;RP1=0, select bank1
  4972  0013' 0080'              	movwf	??_sprintf^(0+128)
  4973  0014' 0800'              	movf	??_sprintf^(0+128),w
  4974  0015' 0080'              	movwf	sprintf@c^(0+128)
  4975  0016' 0800'              	movf	sprintf@c^(0+128),w
  4976  0017' 1903               	btfsc	3,2
  4977  0018' 2800'              	goto	L13
  4978                           
  4979                           ;doprnt.c: 538: if(c != '%')
  4980  0019' 3025               	movlw	37
  4981  001A' 0600'              	xorwf	sprintf@c^(0+128),w
  4982  001B' 1903               	btfsc	3,2
  4983  001C' 2800'              	goto	l4556
  4984                           
  4985                           ;doprnt.c: 540: {
  4986                           ;doprnt.c: 541: ((*sp++ = (c)));
  4987  001D' 0800'              	movf	sprintf@c^(0+128),w
  4988  001E' 0080'              	movwf	??_sprintf^(0+128)
  4989  001F' 1283               	bcf	3,5	;RP0=0, select bank0
  4990  0020' 1303               	bcf	3,6	;RP1=0, select bank0
  4991  0021' 0847'              	movf	sprintf@sp,w
  4992  0022' 0084               	movwf	4
  4993  0023' 1783               	bsf	3,7
  4994  0024' 1C48'              	btfss	sprintf@sp+1,0
  4995  0025' 1383               	bcf	3,7
  4996  0026' 1683               	bsf	3,5	;RP0=1, select bank1
  4997  0027' 1303               	bcf	3,6	;RP1=0, select bank1
  4998  0028' 0800'              	movf	??_sprintf^(0+128),w
  4999  0029' 0080               	movwf	0
  5000  002A' 3001               	movlw	1
  5001  002B' 1283               	bcf	3,5	;RP0=0, select bank0
  5002  002C' 1303               	bcf	3,6	;RP1=0, select bank0
  5003  002D' 07C7'              	addwf	sprintf@sp,f
  5004  002E' 1803               	skipnc
  5005  002F' 0AC8'              	incf	sprintf@sp+1,f
  5006                           
  5007                           ;doprnt.c: 542: continue;
  5008  0030' 2800'              	goto	l4772
  5009  0031'                    l4556:	
  5010                           
  5011                           ;doprnt.c: 543: }
  5012                           ;doprnt.c: 548: flag = 0;
  5013  0031' 1683               	bsf	3,5	;RP0=1, select bank1
  5014  0032' 1303               	bcf	3,6	;RP1=0, select bank1
  5015  0033' 0180'              	clrf	sprintf@flag^(0+128)
  5016  0034' 0180'              	clrf	(sprintf@flag+1)^(0+128)
  5017                           
  5018                           ;doprnt.c: 611: if(*f == '.') {
  5019  0035' 1283               	bcf	3,5	;RP0=0, select bank0
  5020  0036' 1303               	bcf	3,6	;RP1=0, select bank0
  5021  0037' 0849'              	movf	sprintf@f,w
  5022  0038' 0084               	movwf	4
  5023  0039' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  5024  003E' 3A2E               	xorlw	46
  5025  003F' 1D03               	skipz
  5026  0040' 2800'              	goto	l4572
  5027                           
  5028                           ;doprnt.c: 612: flag |= 0x4000;
  5029  0041' 1683               	bsf	3,5	;RP0=1, select bank1
  5030  0042' 1303               	bcf	3,6	;RP1=0, select bank1
  5031  0043' 1701'              	bsf	(sprintf@flag^(0+128)+1),6
  5032                           
  5033                           ;doprnt.c: 613: f++;
  5034  0044' 3001               	movlw	1
  5035  0045' 0080'              	movwf	??_sprintf^(0+128)
  5036  0046' 0800'              	movf	??_sprintf^(0+128),w
  5037  0047' 1283               	bcf	3,5	;RP0=0, select bank0
  5038  0048' 1303               	bcf	3,6	;RP1=0, select bank0
  5039  0049' 07C9'              	addwf	sprintf@f,f
  5040                           
  5041                           ;doprnt.c: 620: {
  5042                           ;doprnt.c: 621: prec = 0;
  5043  004A' 1683               	bsf	3,5	;RP0=1, select bank1
  5044  004B' 1303               	bcf	3,6	;RP1=0, select bank1
  5045  004C' 0180'              	clrf	sprintf@prec^(0+128)
  5046  004D' 0180'              	clrf	(sprintf@prec+1)^(0+128)
  5047  004E'                    l4570:	
  5048                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  5049                           
  5050  004E' 1283               	bcf	3,5	;RP0=0, select bank0
  5051  004F' 0849'              	movf	sprintf@f,w
  5052  0050' 0084               	movwf	4
  5053  0051' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  5054  0056' 120A' 118A' 2000' 120A' 118A' 	fcall	_isdigit
  5055  005B' 1C03               	btfss	3,0
  5056  005C' 2800'              	goto	l4578
  5057                           
  5058                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  5059  005D' 1683               	bsf	3,5	;RP0=1, select bank1
  5060  005E' 1303               	bcf	3,6	;RP1=0, select bank1
  5061  005F' 0800'              	movf	(sprintf@prec+1)^(0+128),w
  5062  0060' 1283               	bcf	3,5	;RP0=0, select bank0
  5063  0061' 1303               	bcf	3,6	;RP1=0, select bank0
  5064  0062' 0081'              	movwf	___wmul@multiplier+1
  5065  0063' 1683               	bsf	3,5	;RP0=1, select bank1
  5066  0064' 1303               	bcf	3,6	;RP1=0, select bank1
  5067  0065' 0800'              	movf	sprintf@prec^(0+128),w
  5068  0066' 1283               	bcf	3,5	;RP0=0, select bank0
  5069  0067' 1303               	bcf	3,6	;RP1=0, select bank0
  5070  0068' 0080'              	movwf	___wmul@multiplier
  5071  0069' 300A               	movlw	10
  5072  006A' 0082'              	movwf	___wmul@multiplicand
  5073  006B' 3000               	movlw	0
  5074  006C' 0083'              	movwf	___wmul@multiplicand+1
  5075  006D' 120A' 118A' 2000' 120A' 118A' 	fcall	___wmul
  5076  0072' 1283               	bcf	3,5	;RP0=0, select bank0
  5077  0073' 1303               	bcf	3,6	;RP1=0, select bank0
  5078  0074' 0849'              	movf	sprintf@f,w
  5079  0075' 0084               	movwf	4
  5080  0076' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  5081  007B' 0700'              	addwf	?___wmul,w
  5082  007C' 1683               	bsf	3,5	;RP0=1, select bank1
  5083  007D' 1303               	bcf	3,6	;RP1=0, select bank1
  5084  007E' 0080'              	movwf	??_sprintf^(0+128)
  5085  007F' 3000               	movlw	0
  5086  0080' 1803               	skipnc
  5087  0081' 3001               	movlw	1
  5088  0082' 1283               	bcf	3,5	;RP0=0, select bank0
  5089  0083' 1303               	bcf	3,6	;RP1=0, select bank0
  5090  0084' 0701'              	addwf	?___wmul+1,w
  5091  0085' 1683               	bsf	3,5	;RP0=1, select bank1
  5092  0086' 1303               	bcf	3,6	;RP1=0, select bank1
  5093  0087' 0080'              	movwf	(??_sprintf+1)^(0+128)
  5094  0088' 0800'              	movf	??_sprintf^(0+128),w
  5095  0089' 3ED0               	addlw	208
  5096  008A' 0080'              	movwf	sprintf@prec^(0+128)
  5097  008B' 0800'              	movf	(??_sprintf+1)^(0+128),w
  5098  008C' 1803               	skipnc
  5099  008D' 3E01               	addlw	1
  5100  008E' 3EFF               	addlw	255
  5101  008F' 0080'              	movwf	(sprintf@prec+1)^(0+128)
  5102  0090' 3001               	movlw	1
  5103  0091' 0080'              	movwf	??_sprintf^(0+128)
  5104  0092' 0800'              	movf	??_sprintf^(0+128),w
  5105  0093' 1283               	bcf	3,5	;RP0=0, select bank0
  5106  0094' 1303               	bcf	3,6	;RP1=0, select bank0
  5107  0095' 07C9'              	addwf	sprintf@f,f
  5108  0096' 2800'              	goto	l4570
  5109  0097'                    l4572:	
  5110                           ;doprnt.c: 624: }
  5111                           ;doprnt.c: 625: } else {
  5112                           
  5113                           
  5114                           ;doprnt.c: 626: prec = 0;
  5115  0097' 1683               	bsf	3,5	;RP0=1, select bank1
  5116  0098' 1303               	bcf	3,6	;RP1=0, select bank1
  5117  0099' 0180'              	clrf	sprintf@prec^(0+128)
  5118  009A' 0180'              	clrf	(sprintf@prec+1)^(0+128)
  5119                           
  5120                           ;doprnt.c: 628: flag |= 0x1000;
  5121  009B' 1601'              	bsf	(sprintf@flag^(0+128)+1),4
  5122                           
  5123                           ;doprnt.c: 630: }
  5124                           ;doprnt.c: 635: switch(c = *f++) {
  5125  009C' 2800'              	goto	l4578
  5126  009D'                    l233:	
  5127                           ;doprnt.c: 662: case 'f':
  5128                           
  5129                           ;doprnt.c: 638: goto alldone;
  5130                           
  5131                           ;doprnt.c: 637: case 0:
  5132                           
  5133                           
  5134                           ;doprnt.c: 663: flag |= 0x400;
  5135  009D' 1501'              	bsf	(sprintf@flag^(0+128)+1),2
  5136                           
  5137                           ;doprnt.c: 698: case 'i':
  5138                           ;doprnt.c: 699: break;
  5139                           
  5140                           ;doprnt.c: 697: case 'd':
  5141                           
  5142                           ;doprnt.c: 664: break;
  5143  009E' 2800'              	goto	l4580
  5144  009F'                    l4578:	
  5145                           ;doprnt.c: 822: }
  5146                           
  5147                           ;doprnt.c: 813: continue;
  5148                           
  5149                           ;doprnt.c: 802: default:
  5150                           
  5151  009F' 3001               	movlw	1
  5152  00A0' 1283               	bcf	3,5	;RP0=0, select bank0
  5153  00A1' 1303               	bcf	3,6	;RP1=0, select bank0
  5154  00A2' 07C9'              	addwf	sprintf@f,f
  5155  00A3' 30FF               	movlw	-1
  5156  00A4' 0749'              	addwf	sprintf@f,w
  5157  00A5' 0084               	movwf	4
  5158  00A6' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  5159  00AB' 1683               	bsf	3,5	;RP0=1, select bank1
  5160  00AC' 1303               	bcf	3,6	;RP1=0, select bank1
  5161  00AD' 0080'              	movwf	sprintf@c^(0+128)
  5162                           
  5163                           ; Switch size 1, requested type "space"
  5164                           ; Number of cases is 4, Range of values is 0 to 105
  5165                           ; switch strategies available:
  5166                           ; Name         Instructions Cycles
  5167                           ; simple_byte           13     7 (average)
  5168                           ; jumptable            260     6 (fixed)
  5169                           ;	Chosen strategy is simple_byte
  5170  00AE' 3A00               	xorlw	0	; case 0
  5171  00AF' 1903               	skipnz
  5172  00B0' 2800'              	goto	L13
  5173  00B1' 3A64               	xorlw	100	; case 100
  5174  00B2' 1903               	skipnz
  5175  00B3' 2800'              	goto	l4580
  5176  00B4' 3A02               	xorlw	2	; case 102
  5177  00B5' 1903               	skipnz
  5178  00B6' 2800'              	goto	l233
  5179  00B7' 3A0F               	xorlw	15	; case 105
  5180  00B8' 1903               	skipnz
  5181  00B9' 2800'              	goto	l4580
  5182  00BA' 2800'              	goto	l4772
  5183  00BB'                    l4580:	
  5184                           
  5185                           ;doprnt.c: 825: if(flag & (0x700)) {
  5186  00BB' 3000               	movlw	0
  5187  00BC' 0500'              	andwf	sprintf@flag^(0+128),w
  5188  00BD' 0080'              	movwf	??_sprintf^(0+128)
  5189  00BE' 3007               	movlw	7
  5190  00BF' 0500'              	andwf	(sprintf@flag+1)^(0+128),w
  5191  00C0' 0080'              	movwf	(??_sprintf+1)^(0+128)
  5192  00C1' 0800'              	movf	??_sprintf^(0+128),w
  5193  00C2' 0401'              	iorwf	(??_sprintf^(0+128)+1),w
  5194  00C3' 1903               	btfsc	3,2
  5195  00C4' 2800'              	goto	L15
  5196                           
  5197                           ;doprnt.c: 827: if(flag & 0x1000)
  5198  00C5' 1E00'              	btfss	(sprintf@flag+1)^(0+128),4
  5199  00C6' 2800'              	goto	l4586
  5200                           
  5201                           ;doprnt.c: 829: prec = 6;
  5202  00C7' 3006               	movlw	6
  5203  00C8' 0080'              	movwf	sprintf@prec^(0+128)
  5204  00C9' 3000               	movlw	0
  5205  00CA' 0081'              	movwf	(sprintf@prec^(0+128)+1)
  5206  00CB'                    l4586:	
  5207                           
  5208                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  5209  00CB' 0800'              	movf	sprintf@ap^(0+128),w
  5210  00CC' 0084               	movwf	4
  5211  00CD' 1383               	bcf	3,7	;select IRP bank0
  5212  00CE' 0800               	movf	0,w
  5213  00CF' 0080'              	movwf	sprintf@fval^(0+128)
  5214  00D0' 0A84               	incf	4,f
  5215  00D1' 0800               	movf	0,w
  5216  00D2' 0080'              	movwf	(sprintf@fval+1)^(0+128)
  5217  00D3' 0A84               	incf	4,f
  5218  00D4' 0800               	movf	0,w
  5219  00D5' 0080'              	movwf	(sprintf@fval+2)^(0+128)
  5220  00D6' 3003               	movlw	3
  5221  00D7' 0080'              	movwf	??_sprintf^(0+128)
  5222  00D8' 0800'              	movf	??_sprintf^(0+128),w
  5223  00D9' 0780'              	addwf	sprintf@ap^(0+128),f
  5224                           
  5225                           ;doprnt.c: 831: if(fval < 0.0) {
  5226  00DA' 0800'              	movf	sprintf@fval^(0+128),w
  5227  00DB' 1283               	bcf	3,5	;RP0=0, select bank0
  5228  00DC' 1303               	bcf	3,6	;RP1=0, select bank0
  5229  00DD' 0080'              	movwf	___ftge@ff1
  5230  00DE' 1683               	bsf	3,5	;RP0=1, select bank1
  5231  00DF' 1303               	bcf	3,6	;RP1=0, select bank1
  5232  00E0' 0800'              	movf	(sprintf@fval+1)^(0+128),w
  5233  00E1' 1283               	bcf	3,5	;RP0=0, select bank0
  5234  00E2' 1303               	bcf	3,6	;RP1=0, select bank0
  5235  00E3' 0081'              	movwf	___ftge@ff1+1
  5236  00E4' 1683               	bsf	3,5	;RP0=1, select bank1
  5237  00E5' 1303               	bcf	3,6	;RP1=0, select bank1
  5238  00E6' 0800'              	movf	(sprintf@fval+2)^(0+128),w
  5239  00E7' 1283               	bcf	3,5	;RP0=0, select bank0
  5240  00E8' 1303               	bcf	3,6	;RP1=0, select bank0
  5241  00E9' 0082'              	movwf	___ftge@ff1+2
  5242  00EA' 3000               	movlw	0
  5243  00EB' 0083'              	movwf	___ftge@ff2
  5244  00EC' 3000               	movlw	0
  5245  00ED' 0084'              	movwf	___ftge@ff2+1
  5246  00EE' 3000               	movlw	0
  5247  00EF' 0085'              	movwf	___ftge@ff2+2
  5248  00F0' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftge
  5249  00F5' 1803               	btfsc	3,0
  5250  00F6' 2800'              	goto	l4596
  5251                           
  5252                           ;doprnt.c: 832: fval = -fval;
  5253  00F7' 1683               	bsf	3,5	;RP0=1, select bank1
  5254  00F8' 1303               	bcf	3,6	;RP1=0, select bank1
  5255  00F9' 0800'              	movf	sprintf@fval^(0+128),w
  5256  00FA' 1283               	bcf	3,5	;RP0=0, select bank0
  5257  00FB' 1303               	bcf	3,6	;RP1=0, select bank0
  5258  00FC' 00A4'              	movwf	___ftneg@f1
  5259  00FD' 1683               	bsf	3,5	;RP0=1, select bank1
  5260  00FE' 1303               	bcf	3,6	;RP1=0, select bank1
  5261  00FF' 0800'              	movf	(sprintf@fval+1)^(0+128),w
  5262  0100' 1283               	bcf	3,5	;RP0=0, select bank0
  5263  0101' 1303               	bcf	3,6	;RP1=0, select bank0
  5264  0102' 00A5'              	movwf	___ftneg@f1+1
  5265  0103' 1683               	bsf	3,5	;RP0=1, select bank1
  5266  0104' 1303               	bcf	3,6	;RP1=0, select bank1
  5267  0105' 0800'              	movf	(sprintf@fval+2)^(0+128),w
  5268  0106' 1283               	bcf	3,5	;RP0=0, select bank0
  5269  0107' 1303               	bcf	3,6	;RP1=0, select bank0
  5270  0108' 00A6'              	movwf	___ftneg@f1+2
  5271  0109' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftneg
  5272  010E' 1283               	bcf	3,5	;RP0=0, select bank0
  5273  010F' 1303               	bcf	3,6	;RP1=0, select bank0
  5274  0110' 0824'              	movf	?___ftneg,w
  5275  0111' 1683               	bsf	3,5	;RP0=1, select bank1
  5276  0112' 1303               	bcf	3,6	;RP1=0, select bank1
  5277  0113' 0080'              	movwf	sprintf@fval^(0+128)
  5278  0114' 1283               	bcf	3,5	;RP0=0, select bank0
  5279  0115' 1303               	bcf	3,6	;RP1=0, select bank0
  5280  0116' 0825'              	movf	?___ftneg+1,w
  5281  0117' 1683               	bsf	3,5	;RP0=1, select bank1
  5282  0118' 1303               	bcf	3,6	;RP1=0, select bank1
  5283  0119' 0080'              	movwf	(sprintf@fval+1)^(0+128)
  5284  011A' 1283               	bcf	3,5	;RP0=0, select bank0
  5285  011B' 1303               	bcf	3,6	;RP1=0, select bank0
  5286  011C' 0826'              	movf	?___ftneg+2,w
  5287  011D' 1683               	bsf	3,5	;RP0=1, select bank1
  5288  011E' 1303               	bcf	3,6	;RP1=0, select bank1
  5289  011F' 0080'              	movwf	(sprintf@fval+2)^(0+128)
  5290                           
  5291                           ;doprnt.c: 833: flag |= 0x03;
  5292  0120' 3003               	movlw	3
  5293  0121' 0480'              	iorwf	sprintf@flag^(0+128),f
  5294  0122' 3000               	movlw	0
  5295  0123' 0480'              	iorwf	(sprintf@flag+1)^(0+128),f
  5296  0124'                    l4596:	
  5297                           
  5298                           ;doprnt.c: 834: }
  5299                           ;doprnt.c: 835: exp = 0;
  5300  0124' 1683               	bsf	3,5	;RP0=1, select bank1
  5301  0125' 1303               	bcf	3,6	;RP1=0, select bank1
  5302  0126' 0180'              	clrf	sprintf@exp^(0+128)
  5303  0127' 0180'              	clrf	(sprintf@exp+1)^(0+128)
  5304                           
  5305                           ;doprnt.c: 836: if( fval!=0) {
  5306  0128' 0800'              	movf	(sprintf@fval+2)^(0+128),w
  5307  0129' 0400'              	iorwf	(sprintf@fval+1)^(0+128),w
  5308  012A' 0400'              	iorwf	sprintf@fval^(0+128),w
  5309  012B' 1903               	skipnz
  5310  012C' 2800'              	goto	l4624
  5311                           
  5312                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5313  012D' 3000'              	movlw	low (sprintf@fval| 0)
  5314  012E' 0084               	movwf	4
  5315  012F' 1383               	bcf	3,7	;select IRP bank1
  5316  0130' 0800               	movf	0,w
  5317  0131' 0080'              	movwf	??_sprintf^(0+128)
  5318  0132' 0A84               	incf	4,f
  5319  0133' 0800               	movf	0,w
  5320  0134' 0081'              	movwf	(??_sprintf^(0+128)+1)
  5321  0135' 0A84               	incf	4,f
  5322  0136' 0800               	movf	0,w
  5323  0137' 0082'              	movwf	(??_sprintf^(0+128)+2)
  5324  0138' 0A84               	incf	4,f
  5325  0139' 0800               	movf	0,w
  5326  013A' 0083'              	movwf	(??_sprintf^(0+128)+3)
  5327  013B' 300F               	movlw	15
  5328  013C'                    u7215:	
  5329  013C' 1003               	clrc
  5330  013D' 0C83'              	rrf	(??_sprintf^(0+128)+3),f
  5331  013E' 0C82'              	rrf	(??_sprintf^(0+128)+2),f
  5332  013F' 0C81'              	rrf	(??_sprintf^(0+128)+1),f
  5333  0140' 0C80'              	rrf	??_sprintf^(0+128),f
  5334  0141' 3EFF               	addlw	-1
  5335  0142' 1D03               	skipz
  5336  0143' 2800'              	goto	u7215
  5337  0144' 30FF               	movlw	255
  5338  0145' 0500'              	andwf	??_sprintf^(0+128),w
  5339  0146' 0080'              	movwf	(??_sprintf+4)^(0+128)
  5340  0147' 3000               	movlw	0
  5341  0148' 0500'              	andwf	(??_sprintf+1)^(0+128),w
  5342  0149' 0080'              	movwf	(??_sprintf+5)^(0+128)
  5343  014A' 0800'              	movf	(??_sprintf+4)^(0+128),w
  5344  014B' 3E82               	addlw	130
  5345  014C' 0080'              	movwf	sprintf@exp^(0+128)
  5346  014D' 0800'              	movf	(??_sprintf+5)^(0+128),w
  5347  014E' 1803               	skipnc
  5348  014F' 3E01               	addlw	1
  5349  0150' 3EFF               	addlw	255
  5350  0151' 0080'              	movwf	(sprintf@exp+1)^(0+128)
  5351                           
  5352                           ;doprnt.c: 838: exp--;
  5353  0152' 30FF               	movlw	255
  5354  0153' 0780'              	addwf	sprintf@exp^(0+128),f
  5355  0154' 1803               	skipnc
  5356  0155' 0A80'              	incf	(sprintf@exp+1)^(0+128),f
  5357  0156' 30FF               	movlw	255
  5358  0157' 0780'              	addwf	(sprintf@exp+1)^(0+128),f
  5359                           
  5360                           ;doprnt.c: 839: exp *= 3;
  5361  0158' 3003               	movlw	3
  5362  0159' 1283               	bcf	3,5	;RP0=0, select bank0
  5363  015A' 1303               	bcf	3,6	;RP1=0, select bank0
  5364  015B' 0080'              	movwf	___wmul@multiplier
  5365  015C' 3000               	movlw	0
  5366  015D' 0081'              	movwf	___wmul@multiplier+1
  5367  015E' 1683               	bsf	3,5	;RP0=1, select bank1
  5368  015F' 1303               	bcf	3,6	;RP1=0, select bank1
  5369  0160' 0800'              	movf	(sprintf@exp+1)^(0+128),w
  5370  0161' 1283               	bcf	3,5	;RP0=0, select bank0
  5371  0162' 1303               	bcf	3,6	;RP1=0, select bank0
  5372  0163' 0083'              	movwf	___wmul@multiplicand+1
  5373  0164' 1683               	bsf	3,5	;RP0=1, select bank1
  5374  0165' 1303               	bcf	3,6	;RP1=0, select bank1
  5375  0166' 0800'              	movf	sprintf@exp^(0+128),w
  5376  0167' 1283               	bcf	3,5	;RP0=0, select bank0
  5377  0168' 1303               	bcf	3,6	;RP1=0, select bank0
  5378  0169' 0082'              	movwf	___wmul@multiplicand
  5379  016A' 120A' 118A' 2000' 120A' 118A' 	fcall	___wmul
  5380  016F' 1283               	bcf	3,5	;RP0=0, select bank0
  5381  0170' 1303               	bcf	3,6	;RP1=0, select bank0
  5382  0171' 0801'              	movf	?___wmul+1,w
  5383  0172' 1683               	bsf	3,5	;RP0=1, select bank1
  5384  0173' 1303               	bcf	3,6	;RP1=0, select bank1
  5385  0174' 0080'              	movwf	(sprintf@exp+1)^(0+128)
  5386  0175' 1283               	bcf	3,5	;RP0=0, select bank0
  5387  0176' 1303               	bcf	3,6	;RP1=0, select bank0
  5388  0177' 0800'              	movf	?___wmul,w
  5389  0178' 1683               	bsf	3,5	;RP0=1, select bank1
  5390  0179' 1303               	bcf	3,6	;RP1=0, select bank1
  5391  017A' 0080'              	movwf	sprintf@exp^(0+128)
  5392                           
  5393                           ;doprnt.c: 840: exp /= 10;
  5394  017B' 300A               	movlw	10
  5395  017C' 1283               	bcf	3,5	;RP0=0, select bank0
  5396  017D' 1303               	bcf	3,6	;RP1=0, select bank0
  5397  017E' 0087'              	movwf	___awdiv@divisor
  5398  017F' 3000               	movlw	0
  5399  0180' 0088'              	movwf	___awdiv@divisor+1
  5400  0181' 1683               	bsf	3,5	;RP0=1, select bank1
  5401  0182' 1303               	bcf	3,6	;RP1=0, select bank1
  5402  0183' 0800'              	movf	(sprintf@exp+1)^(0+128),w
  5403  0184' 1283               	bcf	3,5	;RP0=0, select bank0
  5404  0185' 1303               	bcf	3,6	;RP1=0, select bank0
  5405  0186' 008A'              	movwf	___awdiv@dividend+1
  5406  0187' 1683               	bsf	3,5	;RP0=1, select bank1
  5407  0188' 1303               	bcf	3,6	;RP1=0, select bank1
  5408  0189' 0800'              	movf	sprintf@exp^(0+128),w
  5409  018A' 1283               	bcf	3,5	;RP0=0, select bank0
  5410  018B' 1303               	bcf	3,6	;RP1=0, select bank0
  5411  018C' 0089'              	movwf	___awdiv@dividend
  5412  018D' 120A' 118A' 2000' 120A' 118A' 	fcall	___awdiv
  5413  0192' 1283               	bcf	3,5	;RP0=0, select bank0
  5414  0193' 1303               	bcf	3,6	;RP1=0, select bank0
  5415  0194' 0808'              	movf	?___awdiv+1,w
  5416  0195' 1683               	bsf	3,5	;RP0=1, select bank1
  5417  0196' 1303               	bcf	3,6	;RP1=0, select bank1
  5418  0197' 0080'              	movwf	(sprintf@exp+1)^(0+128)
  5419  0198' 1283               	bcf	3,5	;RP0=0, select bank0
  5420  0199' 1303               	bcf	3,6	;RP1=0, select bank0
  5421  019A' 0807'              	movf	?___awdiv,w
  5422  019B' 1683               	bsf	3,5	;RP0=1, select bank1
  5423  019C' 1303               	bcf	3,6	;RP1=0, select bank1
  5424  019D' 0080'              	movwf	sprintf@exp^(0+128)
  5425                           
  5426                           ;doprnt.c: 841: if(exp < 0)
  5427  019E' 1F80'              	btfss	(sprintf@exp+1)^(0+128),7
  5428  019F' 2800'              	goto	l4612
  5429                           
  5430                           ;doprnt.c: 842: exp--;
  5431  01A0' 30FF               	movlw	255
  5432  01A1' 0780'              	addwf	sprintf@exp^(0+128),f
  5433  01A2' 1803               	skipnc
  5434  01A3' 0A80'              	incf	(sprintf@exp+1)^(0+128),f
  5435  01A4' 30FF               	movlw	255
  5436  01A5' 0780'              	addwf	(sprintf@exp+1)^(0+128),f
  5437  01A6'                    l4612:	
  5438                           
  5439                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5440  01A6' 0300'              	decf	sprintf@exp^(0+128),w
  5441  01A7' 3AFF               	xorlw	255
  5442  01A8' 120A' 118A' 2000' 120A' 118A' 	fcall	_scale
  5443  01AD' 1283               	bcf	3,5	;RP0=0, select bank0
  5444  01AE' 1303               	bcf	3,6	;RP1=0, select bank0
  5445  01AF' 0824'              	movf	?_scale,w
  5446  01B0' 1683               	bsf	3,5	;RP0=1, select bank1
  5447  01B1' 1303               	bcf	3,6	;RP1=0, select bank1
  5448  01B2' 0080'              	movwf	sprintf@tmpval^(0+128)
  5449  01B3' 1283               	bcf	3,5	;RP0=0, select bank0
  5450  01B4' 1303               	bcf	3,6	;RP1=0, select bank0
  5451  01B5' 0825'              	movf	?_scale+1,w
  5452  01B6' 1683               	bsf	3,5	;RP0=1, select bank1
  5453  01B7' 1303               	bcf	3,6	;RP1=0, select bank1
  5454  01B8' 0080'              	movwf	(sprintf@tmpval+1)^(0+128)
  5455  01B9' 1283               	bcf	3,5	;RP0=0, select bank0
  5456  01BA' 1303               	bcf	3,6	;RP1=0, select bank0
  5457  01BB' 0826'              	movf	?_scale+2,w
  5458  01BC' 1683               	bsf	3,5	;RP0=1, select bank1
  5459  01BD' 1303               	bcf	3,6	;RP1=0, select bank1
  5460  01BE' 0080'              	movwf	(sprintf@tmpval+2)^(0+128)
  5461                           
  5462                           ;doprnt.c: 847: tmpval.integ *= fval;
  5463  01BF' 0800'              	movf	sprintf@fval^(0+128),w
  5464  01C0' 1283               	bcf	3,5	;RP0=0, select bank0
  5465  01C1' 1303               	bcf	3,6	;RP1=0, select bank0
  5466  01C2' 0094'              	movwf	___ftmul@f1
  5467  01C3' 1683               	bsf	3,5	;RP0=1, select bank1
  5468  01C4' 1303               	bcf	3,6	;RP1=0, select bank1
  5469  01C5' 0800'              	movf	(sprintf@fval+1)^(0+128),w
  5470  01C6' 1283               	bcf	3,5	;RP0=0, select bank0
  5471  01C7' 1303               	bcf	3,6	;RP1=0, select bank0
  5472  01C8' 0095'              	movwf	___ftmul@f1+1
  5473  01C9' 1683               	bsf	3,5	;RP0=1, select bank1
  5474  01CA' 1303               	bcf	3,6	;RP1=0, select bank1
  5475  01CB' 0800'              	movf	(sprintf@fval+2)^(0+128),w
  5476  01CC' 1283               	bcf	3,5	;RP0=0, select bank0
  5477  01CD' 1303               	bcf	3,6	;RP1=0, select bank0
  5478  01CE' 0096'              	movwf	___ftmul@f1+2
  5479  01CF' 1683               	bsf	3,5	;RP0=1, select bank1
  5480  01D0' 1303               	bcf	3,6	;RP1=0, select bank1
  5481  01D1' 0800'              	movf	sprintf@tmpval^(0+128),w
  5482  01D2' 1283               	bcf	3,5	;RP0=0, select bank0
  5483  01D3' 1303               	bcf	3,6	;RP1=0, select bank0
  5484  01D4' 0097'              	movwf	___ftmul@f2
  5485  01D5' 1683               	bsf	3,5	;RP0=1, select bank1
  5486  01D6' 1303               	bcf	3,6	;RP1=0, select bank1
  5487  01D7' 0800'              	movf	(sprintf@tmpval+1)^(0+128),w
  5488  01D8' 1283               	bcf	3,5	;RP0=0, select bank0
  5489  01D9' 1303               	bcf	3,6	;RP1=0, select bank0
  5490  01DA' 0098'              	movwf	___ftmul@f2+1
  5491  01DB' 1683               	bsf	3,5	;RP0=1, select bank1
  5492  01DC' 1303               	bcf	3,6	;RP1=0, select bank1
  5493  01DD' 0800'              	movf	(sprintf@tmpval+2)^(0+128),w
  5494  01DE' 1283               	bcf	3,5	;RP0=0, select bank0
  5495  01DF' 1303               	bcf	3,6	;RP1=0, select bank0
  5496  01E0' 0099'              	movwf	___ftmul@f2+2
  5497  01E1' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftmul
  5498  01E6' 1283               	bcf	3,5	;RP0=0, select bank0
  5499  01E7' 1303               	bcf	3,6	;RP1=0, select bank0
  5500  01E8' 0814'              	movf	?___ftmul,w
  5501  01E9' 1683               	bsf	3,5	;RP0=1, select bank1
  5502  01EA' 1303               	bcf	3,6	;RP1=0, select bank1
  5503  01EB' 0080'              	movwf	sprintf@tmpval^(0+128)
  5504  01EC' 1283               	bcf	3,5	;RP0=0, select bank0
  5505  01ED' 1303               	bcf	3,6	;RP1=0, select bank0
  5506  01EE' 0815'              	movf	?___ftmul+1,w
  5507  01EF' 1683               	bsf	3,5	;RP0=1, select bank1
  5508  01F0' 1303               	bcf	3,6	;RP1=0, select bank1
  5509  01F1' 0080'              	movwf	(sprintf@tmpval+1)^(0+128)
  5510  01F2' 1283               	bcf	3,5	;RP0=0, select bank0
  5511  01F3' 1303               	bcf	3,6	;RP1=0, select bank0
  5512  01F4' 0816'              	movf	?___ftmul+2,w
  5513  01F5' 1683               	bsf	3,5	;RP0=1, select bank1
  5514  01F6' 1303               	bcf	3,6	;RP1=0, select bank1
  5515  01F7' 0080'              	movwf	(sprintf@tmpval+2)^(0+128)
  5516                           
  5517                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5518  01F8' 0800'              	movf	sprintf@tmpval^(0+128),w
  5519  01F9' 1283               	bcf	3,5	;RP0=0, select bank0
  5520  01FA' 1303               	bcf	3,6	;RP1=0, select bank0
  5521  01FB' 0080'              	movwf	___ftge@ff1
  5522  01FC' 1683               	bsf	3,5	;RP0=1, select bank1
  5523  01FD' 1303               	bcf	3,6	;RP1=0, select bank1
  5524  01FE' 0800'              	movf	(sprintf@tmpval+1)^(0+128),w
  5525  01FF' 1283               	bcf	3,5	;RP0=0, select bank0
  5526  0200' 1303               	bcf	3,6	;RP1=0, select bank0
  5527  0201' 0081'              	movwf	___ftge@ff1+1
  5528  0202' 1683               	bsf	3,5	;RP0=1, select bank1
  5529  0203' 1303               	bcf	3,6	;RP1=0, select bank1
  5530  0204' 0800'              	movf	(sprintf@tmpval+2)^(0+128),w
  5531  0205' 1283               	bcf	3,5	;RP0=0, select bank0
  5532  0206' 1303               	bcf	3,6	;RP1=0, select bank0
  5533  0207' 0082'              	movwf	___ftge@ff1+2
  5534  0208' 3000               	movlw	0
  5535  0209' 0083'              	movwf	___ftge@ff2
  5536  020A' 3080               	movlw	128
  5537  020B' 0084'              	movwf	___ftge@ff2+1
  5538  020C' 303F               	movlw	63
  5539  020D' 0085'              	movwf	___ftge@ff2+2
  5540  020E' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftge
  5541  0213' 1803               	btfsc	3,0
  5542  0214' 2800'              	goto	l4620
  5543                           
  5544                           ;doprnt.c: 849: exp--;
  5545  0215' 30FF               	movlw	255
  5546  0216' 1683               	bsf	3,5	;RP0=1, select bank1
  5547  0217' 1303               	bcf	3,6	;RP1=0, select bank1
  5548  0218' 0780'              	addwf	sprintf@exp^(0+128),f
  5549  0219' 1803               	skipnc
  5550  021A' 0A80'              	incf	(sprintf@exp+1)^(0+128),f
  5551  021B' 30FF               	movlw	255
  5552  021C' 2800'              	goto	L4
  5553  021D'                    l4620:	
  5554                           
  5555                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5556  021D' 1683               	bsf	3,5	;RP0=1, select bank1
  5557  021E' 1303               	bcf	3,6	;RP1=0, select bank1
  5558  021F' 0800'              	movf	sprintf@tmpval^(0+128),w
  5559  0220' 1283               	bcf	3,5	;RP0=0, select bank0
  5560  0221' 1303               	bcf	3,6	;RP1=0, select bank0
  5561  0222' 0080'              	movwf	___ftge@ff1
  5562  0223' 1683               	bsf	3,5	;RP0=1, select bank1
  5563  0224' 1303               	bcf	3,6	;RP1=0, select bank1
  5564  0225' 0800'              	movf	(sprintf@tmpval+1)^(0+128),w
  5565  0226' 1283               	bcf	3,5	;RP0=0, select bank0
  5566  0227' 1303               	bcf	3,6	;RP1=0, select bank0
  5567  0228' 0081'              	movwf	___ftge@ff1+1
  5568  0229' 1683               	bsf	3,5	;RP0=1, select bank1
  5569  022A' 1303               	bcf	3,6	;RP1=0, select bank1
  5570  022B' 0800'              	movf	(sprintf@tmpval+2)^(0+128),w
  5571  022C' 1283               	bcf	3,5	;RP0=0, select bank0
  5572  022D' 1303               	bcf	3,6	;RP1=0, select bank0
  5573  022E' 0082'              	movwf	___ftge@ff1+2
  5574  022F' 3000               	movlw	0
  5575  0230' 0083'              	movwf	___ftge@ff2
  5576  0231' 3020               	movlw	32
  5577  0232' 0084'              	movwf	___ftge@ff2+1
  5578  0233' 3041               	movlw	65
  5579  0234' 0085'              	movwf	___ftge@ff2+2
  5580  0235' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftge
  5581  023A' 1C03               	btfss	3,0
  5582  023B' 2800'              	goto	l4624
  5583                           
  5584                           ;doprnt.c: 851: exp++;
  5585  023C' 3001               	movlw	1
  5586  023D' 1683               	bsf	3,5	;RP0=1, select bank1
  5587  023E' 1303               	bcf	3,6	;RP1=0, select bank1
  5588  023F' 0780'              	addwf	sprintf@exp^(0+128),f
  5589  0240' 1803               	skipnc
  5590  0241' 0A80'              	incf	(sprintf@exp+1)^(0+128),f
  5591  0242' 3000               	movlw	0
  5592  0243'                    L4:	
  5593  0243' 0780'              	addwf	(sprintf@exp+1)^(0+128),f
  5594  0244'                    l4624:	
  5595                           
  5596                           ;doprnt.c: 852: }
  5597                           ;doprnt.c: 1112: if(prec <= 12)
  5598  0244' 1683               	bsf	3,5	;RP0=1, select bank1
  5599  0245' 1303               	bcf	3,6	;RP1=0, select bank1
  5600  0246' 0800'              	movf	(sprintf@prec+1)^(0+128),w
  5601  0247' 3A80               	xorlw	128
  5602  0248' 00FF               	movwf	127
  5603  0249' 3080               	movlw	128
  5604  024A' 027F               	subwf	127,w
  5605  024B' 1D03               	skipz
  5606  024C' 2800'              	goto	u7255
  5607  024D' 300D               	movlw	13
  5608  024E' 0200'              	subwf	sprintf@prec^(0+128),w
  5609  024F'                    u7255:	
  5610  024F' 1803               	skipnc
  5611  0250' 2800'              	goto	l4628
  5612                           
  5613                           ;doprnt.c: 1113: fval += fround(prec);
  5614  0251' 1683               	bsf	3,5	;RP0=1, select bank1
  5615  0252' 1303               	bcf	3,6	;RP1=0, select bank1
  5616  0253' 0800'              	movf	sprintf@prec^(0+128),w
  5617  0254' 120A' 118A' 2000' 120A' 118A' 	fcall	_fround
  5618  0259' 1283               	bcf	3,5	;RP0=0, select bank0
  5619  025A' 1303               	bcf	3,6	;RP1=0, select bank0
  5620  025B' 0824'              	movf	?_fround,w
  5621  025C' 00B4'              	movwf	___ftadd@f1
  5622  025D' 0825'              	movf	?_fround+1,w
  5623  025E' 00B5'              	movwf	___ftadd@f1+1
  5624  025F' 0826'              	movf	?_fround+2,w
  5625  0260' 00B6'              	movwf	___ftadd@f1+2
  5626  0261' 1683               	bsf	3,5	;RP0=1, select bank1
  5627  0262' 1303               	bcf	3,6	;RP1=0, select bank1
  5628  0263' 0800'              	movf	sprintf@fval^(0+128),w
  5629  0264' 1283               	bcf	3,5	;RP0=0, select bank0
  5630  0265' 1303               	bcf	3,6	;RP1=0, select bank0
  5631  0266' 00B7'              	movwf	___ftadd@f2
  5632  0267' 1683               	bsf	3,5	;RP0=1, select bank1
  5633  0268' 1303               	bcf	3,6	;RP1=0, select bank1
  5634  0269' 0800'              	movf	(sprintf@fval+1)^(0+128),w
  5635  026A' 1283               	bcf	3,5	;RP0=0, select bank0
  5636  026B' 1303               	bcf	3,6	;RP1=0, select bank0
  5637  026C' 00B8'              	movwf	___ftadd@f2+1
  5638  026D' 1683               	bsf	3,5	;RP0=1, select bank1
  5639  026E' 1303               	bcf	3,6	;RP1=0, select bank1
  5640  026F' 0800'              	movf	(sprintf@fval+2)^(0+128),w
  5641  0270' 1283               	bcf	3,5	;RP0=0, select bank0
  5642  0271' 1303               	bcf	3,6	;RP1=0, select bank0
  5643  0272' 00B9'              	movwf	___ftadd@f2+2
  5644  0273' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftadd
  5645  0278' 1283               	bcf	3,5	;RP0=0, select bank0
  5646  0279' 1303               	bcf	3,6	;RP1=0, select bank0
  5647  027A' 0834'              	movf	?___ftadd,w
  5648  027B' 1683               	bsf	3,5	;RP0=1, select bank1
  5649  027C' 1303               	bcf	3,6	;RP1=0, select bank1
  5650  027D' 0080'              	movwf	sprintf@fval^(0+128)
  5651  027E' 1283               	bcf	3,5	;RP0=0, select bank0
  5652  027F' 1303               	bcf	3,6	;RP1=0, select bank0
  5653  0280' 0835'              	movf	?___ftadd+1,w
  5654  0281' 1683               	bsf	3,5	;RP0=1, select bank1
  5655  0282' 1303               	bcf	3,6	;RP1=0, select bank1
  5656  0283' 0080'              	movwf	(sprintf@fval+1)^(0+128)
  5657  0284' 1283               	bcf	3,5	;RP0=0, select bank0
  5658  0285' 1303               	bcf	3,6	;RP1=0, select bank0
  5659  0286' 0836'              	movf	?___ftadd+2,w
  5660  0287' 1683               	bsf	3,5	;RP0=1, select bank1
  5661  0288' 1303               	bcf	3,6	;RP1=0, select bank1
  5662  0289' 0080'              	movwf	(sprintf@fval+2)^(0+128)
  5663  028A'                    l4628:	
  5664                           
  5665                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5666  028A' 1683               	bsf	3,5	;RP0=1, select bank1
  5667  028B' 1303               	bcf	3,6	;RP1=0, select bank1
  5668  028C' 0800'              	movf	(sprintf@exp+1)^(0+128),w
  5669  028D' 3A80               	xorlw	128
  5670  028E' 00FF               	movwf	127
  5671  028F' 3080               	movlw	128
  5672  0290' 027F               	subwf	127,w
  5673  0291' 1D03               	skipz
  5674  0292' 2800'              	goto	u7265
  5675  0293' 300A               	movlw	10
  5676  0294' 0200'              	subwf	sprintf@exp^(0+128),w
  5677  0295'                    u7265:	
  5678  0295' 1803               	skipnc
  5679  0296' 2800'              	goto	l4636
  5680  0297' 1683               	bsf	3,5	;RP0=1, select bank1
  5681  0298' 1303               	bcf	3,6	;RP1=0, select bank1
  5682  0299' 0800'              	movf	(sprintf@fval+2)^(0+128),w
  5683  029A' 0400'              	iorwf	(sprintf@fval+1)^(0+128),w
  5684  029B' 0400'              	iorwf	sprintf@fval^(0+128),w
  5685  029C' 1903               	skipnz
  5686  029D' 2800'              	goto	l4650
  5687  029E' 0800'              	movf	sprintf@fval^(0+128),w
  5688  029F' 1283               	bcf	3,5	;RP0=0, select bank0
  5689  02A0' 1303               	bcf	3,6	;RP1=0, select bank0
  5690  02A1' 00AD'              	movwf	___fttol@f1
  5691  02A2' 1683               	bsf	3,5	;RP0=1, select bank1
  5692  02A3' 1303               	bcf	3,6	;RP1=0, select bank1
  5693  02A4' 0800'              	movf	(sprintf@fval+1)^(0+128),w
  5694  02A5' 1283               	bcf	3,5	;RP0=0, select bank0
  5695  02A6' 1303               	bcf	3,6	;RP1=0, select bank0
  5696  02A7' 00AE'              	movwf	___fttol@f1+1
  5697  02A8' 1683               	bsf	3,5	;RP0=1, select bank1
  5698  02A9' 1303               	bcf	3,6	;RP1=0, select bank1
  5699  02AA' 0800'              	movf	(sprintf@fval+2)^(0+128),w
  5700  02AB' 1283               	bcf	3,5	;RP0=0, select bank0
  5701  02AC' 1303               	bcf	3,6	;RP1=0, select bank0
  5702  02AD' 00AF'              	movwf	___fttol@f1+2
  5703  02AE' 120A' 118A' 2000' 120A' 118A' 	fcall	___fttol
  5704  02B3' 1283               	bcf	3,5	;RP0=0, select bank0
  5705  02B4' 1303               	bcf	3,6	;RP1=0, select bank0
  5706  02B5' 0830'              	movf	?___fttol+3,w
  5707  02B6' 042F'              	iorwf	?___fttol+2,w
  5708  02B7' 042E'              	iorwf	?___fttol+1,w
  5709  02B8' 042D'              	iorwf	?___fttol,w
  5710  02B9' 1D03               	skipz
  5711  02BA' 2800'              	goto	l4650
  5712  02BB' 1683               	bsf	3,5	;RP0=1, select bank1
  5713  02BC' 1303               	bcf	3,6	;RP1=0, select bank1
  5714  02BD' 0800'              	movf	(sprintf@exp+1)^(0+128),w
  5715  02BE' 3A80               	xorlw	128
  5716  02BF' 00FF               	movwf	127
  5717  02C0' 3080               	movlw	128
  5718  02C1' 027F               	subwf	127,w
  5719  02C2' 1D03               	skipz
  5720  02C3' 2800'              	goto	u7295
  5721  02C4' 3002               	movlw	2
  5722  02C5' 0200'              	subwf	sprintf@exp^(0+128),w
  5723  02C6'                    u7295:	
  5724  02C6' 1C03               	skipc
  5725  02C7' 2800'              	goto	l4650
  5726  02C8'                    l4636:	
  5727                           
  5728                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5729  02C8' 1683               	bsf	3,5	;RP0=1, select bank1
  5730  02C9' 1303               	bcf	3,6	;RP1=0, select bank1
  5731  02CA' 0800'              	movf	sprintf@tmpval^(0+128),w
  5732  02CB' 1283               	bcf	3,5	;RP0=0, select bank0
  5733  02CC' 1303               	bcf	3,6	;RP1=0, select bank0
  5734  02CD' 0080'              	movwf	___ftge@ff1
  5735  02CE' 1683               	bsf	3,5	;RP0=1, select bank1
  5736  02CF' 1303               	bcf	3,6	;RP1=0, select bank1
  5737  02D0' 0800'              	movf	(sprintf@tmpval+1)^(0+128),w
  5738  02D1' 1283               	bcf	3,5	;RP0=0, select bank0
  5739  02D2' 1303               	bcf	3,6	;RP1=0, select bank0
  5740  02D3' 0081'              	movwf	___ftge@ff1+1
  5741  02D4' 1683               	bsf	3,5	;RP0=1, select bank1
  5742  02D5' 1303               	bcf	3,6	;RP1=0, select bank1
  5743  02D6' 0800'              	movf	(sprintf@tmpval+2)^(0+128),w
  5744  02D7' 1283               	bcf	3,5	;RP0=0, select bank0
  5745  02D8' 1303               	bcf	3,6	;RP1=0, select bank0
  5746  02D9' 0082'              	movwf	___ftge@ff1+2
  5747  02DA' 3070               	movlw	112
  5748  02DB' 0083'              	movwf	___ftge@ff2
  5749  02DC' 3089               	movlw	137
  5750  02DD' 0084'              	movwf	___ftge@ff2+1
  5751  02DE' 3040               	movlw	64
  5752  02DF' 0085'              	movwf	___ftge@ff2+2
  5753  02E0' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftge
  5754  02E5' 1803               	btfsc	3,0
  5755  02E6' 2800'              	goto	l4640
  5756                           
  5757                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5758  02E7' 30F7               	movlw	247
  5759  02E8' 2800'              	goto	L5
  5760  02E9'                    l4640:	
  5761                           ;doprnt.c: 1122: }else{
  5762                           
  5763                           
  5764                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5765  02E9' 30F8               	movlw	248
  5766  02EA'                    L5:	
  5767  02EA' 1683               	bsf	3,5	;RP0=1, select bank1
  5768  02EB' 1303               	bcf	3,6	;RP1=0, select bank1
  5769  02EC' 0780'              	addwf	sprintf@exp^(0+128),f
  5770  02ED' 1803               	skipnc
  5771  02EE' 0A80'              	incf	(sprintf@exp+1)^(0+128),f
  5772  02EF' 30FF               	movlw	255
  5773  02F0' 0780'              	addwf	(sprintf@exp+1)^(0+128),f
  5774                           
  5775                           ;doprnt.c: 1124: }
  5776                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5777  02F1' 0800'              	movf	sprintf@exp^(0+128),w
  5778  02F2' 120A' 118A' 2000' 120A' 118A' 	fcall	_scale
  5779  02F7' 1283               	bcf	3,5	;RP0=0, select bank0
  5780  02F8' 1303               	bcf	3,6	;RP1=0, select bank0
  5781  02F9' 0824'              	movf	?_scale,w
  5782  02FA' 1683               	bsf	3,5	;RP0=1, select bank1
  5783  02FB' 1303               	bcf	3,6	;RP1=0, select bank1
  5784  02FC' 0080'              	movwf	sprintf@tmpval^(0+128)
  5785  02FD' 1283               	bcf	3,5	;RP0=0, select bank0
  5786  02FE' 1303               	bcf	3,6	;RP1=0, select bank0
  5787  02FF' 0825'              	movf	?_scale+1,w
  5788  0300' 1683               	bsf	3,5	;RP0=1, select bank1
  5789  0301' 1303               	bcf	3,6	;RP1=0, select bank1
  5790  0302' 0080'              	movwf	(sprintf@tmpval+1)^(0+128)
  5791  0303' 1283               	bcf	3,5	;RP0=0, select bank0
  5792  0304' 1303               	bcf	3,6	;RP1=0, select bank0
  5793  0305' 0826'              	movf	?_scale+2,w
  5794  0306' 1683               	bsf	3,5	;RP0=1, select bank1
  5795  0307' 1303               	bcf	3,6	;RP1=0, select bank1
  5796  0308' 0080'              	movwf	(sprintf@tmpval+2)^(0+128)
  5797                           
  5798                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5799  0309' 0800'              	movf	sprintf@fval^(0+128),w
  5800  030A' 1283               	bcf	3,5	;RP0=0, select bank0
  5801  030B' 1303               	bcf	3,6	;RP1=0, select bank0
  5802  030C' 0080'              	movwf	__tdiv_to_l_@f1
  5803  030D' 1683               	bsf	3,5	;RP0=1, select bank1
  5804  030E' 1303               	bcf	3,6	;RP1=0, select bank1
  5805  030F' 0800'              	movf	(sprintf@fval+1)^(0+128),w
  5806  0310' 1283               	bcf	3,5	;RP0=0, select bank0
  5807  0311' 1303               	bcf	3,6	;RP1=0, select bank0
  5808  0312' 0081'              	movwf	__tdiv_to_l_@f1+1
  5809  0313' 1683               	bsf	3,5	;RP0=1, select bank1
  5810  0314' 1303               	bcf	3,6	;RP1=0, select bank1
  5811  0315' 0800'              	movf	(sprintf@fval+2)^(0+128),w
  5812  0316' 1283               	bcf	3,5	;RP0=0, select bank0
  5813  0317' 1303               	bcf	3,6	;RP1=0, select bank0
  5814  0318' 0082'              	movwf	__tdiv_to_l_@f1+2
  5815  0319' 1683               	bsf	3,5	;RP0=1, select bank1
  5816  031A' 1303               	bcf	3,6	;RP1=0, select bank1
  5817  031B' 0800'              	movf	sprintf@tmpval^(0+128),w
  5818  031C' 1283               	bcf	3,5	;RP0=0, select bank0
  5819  031D' 1303               	bcf	3,6	;RP1=0, select bank0
  5820  031E' 0083'              	movwf	__tdiv_to_l_@f2
  5821  031F' 1683               	bsf	3,5	;RP0=1, select bank1
  5822  0320' 1303               	bcf	3,6	;RP1=0, select bank1
  5823  0321' 0800'              	movf	(sprintf@tmpval+1)^(0+128),w
  5824  0322' 1283               	bcf	3,5	;RP0=0, select bank0
  5825  0323' 1303               	bcf	3,6	;RP1=0, select bank0
  5826  0324' 0084'              	movwf	__tdiv_to_l_@f2+1
  5827  0325' 1683               	bsf	3,5	;RP0=1, select bank1
  5828  0326' 1303               	bcf	3,6	;RP1=0, select bank1
  5829  0327' 0800'              	movf	(sprintf@tmpval+2)^(0+128),w
  5830  0328' 1283               	bcf	3,5	;RP0=0, select bank0
  5831  0329' 1303               	bcf	3,6	;RP1=0, select bank0
  5832  032A' 0085'              	movwf	__tdiv_to_l_@f2+2
  5833  032B' 120A' 118A' 2000' 120A' 118A' 	fcall	__tdiv_to_l_
  5834  0330' 1283               	bcf	3,5	;RP0=0, select bank0
  5835  0331' 1303               	bcf	3,6	;RP1=0, select bank0
  5836  0332' 0803'              	movf	?__tdiv_to_l_+3,w
  5837  0333' 1683               	bsf	3,5	;RP0=1, select bank1
  5838  0334' 1303               	bcf	3,6	;RP1=0, select bank1
  5839  0335' 0080'              	movwf	(sprintf@val+3)^(0+128)
  5840  0336' 1283               	bcf	3,5	;RP0=0, select bank0
  5841  0337' 1303               	bcf	3,6	;RP1=0, select bank0
  5842  0338' 0802'              	movf	?__tdiv_to_l_+2,w
  5843  0339' 1683               	bsf	3,5	;RP0=1, select bank1
  5844  033A' 1303               	bcf	3,6	;RP1=0, select bank1
  5845  033B' 0080'              	movwf	(sprintf@val+2)^(0+128)
  5846  033C' 1283               	bcf	3,5	;RP0=0, select bank0
  5847  033D' 1303               	bcf	3,6	;RP1=0, select bank0
  5848  033E' 0801'              	movf	?__tdiv_to_l_+1,w
  5849  033F' 1683               	bsf	3,5	;RP0=1, select bank1
  5850  0340' 1303               	bcf	3,6	;RP1=0, select bank1
  5851  0341' 0080'              	movwf	(sprintf@val+1)^(0+128)
  5852  0342' 1283               	bcf	3,5	;RP0=0, select bank0
  5853  0343' 1303               	bcf	3,6	;RP1=0, select bank0
  5854  0344' 0800'              	movf	?__tdiv_to_l_,w
  5855  0345' 1683               	bsf	3,5	;RP0=1, select bank1
  5856  0346' 1303               	bcf	3,6	;RP1=0, select bank1
  5857  0347' 0080'              	movwf	sprintf@val^(0+128)
  5858                           
  5859                           ;doprnt.c: 1129: fval = 0.0;
  5860  0348' 3000               	movlw	0
  5861  0349' 0080'              	movwf	sprintf@fval^(0+128)
  5862  034A' 3000               	movlw	0
  5863  034B' 0080'              	movwf	(sprintf@fval+1)^(0+128)
  5864  034C' 3000               	movlw	0
  5865  034D' 0080'              	movwf	(sprintf@fval+2)^(0+128)
  5866                           
  5867                           ;doprnt.c: 1130: } else {
  5868  034E' 2800'              	goto	l4654
  5869  034F'                    l4650:	
  5870                           
  5871                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5872  034F' 1683               	bsf	3,5	;RP0=1, select bank1
  5873  0350' 1303               	bcf	3,6	;RP1=0, select bank1
  5874  0351' 0800'              	movf	sprintf@fval^(0+128),w
  5875  0352' 1283               	bcf	3,5	;RP0=0, select bank0
  5876  0353' 1303               	bcf	3,6	;RP1=0, select bank0
  5877  0354' 00AD'              	movwf	___fttol@f1
  5878  0355' 1683               	bsf	3,5	;RP0=1, select bank1
  5879  0356' 1303               	bcf	3,6	;RP1=0, select bank1
  5880  0357' 0800'              	movf	(sprintf@fval+1)^(0+128),w
  5881  0358' 1283               	bcf	3,5	;RP0=0, select bank0
  5882  0359' 1303               	bcf	3,6	;RP1=0, select bank0
  5883  035A' 00AE'              	movwf	___fttol@f1+1
  5884  035B' 1683               	bsf	3,5	;RP0=1, select bank1
  5885  035C' 1303               	bcf	3,6	;RP1=0, select bank1
  5886  035D' 0800'              	movf	(sprintf@fval+2)^(0+128),w
  5887  035E' 1283               	bcf	3,5	;RP0=0, select bank0
  5888  035F' 1303               	bcf	3,6	;RP1=0, select bank0
  5889  0360' 00AF'              	movwf	___fttol@f1+2
  5890  0361' 120A' 118A' 2000' 120A' 118A' 	fcall	___fttol
  5891  0366' 1283               	bcf	3,5	;RP0=0, select bank0
  5892  0367' 1303               	bcf	3,6	;RP1=0, select bank0
  5893  0368' 0830'              	movf	?___fttol+3,w
  5894  0369' 1683               	bsf	3,5	;RP0=1, select bank1
  5895  036A' 1303               	bcf	3,6	;RP1=0, select bank1
  5896  036B' 0080'              	movwf	(sprintf@val+3)^(0+128)
  5897  036C' 1283               	bcf	3,5	;RP0=0, select bank0
  5898  036D' 1303               	bcf	3,6	;RP1=0, select bank0
  5899  036E' 082F'              	movf	?___fttol+2,w
  5900  036F' 1683               	bsf	3,5	;RP0=1, select bank1
  5901  0370' 1303               	bcf	3,6	;RP1=0, select bank1
  5902  0371' 0080'              	movwf	(sprintf@val+2)^(0+128)
  5903  0372' 1283               	bcf	3,5	;RP0=0, select bank0
  5904  0373' 1303               	bcf	3,6	;RP1=0, select bank0
  5905  0374' 082E'              	movf	?___fttol+1,w
  5906  0375' 1683               	bsf	3,5	;RP0=1, select bank1
  5907  0376' 1303               	bcf	3,6	;RP1=0, select bank1
  5908  0377' 0080'              	movwf	(sprintf@val+1)^(0+128)
  5909  0378' 1283               	bcf	3,5	;RP0=0, select bank0
  5910  0379' 1303               	bcf	3,6	;RP1=0, select bank0
  5911  037A' 082D'              	movf	?___fttol,w
  5912  037B' 1683               	bsf	3,5	;RP0=1, select bank1
  5913  037C' 1303               	bcf	3,6	;RP1=0, select bank1
  5914  037D' 0080'              	movwf	sprintf@val^(0+128)
  5915                           
  5916                           ;doprnt.c: 1132: fval -= (double)val;
  5917  037E' 0800'              	movf	(sprintf@val+3)^(0+128),w
  5918  037F' 1283               	bcf	3,5	;RP0=0, select bank0
  5919  0380' 1303               	bcf	3,6	;RP1=0, select bank0
  5920  0381' 008B'              	movwf	___lltoft@c+3
  5921  0382' 1683               	bsf	3,5	;RP0=1, select bank1
  5922  0383' 1303               	bcf	3,6	;RP1=0, select bank1
  5923  0384' 0800'              	movf	(sprintf@val+2)^(0+128),w
  5924  0385' 1283               	bcf	3,5	;RP0=0, select bank0
  5925  0386' 1303               	bcf	3,6	;RP1=0, select bank0
  5926  0387' 008A'              	movwf	___lltoft@c+2
  5927  0388' 1683               	bsf	3,5	;RP0=1, select bank1
  5928  0389' 1303               	bcf	3,6	;RP1=0, select bank1
  5929  038A' 0800'              	movf	(sprintf@val+1)^(0+128),w
  5930  038B' 1283               	bcf	3,5	;RP0=0, select bank0
  5931  038C' 1303               	bcf	3,6	;RP1=0, select bank0
  5932  038D' 0089'              	movwf	___lltoft@c+1
  5933  038E' 1683               	bsf	3,5	;RP0=1, select bank1
  5934  038F' 1303               	bcf	3,6	;RP1=0, select bank1
  5935  0390' 0800'              	movf	sprintf@val^(0+128),w
  5936  0391' 1283               	bcf	3,5	;RP0=0, select bank0
  5937  0392' 1303               	bcf	3,6	;RP1=0, select bank0
  5938  0393' 0088'              	movwf	___lltoft@c
  5939  0394' 120A' 118A' 2000' 120A' 118A' 	fcall	___lltoft
  5940  0399' 1283               	bcf	3,5	;RP0=0, select bank0
  5941  039A' 1303               	bcf	3,6	;RP1=0, select bank0
  5942  039B' 0808'              	movf	?___lltoft,w
  5943  039C' 00C1'              	movwf	___ftsub@f2
  5944  039D' 0809'              	movf	?___lltoft+1,w
  5945  039E' 00C2'              	movwf	___ftsub@f2+1
  5946  039F' 080A'              	movf	?___lltoft+2,w
  5947  03A0' 00C3'              	movwf	___ftsub@f2+2
  5948  03A1' 1683               	bsf	3,5	;RP0=1, select bank1
  5949  03A2' 1303               	bcf	3,6	;RP1=0, select bank1
  5950  03A3' 0800'              	movf	sprintf@fval^(0+128),w
  5951  03A4' 1283               	bcf	3,5	;RP0=0, select bank0
  5952  03A5' 1303               	bcf	3,6	;RP1=0, select bank0
  5953  03A6' 00C4'              	movwf	___ftsub@f1
  5954  03A7' 1683               	bsf	3,5	;RP0=1, select bank1
  5955  03A8' 1303               	bcf	3,6	;RP1=0, select bank1
  5956  03A9' 0800'              	movf	(sprintf@fval+1)^(0+128),w
  5957  03AA' 1283               	bcf	3,5	;RP0=0, select bank0
  5958  03AB' 1303               	bcf	3,6	;RP1=0, select bank0
  5959  03AC' 00C5'              	movwf	___ftsub@f1+1
  5960  03AD' 1683               	bsf	3,5	;RP0=1, select bank1
  5961  03AE' 1303               	bcf	3,6	;RP1=0, select bank1
  5962  03AF' 0800'              	movf	(sprintf@fval+2)^(0+128),w
  5963  03B0' 1283               	bcf	3,5	;RP0=0, select bank0
  5964  03B1' 1303               	bcf	3,6	;RP1=0, select bank0
  5965  03B2' 00C6'              	movwf	___ftsub@f1+2
  5966  03B3' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftsub
  5967  03B8' 1283               	bcf	3,5	;RP0=0, select bank0
  5968  03B9' 1303               	bcf	3,6	;RP1=0, select bank0
  5969  03BA' 0841'              	movf	?___ftsub,w
  5970  03BB' 1683               	bsf	3,5	;RP0=1, select bank1
  5971  03BC' 1303               	bcf	3,6	;RP1=0, select bank1
  5972  03BD' 0080'              	movwf	sprintf@fval^(0+128)
  5973  03BE' 1283               	bcf	3,5	;RP0=0, select bank0
  5974  03BF' 1303               	bcf	3,6	;RP1=0, select bank0
  5975  03C0' 0842'              	movf	?___ftsub+1,w
  5976  03C1' 1683               	bsf	3,5	;RP0=1, select bank1
  5977  03C2' 1303               	bcf	3,6	;RP1=0, select bank1
  5978  03C3' 0080'              	movwf	(sprintf@fval+1)^(0+128)
  5979  03C4' 1283               	bcf	3,5	;RP0=0, select bank0
  5980  03C5' 1303               	bcf	3,6	;RP1=0, select bank0
  5981  03C6' 0843'              	movf	?___ftsub+2,w
  5982  03C7' 1683               	bsf	3,5	;RP0=1, select bank1
  5983  03C8' 1303               	bcf	3,6	;RP1=0, select bank1
  5984  03C9' 0080'              	movwf	(sprintf@fval+2)^(0+128)
  5985                           
  5986                           ;doprnt.c: 1133: exp = 0;
  5987  03CA' 0180'              	clrf	sprintf@exp^(0+128)
  5988  03CB' 0180'              	clrf	(sprintf@exp+1)^(0+128)
  5989  03CC'                    l4654:	
  5990                           
  5991                           ;doprnt.c: 1134: }
  5992                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5993  03CC' 0180'              	clrf	sprintf@c^(0+128)
  5994  03CD' 0A80'              	incf	sprintf@c^(0+128),f
  5995  03CE' 300A               	movlw	10
  5996  03CF' 0600'              	xorwf	sprintf@c^(0+128),w
  5997  03D0' 1903               	btfsc	3,2
  5998  03D1' 2800'              	goto	l4666
  5999  03D2'                    l4660:	
  6000                           
  6001                           ;doprnt.c: 1137: if(val < dpowers[c])
  6002  03D2' 0800'              	movf	sprintf@c^(0+128),w
  6003  03D3' 0080'              	movwf	??_sprintf^(0+128)
  6004  03D4' 3001               	movlw	1
  6005  03D5'                    u7325:	
  6006  03D5' 1003               	clrc
  6007  03D6' 0D80'              	rlf	??_sprintf^(0+128),f
  6008  03D7' 3EFF               	addlw	-1
  6009  03D8' 1D03               	skipz
  6010  03D9' 2800'              	goto	u7325
  6011  03DA' 1003               	clrc
  6012  03DB' 0D00'              	rlf	??_sprintf^(0+128),w
  6013  03DC' 3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  6014  03DD' 0084               	movwf	4
  6015  03DE' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6016  03E3' 0080'              	movwf	(??_sprintf+1)^(0+128)
  6017  03E4' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6018  03E9' 0081'              	movwf	((??_sprintf+1)^(0+128)+1)
  6019  03EA' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6020  03EF' 0082'              	movwf	((??_sprintf+1)^(0+128)+2)
  6021  03F0' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6022  03F5' 0083'              	movwf	((??_sprintf+1)^(0+128)+3)
  6023  03F6' 0800'              	movf	(??_sprintf+4)^(0+128),w
  6024  03F7' 0200'              	subwf	(sprintf@val+3)^(0+128),w
  6025  03F8' 1D03               	skipz
  6026  03F9' 2800'              	goto	u7335
  6027  03FA' 0800'              	movf	(??_sprintf+3)^(0+128),w
  6028  03FB' 0200'              	subwf	(sprintf@val+2)^(0+128),w
  6029  03FC' 1D03               	skipz
  6030  03FD' 2800'              	goto	u7335
  6031  03FE' 0800'              	movf	(??_sprintf+2)^(0+128),w
  6032  03FF' 0200'              	subwf	(sprintf@val+1)^(0+128),w
  6033  0400' 1D03               	skipz
  6034  0401' 2800'              	goto	u7335
  6035  0402' 0800'              	movf	(??_sprintf+1)^(0+128),w
  6036  0403' 0200'              	subwf	sprintf@val^(0+128),w
  6037  0404'                    u7335:	
  6038  0404' 1C03               	btfss	3,0
  6039  0405' 2800'              	goto	l4666
  6040                           
  6041                           ;doprnt.c: 1138: break;
  6042  0406' 3001               	movlw	1
  6043  0407' 0080'              	movwf	??_sprintf^(0+128)
  6044  0408' 0800'              	movf	??_sprintf^(0+128),w
  6045  0409' 0780'              	addwf	sprintf@c^(0+128),f
  6046  040A' 300A               	movlw	10
  6047  040B' 0600'              	xorwf	sprintf@c^(0+128),w
  6048  040C' 1D03               	btfss	3,2
  6049  040D' 2800'              	goto	l4660
  6050  040E'                    l4666:	
  6051                           
  6052                           ;doprnt.c: 1175: {
  6053                           ;doprnt.c: 1188: if(flag & 0x03)
  6054  040E' 3003               	movlw	3
  6055  040F' 0500'              	andwf	sprintf@flag^(0+128),w
  6056  0410' 0080'              	movwf	??_sprintf^(0+128)
  6057  0411' 3000               	movlw	0
  6058  0412' 0500'              	andwf	(sprintf@flag+1)^(0+128),w
  6059  0413' 0080'              	movwf	(??_sprintf+1)^(0+128)
  6060  0414' 0800'              	movf	??_sprintf^(0+128),w
  6061  0415' 0401'              	iorwf	(??_sprintf^(0+128)+1),w
  6062  0416' 1903               	btfsc	3,2
  6063  0417' 2800'              	goto	l261
  6064                           
  6065                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  6066  0418' 302D               	movlw	45
  6067  0419'                    L8:	
  6068  0419' 0080'              	movwf	??_sprintf^(0+128)
  6069  041A' 1283               	bcf	3,5	;RP0=0, select bank0
  6070  041B' 1303               	bcf	3,6	;RP1=0, select bank0
  6071  041C' 0847'              	movf	sprintf@sp,w
  6072  041D' 0084               	movwf	4
  6073  041E' 1783               	bsf	3,7
  6074  041F' 1C48'              	btfss	sprintf@sp+1,0
  6075  0420' 1383               	bcf	3,7
  6076  0421' 1683               	bsf	3,5	;RP0=1, select bank1
  6077  0422' 1303               	bcf	3,6	;RP1=0, select bank1
  6078  0423' 0800'              	movf	??_sprintf^(0+128),w
  6079  0424' 0080               	movwf	0
  6080  0425' 3001               	movlw	1
  6081  0426' 1283               	bcf	3,5	;RP0=0, select bank0
  6082  0427' 1303               	bcf	3,6	;RP1=0, select bank0
  6083  0428' 07C7'              	addwf	sprintf@sp,f
  6084  0429' 1803               	skipnc
  6085  042A' 0AC8'              	incf	sprintf@sp+1,f
  6086  042B'                    l261:	
  6087  042B' 30FF               	movlw	255
  6088  042C' 1683               	bsf	3,5	;RP0=1, select bank1
  6089  042D' 1303               	bcf	3,6	;RP1=0, select bank1
  6090  042E' 0080'              	movwf	??_sprintf^(0+128)
  6091  042F' 0800'              	movf	??_sprintf^(0+128),w
  6092  0430' 0780'              	addwf	sprintf@c^(0+128),f
  6093  0431' 0A00'              	incf	sprintf@c^(0+128),w
  6094  0432' 1903               	btfsc	3,2
  6095  0433' 2800'              	goto	l4686
  6096                           
  6097                           ;doprnt.c: 1200: {
  6098                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  6099                           
  6100                           ;doprnt.c: 1195: }
  6101                           ;doprnt.c: 1196: while(c--) {
  6102  0434' 1683               	bsf	3,5	;RP0=1, select bank1
  6103  0435' 1303               	bcf	3,6	;RP1=0, select bank1
  6104  0436' 0800'              	movf	sprintf@c^(0+128),w
  6105  0437' 0080'              	movwf	??_sprintf^(0+128)
  6106  0438' 3001               	movlw	1
  6107  0439'                    u7365:	
  6108  0439' 1003               	clrc
  6109  043A' 0D80'              	rlf	??_sprintf^(0+128),f
  6110  043B' 3EFF               	addlw	-1
  6111  043C' 1D03               	skipz
  6112  043D' 2800'              	goto	u7365
  6113  043E' 1003               	clrc
  6114  043F' 0D00'              	rlf	??_sprintf^(0+128),w
  6115  0440' 3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  6116  0441' 0084               	movwf	4
  6117  0442' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6118  0447' 1283               	bcf	3,5	;RP0=0, select bank0
  6119  0448' 1303               	bcf	3,6	;RP1=0, select bank0
  6120  0449' 008A'              	movwf	___lldiv@divisor
  6121  044A' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6122  044F' 008B'              	movwf	___lldiv@divisor+1
  6123  0450' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6124  0455' 008C'              	movwf	___lldiv@divisor+2
  6125  0456' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6126  045B' 008D'              	movwf	___lldiv@divisor+3
  6127  045C' 1683               	bsf	3,5	;RP0=1, select bank1
  6128  045D' 1303               	bcf	3,6	;RP1=0, select bank1
  6129  045E' 0800'              	movf	(sprintf@val+3)^(0+128),w
  6130  045F' 1283               	bcf	3,5	;RP0=0, select bank0
  6131  0460' 1303               	bcf	3,6	;RP1=0, select bank0
  6132  0461' 0091'              	movwf	___lldiv@dividend+3
  6133  0462' 1683               	bsf	3,5	;RP0=1, select bank1
  6134  0463' 1303               	bcf	3,6	;RP1=0, select bank1
  6135  0464' 0800'              	movf	(sprintf@val+2)^(0+128),w
  6136  0465' 1283               	bcf	3,5	;RP0=0, select bank0
  6137  0466' 1303               	bcf	3,6	;RP1=0, select bank0
  6138  0467' 0090'              	movwf	___lldiv@dividend+2
  6139  0468' 1683               	bsf	3,5	;RP0=1, select bank1
  6140  0469' 1303               	bcf	3,6	;RP1=0, select bank1
  6141  046A' 0800'              	movf	(sprintf@val+1)^(0+128),w
  6142  046B' 1283               	bcf	3,5	;RP0=0, select bank0
  6143  046C' 1303               	bcf	3,6	;RP1=0, select bank0
  6144  046D' 008F'              	movwf	___lldiv@dividend+1
  6145  046E' 1683               	bsf	3,5	;RP0=1, select bank1
  6146  046F' 1303               	bcf	3,6	;RP1=0, select bank1
  6147  0470' 0800'              	movf	sprintf@val^(0+128),w
  6148  0471' 1283               	bcf	3,5	;RP0=0, select bank0
  6149  0472' 1303               	bcf	3,6	;RP1=0, select bank0
  6150  0473' 008E'              	movwf	___lldiv@dividend
  6151  0474' 120A' 118A' 2000' 120A' 118A' 	fcall	___lldiv
  6152  0479' 1283               	bcf	3,5	;RP0=0, select bank0
  6153  047A' 1303               	bcf	3,6	;RP1=0, select bank0
  6154  047B' 080D'              	movf	?___lldiv+3,w
  6155  047C' 1683               	bsf	3,5	;RP0=1, select bank1
  6156  047D' 1303               	bcf	3,6	;RP1=0, select bank1
  6157  047E' 0080'              	movwf	(sprintf@tmpval+3)^(0+128)
  6158  047F' 1283               	bcf	3,5	;RP0=0, select bank0
  6159  0480' 1303               	bcf	3,6	;RP1=0, select bank0
  6160  0481' 080C'              	movf	?___lldiv+2,w
  6161  0482' 1683               	bsf	3,5	;RP0=1, select bank1
  6162  0483' 1303               	bcf	3,6	;RP1=0, select bank1
  6163  0484' 0080'              	movwf	(sprintf@tmpval+2)^(0+128)
  6164  0485' 1283               	bcf	3,5	;RP0=0, select bank0
  6165  0486' 1303               	bcf	3,6	;RP1=0, select bank0
  6166  0487' 080B'              	movf	?___lldiv+1,w
  6167  0488' 1683               	bsf	3,5	;RP0=1, select bank1
  6168  0489' 1303               	bcf	3,6	;RP1=0, select bank1
  6169  048A' 0080'              	movwf	(sprintf@tmpval+1)^(0+128)
  6170  048B' 1283               	bcf	3,5	;RP0=0, select bank0
  6171  048C' 1303               	bcf	3,6	;RP1=0, select bank0
  6172  048D' 080A'              	movf	?___lldiv,w
  6173  048E' 1683               	bsf	3,5	;RP0=1, select bank1
  6174  048F' 1303               	bcf	3,6	;RP1=0, select bank1
  6175  0490' 0080'              	movwf	sprintf@tmpval^(0+128)
  6176                           
  6177                           ;doprnt.c: 1202: tmpval.vd %= 10;
  6178  0491' 3000               	movlw	0
  6179  0492' 1283               	bcf	3,5	;RP0=0, select bank0
  6180  0493' 1303               	bcf	3,6	;RP1=0, select bank0
  6181  0494' 0083'              	movwf	___llmod@divisor+3
  6182  0495' 3000               	movlw	0
  6183  0496' 0082'              	movwf	___llmod@divisor+2
  6184  0497' 3000               	movlw	0
  6185  0498' 0081'              	movwf	___llmod@divisor+1
  6186  0499' 300A               	movlw	10
  6187  049A' 0080'              	movwf	___llmod@divisor
  6188  049B' 1683               	bsf	3,5	;RP0=1, select bank1
  6189  049C' 1303               	bcf	3,6	;RP1=0, select bank1
  6190  049D' 0800'              	movf	(sprintf@tmpval+3)^(0+128),w
  6191  049E' 1283               	bcf	3,5	;RP0=0, select bank0
  6192  049F' 1303               	bcf	3,6	;RP1=0, select bank0
  6193  04A0' 0087'              	movwf	___llmod@dividend+3
  6194  04A1' 1683               	bsf	3,5	;RP0=1, select bank1
  6195  04A2' 1303               	bcf	3,6	;RP1=0, select bank1
  6196  04A3' 0800'              	movf	(sprintf@tmpval+2)^(0+128),w
  6197  04A4' 1283               	bcf	3,5	;RP0=0, select bank0
  6198  04A5' 1303               	bcf	3,6	;RP1=0, select bank0
  6199  04A6' 0086'              	movwf	___llmod@dividend+2
  6200  04A7' 1683               	bsf	3,5	;RP0=1, select bank1
  6201  04A8' 1303               	bcf	3,6	;RP1=0, select bank1
  6202  04A9' 0800'              	movf	(sprintf@tmpval+1)^(0+128),w
  6203  04AA' 1283               	bcf	3,5	;RP0=0, select bank0
  6204  04AB' 1303               	bcf	3,6	;RP1=0, select bank0
  6205  04AC' 0085'              	movwf	___llmod@dividend+1
  6206  04AD' 1683               	bsf	3,5	;RP0=1, select bank1
  6207  04AE' 1303               	bcf	3,6	;RP1=0, select bank1
  6208  04AF' 0800'              	movf	sprintf@tmpval^(0+128),w
  6209  04B0' 1283               	bcf	3,5	;RP0=0, select bank0
  6210  04B1' 1303               	bcf	3,6	;RP1=0, select bank0
  6211  04B2' 0084'              	movwf	___llmod@dividend
  6212  04B3' 120A' 118A' 2000' 120A' 118A' 	fcall	___llmod
  6213  04B8' 1283               	bcf	3,5	;RP0=0, select bank0
  6214  04B9' 1303               	bcf	3,6	;RP1=0, select bank0
  6215  04BA' 0803'              	movf	?___llmod+3,w
  6216  04BB' 1683               	bsf	3,5	;RP0=1, select bank1
  6217  04BC' 1303               	bcf	3,6	;RP1=0, select bank1
  6218  04BD' 0080'              	movwf	(sprintf@tmpval+3)^(0+128)
  6219  04BE' 1283               	bcf	3,5	;RP0=0, select bank0
  6220  04BF' 1303               	bcf	3,6	;RP1=0, select bank0
  6221  04C0' 0802'              	movf	?___llmod+2,w
  6222  04C1' 1683               	bsf	3,5	;RP0=1, select bank1
  6223  04C2' 1303               	bcf	3,6	;RP1=0, select bank1
  6224  04C3' 0080'              	movwf	(sprintf@tmpval+2)^(0+128)
  6225  04C4' 1283               	bcf	3,5	;RP0=0, select bank0
  6226  04C5' 1303               	bcf	3,6	;RP1=0, select bank0
  6227  04C6' 0801'              	movf	?___llmod+1,w
  6228  04C7' 1683               	bsf	3,5	;RP0=1, select bank1
  6229  04C8' 1303               	bcf	3,6	;RP1=0, select bank1
  6230  04C9' 0080'              	movwf	(sprintf@tmpval+1)^(0+128)
  6231  04CA' 1283               	bcf	3,5	;RP0=0, select bank0
  6232  04CB' 1303               	bcf	3,6	;RP1=0, select bank0
  6233  04CC' 0800'              	movf	?___llmod,w
  6234  04CD' 1683               	bsf	3,5	;RP0=1, select bank1
  6235  04CE' 1303               	bcf	3,6	;RP1=0, select bank1
  6236  04CF' 0080'              	movwf	sprintf@tmpval^(0+128)
  6237                           
  6238                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  6239  04D0' 0800'              	movf	sprintf@tmpval^(0+128),w
  6240  04D1' 3E30               	addlw	48
  6241  04D2' 2800'              	goto	L8
  6242  04D3'                    l4680:	
  6243                           ;doprnt.c: 1204: }
  6244                           ;doprnt.c: 1206: }
  6245                           ;doprnt.c: 1207: while(exp > 0) {
  6246                           
  6247                           
  6248                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  6249  04D3' 3030               	movlw	48
  6250  04D4' 1683               	bsf	3,5	;RP0=1, select bank1
  6251  04D5' 1303               	bcf	3,6	;RP1=0, select bank1
  6252  04D6' 0080'              	movwf	??_sprintf^(0+128)
  6253  04D7' 1283               	bcf	3,5	;RP0=0, select bank0
  6254  04D8' 1303               	bcf	3,6	;RP1=0, select bank0
  6255  04D9' 0847'              	movf	sprintf@sp,w
  6256  04DA' 0084               	movwf	4
  6257  04DB' 1783               	bsf	3,7
  6258  04DC' 1C48'              	btfss	sprintf@sp+1,0
  6259  04DD' 1383               	bcf	3,7
  6260  04DE' 1683               	bsf	3,5	;RP0=1, select bank1
  6261  04DF' 1303               	bcf	3,6	;RP1=0, select bank1
  6262  04E0' 0800'              	movf	??_sprintf^(0+128),w
  6263  04E1' 0080               	movwf	0
  6264  04E2' 3001               	movlw	1
  6265  04E3' 1283               	bcf	3,5	;RP0=0, select bank0
  6266  04E4' 1303               	bcf	3,6	;RP1=0, select bank0
  6267  04E5' 07C7'              	addwf	sprintf@sp,f
  6268  04E6' 1803               	skipnc
  6269  04E7' 0AC8'              	incf	sprintf@sp+1,f
  6270                           
  6271                           ;doprnt.c: 1209: exp--;
  6272  04E8' 30FF               	movlw	255
  6273  04E9' 1683               	bsf	3,5	;RP0=1, select bank1
  6274  04EA' 1303               	bcf	3,6	;RP1=0, select bank1
  6275  04EB' 0780'              	addwf	sprintf@exp^(0+128),f
  6276  04EC' 1803               	skipnc
  6277  04ED' 0A80'              	incf	(sprintf@exp+1)^(0+128),f
  6278  04EE' 30FF               	movlw	255
  6279  04EF' 0780'              	addwf	(sprintf@exp+1)^(0+128),f
  6280  04F0'                    l4686:	
  6281  04F0' 0800'              	movf	(sprintf@exp+1)^(0+128),w
  6282  04F1' 3A80               	xorlw	128
  6283  04F2' 00FF               	movwf	127
  6284  04F3' 3080               	movlw	128
  6285  04F4' 027F               	subwf	127,w
  6286  04F5' 1D03               	skipz
  6287  04F6' 2800'              	goto	u7385
  6288  04F7' 3001               	movlw	1
  6289  04F8' 0200'              	subwf	sprintf@exp^(0+128),w
  6290  04F9'                    u7385:	
  6291  04F9' 1803               	skipnc
  6292  04FA' 2800'              	goto	l4680
  6293                           
  6294                           ;doprnt.c: 1210: }
  6295                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6296  04FB' 1683               	bsf	3,5	;RP0=1, select bank1
  6297  04FC' 1303               	bcf	3,6	;RP1=0, select bank1
  6298  04FD' 0800'              	movf	(sprintf@prec+1)^(0+128),w
  6299  04FE' 3A80               	xorlw	128
  6300  04FF' 00FF               	movwf	127
  6301  0500' 3080               	movlw	128
  6302  0501' 027F               	subwf	127,w
  6303  0502' 1D03               	skipz
  6304  0503' 2800'              	goto	u7395
  6305  0504' 3009               	movlw	9
  6306  0505' 0200'              	subwf	sprintf@prec^(0+128),w
  6307  0506'                    u7395:	
  6308  0506' 1C03               	skipc
  6309  0507' 2800'              	goto	l4692
  6310                           
  6311                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6312  0508' 3008               	movlw	8
  6313  0509' 1683               	bsf	3,5	;RP0=1, select bank1
  6314  050A' 1303               	bcf	3,6	;RP1=0, select bank1
  6315  050B' 2800'              	goto	L6
  6316  050C'                    l4692:	
  6317                           
  6318                           ;doprnt.c: 1213: else
  6319                           ;doprnt.c: 1214: c = prec;
  6320  050C' 1683               	bsf	3,5	;RP0=1, select bank1
  6321  050D' 1303               	bcf	3,6	;RP1=0, select bank1
  6322  050E' 0800'              	movf	sprintf@prec^(0+128),w
  6323  050F'                    L6:	
  6324  050F' 0080'              	movwf	??_sprintf^(0+128)
  6325  0510' 0800'              	movf	??_sprintf^(0+128),w
  6326  0511' 0080'              	movwf	sprintf@c^(0+128)
  6327                           
  6328                           ;doprnt.c: 1215: prec -= c;
  6329  0512' 0800'              	movf	sprintf@c^(0+128),w
  6330  0513' 0080'              	movwf	??_sprintf^(0+128)
  6331  0514' 0181'              	clrf	(??_sprintf^(0+128)+1)
  6332  0515' 1B80'              	btfsc	??_sprintf^(0+128),7
  6333  0516' 0381'              	decf	(??_sprintf^(0+128)+1),f
  6334  0517' 0800'              	movf	??_sprintf^(0+128),w
  6335  0518' 0280'              	subwf	sprintf@prec^(0+128),f
  6336  0519' 0800'              	movf	(??_sprintf+1)^(0+128),w
  6337  051A' 1C03               	skipc
  6338  051B' 0380'              	decf	(sprintf@prec+1)^(0+128),f
  6339  051C' 0280'              	subwf	(sprintf@prec+1)^(0+128),f
  6340                           
  6341                           ;doprnt.c: 1219: if(c)
  6342  051D' 0800'              	movf	sprintf@c^(0+128),w
  6343  051E' 1903               	btfsc	3,2
  6344  051F' 2800'              	goto	l4700
  6345                           
  6346                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  6347  0520' 302E               	movlw	46
  6348  0521' 0080'              	movwf	??_sprintf^(0+128)
  6349  0522' 1283               	bcf	3,5	;RP0=0, select bank0
  6350  0523' 1303               	bcf	3,6	;RP1=0, select bank0
  6351  0524' 0847'              	movf	sprintf@sp,w
  6352  0525' 0084               	movwf	4
  6353  0526' 1783               	bsf	3,7
  6354  0527' 1C48'              	btfss	sprintf@sp+1,0
  6355  0528' 1383               	bcf	3,7
  6356  0529' 1683               	bsf	3,5	;RP0=1, select bank1
  6357  052A' 1303               	bcf	3,6	;RP1=0, select bank1
  6358  052B' 0800'              	movf	??_sprintf^(0+128),w
  6359  052C' 0080               	movwf	0
  6360  052D' 3001               	movlw	1
  6361  052E' 1283               	bcf	3,5	;RP0=0, select bank0
  6362  052F' 1303               	bcf	3,6	;RP1=0, select bank0
  6363  0530' 07C7'              	addwf	sprintf@sp,f
  6364  0531' 1803               	skipnc
  6365  0532' 0AC8'              	incf	sprintf@sp+1,f
  6366  0533'                    l4700:	
  6367                           
  6368                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6369  0533' 1683               	bsf	3,5	;RP0=1, select bank1
  6370  0534' 1303               	bcf	3,6	;RP1=0, select bank1
  6371  0535' 0800'              	movf	sprintf@c^(0+128),w
  6372  0536' 120A' 118A' 2000' 120A' 118A' 	fcall	_scale
  6373  053B' 1283               	bcf	3,5	;RP0=0, select bank0
  6374  053C' 1303               	bcf	3,6	;RP1=0, select bank0
  6375  053D' 0824'              	movf	?_scale,w
  6376  053E' 1683               	bsf	3,5	;RP0=1, select bank1
  6377  053F' 1303               	bcf	3,6	;RP1=0, select bank1
  6378  0540' 0080'              	movwf	_sprintf$833^(0+128)
  6379  0541' 1283               	bcf	3,5	;RP0=0, select bank0
  6380  0542' 1303               	bcf	3,6	;RP1=0, select bank0
  6381  0543' 0825'              	movf	?_scale+1,w
  6382  0544' 1683               	bsf	3,5	;RP0=1, select bank1
  6383  0545' 1303               	bcf	3,6	;RP1=0, select bank1
  6384  0546' 0080'              	movwf	(_sprintf$833+1)^(0+128)
  6385  0547' 1283               	bcf	3,5	;RP0=0, select bank0
  6386  0548' 1303               	bcf	3,6	;RP1=0, select bank0
  6387  0549' 0826'              	movf	?_scale+2,w
  6388  054A' 1683               	bsf	3,5	;RP0=1, select bank1
  6389  054B' 1303               	bcf	3,6	;RP1=0, select bank1
  6390  054C' 0080'              	movwf	(_sprintf$833+2)^(0+128)
  6391                           
  6392                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6393  054D' 0800'              	movf	_sprintf$833^(0+128),w
  6394  054E' 1283               	bcf	3,5	;RP0=0, select bank0
  6395  054F' 1303               	bcf	3,6	;RP1=0, select bank0
  6396  0550' 0097'              	movwf	___ftmul@f2
  6397  0551' 1683               	bsf	3,5	;RP0=1, select bank1
  6398  0552' 1303               	bcf	3,6	;RP1=0, select bank1
  6399  0553' 0800'              	movf	(_sprintf$833+1)^(0+128),w
  6400  0554' 1283               	bcf	3,5	;RP0=0, select bank0
  6401  0555' 1303               	bcf	3,6	;RP1=0, select bank0
  6402  0556' 0098'              	movwf	___ftmul@f2+1
  6403  0557' 1683               	bsf	3,5	;RP0=1, select bank1
  6404  0558' 1303               	bcf	3,6	;RP1=0, select bank1
  6405  0559' 0800'              	movf	(_sprintf$833+2)^(0+128),w
  6406  055A' 1283               	bcf	3,5	;RP0=0, select bank0
  6407  055B' 1303               	bcf	3,6	;RP1=0, select bank0
  6408  055C' 0099'              	movwf	___ftmul@f2+2
  6409  055D' 1683               	bsf	3,5	;RP0=1, select bank1
  6410  055E' 1303               	bcf	3,6	;RP1=0, select bank1
  6411  055F' 0800'              	movf	sprintf@fval^(0+128),w
  6412  0560' 1283               	bcf	3,5	;RP0=0, select bank0
  6413  0561' 1303               	bcf	3,6	;RP1=0, select bank0
  6414  0562' 0094'              	movwf	___ftmul@f1
  6415  0563' 1683               	bsf	3,5	;RP0=1, select bank1
  6416  0564' 1303               	bcf	3,6	;RP1=0, select bank1
  6417  0565' 0800'              	movf	(sprintf@fval+1)^(0+128),w
  6418  0566' 1283               	bcf	3,5	;RP0=0, select bank0
  6419  0567' 1303               	bcf	3,6	;RP1=0, select bank0
  6420  0568' 0095'              	movwf	___ftmul@f1+1
  6421  0569' 1683               	bsf	3,5	;RP0=1, select bank1
  6422  056A' 1303               	bcf	3,6	;RP1=0, select bank1
  6423  056B' 0800'              	movf	(sprintf@fval+2)^(0+128),w
  6424  056C' 1283               	bcf	3,5	;RP0=0, select bank0
  6425  056D' 1303               	bcf	3,6	;RP1=0, select bank0
  6426  056E' 0096'              	movwf	___ftmul@f1+2
  6427  056F' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftmul
  6428  0574' 1283               	bcf	3,5	;RP0=0, select bank0
  6429  0575' 1303               	bcf	3,6	;RP1=0, select bank0
  6430  0576' 0814'              	movf	?___ftmul,w
  6431  0577' 00AD'              	movwf	___fttol@f1
  6432  0578' 0815'              	movf	?___ftmul+1,w
  6433  0579' 00AE'              	movwf	___fttol@f1+1
  6434  057A' 0816'              	movf	?___ftmul+2,w
  6435  057B' 00AF'              	movwf	___fttol@f1+2
  6436  057C' 120A' 118A' 2000' 120A' 118A' 	fcall	___fttol
  6437  0581' 1283               	bcf	3,5	;RP0=0, select bank0
  6438  0582' 1303               	bcf	3,6	;RP1=0, select bank0
  6439  0583' 0830'              	movf	?___fttol+3,w
  6440  0584' 1683               	bsf	3,5	;RP0=1, select bank1
  6441  0585' 1303               	bcf	3,6	;RP1=0, select bank1
  6442  0586' 0080'              	movwf	(sprintf@val+3)^(0+128)
  6443  0587' 1283               	bcf	3,5	;RP0=0, select bank0
  6444  0588' 1303               	bcf	3,6	;RP1=0, select bank0
  6445  0589' 082F'              	movf	?___fttol+2,w
  6446  058A' 1683               	bsf	3,5	;RP0=1, select bank1
  6447  058B' 1303               	bcf	3,6	;RP1=0, select bank1
  6448  058C' 0080'              	movwf	(sprintf@val+2)^(0+128)
  6449  058D' 1283               	bcf	3,5	;RP0=0, select bank0
  6450  058E' 1303               	bcf	3,6	;RP1=0, select bank0
  6451  058F' 082E'              	movf	?___fttol+1,w
  6452  0590' 1683               	bsf	3,5	;RP0=1, select bank1
  6453  0591' 1303               	bcf	3,6	;RP1=0, select bank1
  6454  0592' 0080'              	movwf	(sprintf@val+1)^(0+128)
  6455  0593' 1283               	bcf	3,5	;RP0=0, select bank0
  6456  0594' 1303               	bcf	3,6	;RP1=0, select bank0
  6457  0595' 082D'              	movf	?___fttol,w
  6458  0596'                    L7:	
  6459  0596' 1683               	bsf	3,5	;RP0=1, select bank1
  6460  0597' 1303               	bcf	3,6	;RP1=0, select bank1
  6461  0598' 0080'              	movwf	sprintf@val^(0+128)
  6462  0599' 30FF               	movlw	255
  6463  059A' 0080'              	movwf	??_sprintf^(0+128)
  6464  059B' 0800'              	movf	??_sprintf^(0+128),w
  6465  059C' 0780'              	addwf	sprintf@c^(0+128),f
  6466  059D' 0A00'              	incf	sprintf@c^(0+128),w
  6467  059E' 1903               	btfsc	3,2
  6468  059F' 2800'              	goto	L17
  6469                           
  6470                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  6471                           
  6472                           ;doprnt.c: 1228: while(c--) {
  6473  05A0' 0800'              	movf	sprintf@c^(0+128),w
  6474  05A1' 0080'              	movwf	??_sprintf^(0+128)
  6475  05A2' 3001               	movlw	1
  6476  05A3'                    u7415:	
  6477  05A3' 1003               	clrc
  6478  05A4' 0D80'              	rlf	??_sprintf^(0+128),f
  6479  05A5' 3EFF               	addlw	-1
  6480  05A6' 1D03               	skipz
  6481  05A7' 2800'              	goto	u7415
  6482  05A8' 1003               	clrc
  6483  05A9' 0D00'              	rlf	??_sprintf^(0+128),w
  6484  05AA' 3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  6485  05AB' 0084               	movwf	4
  6486  05AC' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6487  05B1' 1283               	bcf	3,5	;RP0=0, select bank0
  6488  05B2' 1303               	bcf	3,6	;RP1=0, select bank0
  6489  05B3' 008A'              	movwf	___lldiv@divisor
  6490  05B4' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6491  05B9' 008B'              	movwf	___lldiv@divisor+1
  6492  05BA' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6493  05BF' 008C'              	movwf	___lldiv@divisor+2
  6494  05C0' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6495  05C5' 008D'              	movwf	___lldiv@divisor+3
  6496  05C6' 1683               	bsf	3,5	;RP0=1, select bank1
  6497  05C7' 1303               	bcf	3,6	;RP1=0, select bank1
  6498  05C8' 0800'              	movf	(sprintf@val+3)^(0+128),w
  6499  05C9' 1283               	bcf	3,5	;RP0=0, select bank0
  6500  05CA' 1303               	bcf	3,6	;RP1=0, select bank0
  6501  05CB' 0091'              	movwf	___lldiv@dividend+3
  6502  05CC' 1683               	bsf	3,5	;RP0=1, select bank1
  6503  05CD' 1303               	bcf	3,6	;RP1=0, select bank1
  6504  05CE' 0800'              	movf	(sprintf@val+2)^(0+128),w
  6505  05CF' 1283               	bcf	3,5	;RP0=0, select bank0
  6506  05D0' 1303               	bcf	3,6	;RP1=0, select bank0
  6507  05D1' 0090'              	movwf	___lldiv@dividend+2
  6508  05D2' 1683               	bsf	3,5	;RP0=1, select bank1
  6509  05D3' 1303               	bcf	3,6	;RP1=0, select bank1
  6510  05D4' 0800'              	movf	(sprintf@val+1)^(0+128),w
  6511  05D5' 1283               	bcf	3,5	;RP0=0, select bank0
  6512  05D6' 1303               	bcf	3,6	;RP1=0, select bank0
  6513  05D7' 008F'              	movwf	___lldiv@dividend+1
  6514  05D8' 1683               	bsf	3,5	;RP0=1, select bank1
  6515  05D9' 1303               	bcf	3,6	;RP1=0, select bank1
  6516  05DA' 0800'              	movf	sprintf@val^(0+128),w
  6517  05DB' 1283               	bcf	3,5	;RP0=0, select bank0
  6518  05DC' 1303               	bcf	3,6	;RP1=0, select bank0
  6519  05DD' 008E'              	movwf	___lldiv@dividend
  6520  05DE' 120A' 118A' 2000' 120A' 118A' 	fcall	___lldiv
  6521  05E3' 1283               	bcf	3,5	;RP0=0, select bank0
  6522  05E4' 1303               	bcf	3,6	;RP1=0, select bank0
  6523  05E5' 080D'              	movf	?___lldiv+3,w
  6524  05E6' 1683               	bsf	3,5	;RP0=1, select bank1
  6525  05E7' 1303               	bcf	3,6	;RP1=0, select bank1
  6526  05E8' 0080'              	movwf	(sprintf@tmpval+3)^(0+128)
  6527  05E9' 1283               	bcf	3,5	;RP0=0, select bank0
  6528  05EA' 1303               	bcf	3,6	;RP1=0, select bank0
  6529  05EB' 080C'              	movf	?___lldiv+2,w
  6530  05EC' 1683               	bsf	3,5	;RP0=1, select bank1
  6531  05ED' 1303               	bcf	3,6	;RP1=0, select bank1
  6532  05EE' 0080'              	movwf	(sprintf@tmpval+2)^(0+128)
  6533  05EF' 1283               	bcf	3,5	;RP0=0, select bank0
  6534  05F0' 1303               	bcf	3,6	;RP1=0, select bank0
  6535  05F1' 080B'              	movf	?___lldiv+1,w
  6536  05F2' 1683               	bsf	3,5	;RP0=1, select bank1
  6537  05F3' 1303               	bcf	3,6	;RP1=0, select bank1
  6538  05F4' 0080'              	movwf	(sprintf@tmpval+1)^(0+128)
  6539  05F5' 1283               	bcf	3,5	;RP0=0, select bank0
  6540  05F6' 1303               	bcf	3,6	;RP1=0, select bank0
  6541  05F7' 080A'              	movf	?___lldiv,w
  6542  05F8' 1683               	bsf	3,5	;RP0=1, select bank1
  6543  05F9' 1303               	bcf	3,6	;RP1=0, select bank1
  6544  05FA' 0080'              	movwf	sprintf@tmpval^(0+128)
  6545                           
  6546                           ;doprnt.c: 1230: tmpval.vd %= 10;
  6547  05FB' 3000               	movlw	0
  6548  05FC' 1283               	bcf	3,5	;RP0=0, select bank0
  6549  05FD' 1303               	bcf	3,6	;RP1=0, select bank0
  6550  05FE' 0083'              	movwf	___llmod@divisor+3
  6551  05FF' 3000               	movlw	0
  6552  0600' 0082'              	movwf	___llmod@divisor+2
  6553  0601' 3000               	movlw	0
  6554  0602' 0081'              	movwf	___llmod@divisor+1
  6555  0603' 300A               	movlw	10
  6556  0604' 0080'              	movwf	___llmod@divisor
  6557  0605' 1683               	bsf	3,5	;RP0=1, select bank1
  6558  0606' 1303               	bcf	3,6	;RP1=0, select bank1
  6559  0607' 0800'              	movf	(sprintf@tmpval+3)^(0+128),w
  6560  0608' 1283               	bcf	3,5	;RP0=0, select bank0
  6561  0609' 1303               	bcf	3,6	;RP1=0, select bank0
  6562  060A' 0087'              	movwf	___llmod@dividend+3
  6563  060B' 1683               	bsf	3,5	;RP0=1, select bank1
  6564  060C' 1303               	bcf	3,6	;RP1=0, select bank1
  6565  060D' 0800'              	movf	(sprintf@tmpval+2)^(0+128),w
  6566  060E' 1283               	bcf	3,5	;RP0=0, select bank0
  6567  060F' 1303               	bcf	3,6	;RP1=0, select bank0
  6568  0610' 0086'              	movwf	___llmod@dividend+2
  6569  0611' 1683               	bsf	3,5	;RP0=1, select bank1
  6570  0612' 1303               	bcf	3,6	;RP1=0, select bank1
  6571  0613' 0800'              	movf	(sprintf@tmpval+1)^(0+128),w
  6572  0614' 1283               	bcf	3,5	;RP0=0, select bank0
  6573  0615' 1303               	bcf	3,6	;RP1=0, select bank0
  6574  0616' 0085'              	movwf	___llmod@dividend+1
  6575  0617' 1683               	bsf	3,5	;RP0=1, select bank1
  6576  0618' 1303               	bcf	3,6	;RP1=0, select bank1
  6577  0619' 0800'              	movf	sprintf@tmpval^(0+128),w
  6578  061A' 1283               	bcf	3,5	;RP0=0, select bank0
  6579  061B' 1303               	bcf	3,6	;RP1=0, select bank0
  6580  061C' 0084'              	movwf	___llmod@dividend
  6581  061D' 120A' 118A' 2000' 120A' 118A' 	fcall	___llmod
  6582  0622' 1283               	bcf	3,5	;RP0=0, select bank0
  6583  0623' 1303               	bcf	3,6	;RP1=0, select bank0
  6584  0624' 0803'              	movf	?___llmod+3,w
  6585  0625' 1683               	bsf	3,5	;RP0=1, select bank1
  6586  0626' 1303               	bcf	3,6	;RP1=0, select bank1
  6587  0627' 0080'              	movwf	(sprintf@tmpval+3)^(0+128)
  6588  0628' 1283               	bcf	3,5	;RP0=0, select bank0
  6589  0629' 1303               	bcf	3,6	;RP1=0, select bank0
  6590  062A' 0802'              	movf	?___llmod+2,w
  6591  062B' 1683               	bsf	3,5	;RP0=1, select bank1
  6592  062C' 1303               	bcf	3,6	;RP1=0, select bank1
  6593  062D' 0080'              	movwf	(sprintf@tmpval+2)^(0+128)
  6594  062E' 1283               	bcf	3,5	;RP0=0, select bank0
  6595  062F' 1303               	bcf	3,6	;RP1=0, select bank0
  6596  0630' 0801'              	movf	?___llmod+1,w
  6597  0631' 1683               	bsf	3,5	;RP0=1, select bank1
  6598  0632' 1303               	bcf	3,6	;RP1=0, select bank1
  6599  0633' 0080'              	movwf	(sprintf@tmpval+1)^(0+128)
  6600  0634' 1283               	bcf	3,5	;RP0=0, select bank0
  6601  0635' 1303               	bcf	3,6	;RP1=0, select bank0
  6602  0636' 0800'              	movf	?___llmod,w
  6603  0637' 1683               	bsf	3,5	;RP0=1, select bank1
  6604  0638' 1303               	bcf	3,6	;RP1=0, select bank1
  6605  0639' 0080'              	movwf	sprintf@tmpval^(0+128)
  6606                           
  6607                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  6608  063A' 0800'              	movf	sprintf@tmpval^(0+128),w
  6609  063B' 3E30               	addlw	48
  6610  063C' 0080'              	movwf	??_sprintf^(0+128)
  6611  063D' 1283               	bcf	3,5	;RP0=0, select bank0
  6612  063E' 1303               	bcf	3,6	;RP1=0, select bank0
  6613  063F' 0847'              	movf	sprintf@sp,w
  6614  0640' 0084               	movwf	4
  6615  0641' 1783               	bsf	3,7
  6616  0642' 1C48'              	btfss	sprintf@sp+1,0
  6617  0643' 1383               	bcf	3,7
  6618  0644' 1683               	bsf	3,5	;RP0=1, select bank1
  6619  0645' 1303               	bcf	3,6	;RP1=0, select bank1
  6620  0646' 0800'              	movf	??_sprintf^(0+128),w
  6621  0647' 0080               	movwf	0
  6622  0648' 3001               	movlw	1
  6623  0649' 1283               	bcf	3,5	;RP0=0, select bank0
  6624  064A' 1303               	bcf	3,6	;RP1=0, select bank0
  6625  064B' 07C7'              	addwf	sprintf@sp,f
  6626  064C' 1803               	skipnc
  6627  064D' 0AC8'              	incf	sprintf@sp+1,f
  6628                           
  6629                           ;doprnt.c: 1232: val %= dpowers[c];
  6630  064E' 1683               	bsf	3,5	;RP0=1, select bank1
  6631  064F' 1303               	bcf	3,6	;RP1=0, select bank1
  6632  0650' 0800'              	movf	sprintf@c^(0+128),w
  6633  0651' 0080'              	movwf	??_sprintf^(0+128)
  6634  0652' 3001               	movlw	1
  6635  0653'                    u7425:	
  6636  0653' 1003               	clrc
  6637  0654' 0D80'              	rlf	??_sprintf^(0+128),f
  6638  0655' 3EFF               	addlw	-1
  6639  0656' 1D03               	skipz
  6640  0657' 2800'              	goto	u7425
  6641  0658' 1003               	clrc
  6642  0659' 0D00'              	rlf	??_sprintf^(0+128),w
  6643  065A' 3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  6644  065B' 0084               	movwf	4
  6645  065C' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6646  0661' 1283               	bcf	3,5	;RP0=0, select bank0
  6647  0662' 1303               	bcf	3,6	;RP1=0, select bank0
  6648  0663' 0080'              	movwf	___llmod@divisor
  6649  0664' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6650  0669' 0081'              	movwf	___llmod@divisor+1
  6651  066A' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6652  066F' 0082'              	movwf	___llmod@divisor+2
  6653  0670' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6654  0675' 0083'              	movwf	___llmod@divisor+3
  6655  0676' 1683               	bsf	3,5	;RP0=1, select bank1
  6656  0677' 1303               	bcf	3,6	;RP1=0, select bank1
  6657  0678' 0800'              	movf	(sprintf@val+3)^(0+128),w
  6658  0679' 1283               	bcf	3,5	;RP0=0, select bank0
  6659  067A' 1303               	bcf	3,6	;RP1=0, select bank0
  6660  067B' 0087'              	movwf	___llmod@dividend+3
  6661  067C' 1683               	bsf	3,5	;RP0=1, select bank1
  6662  067D' 1303               	bcf	3,6	;RP1=0, select bank1
  6663  067E' 0800'              	movf	(sprintf@val+2)^(0+128),w
  6664  067F' 1283               	bcf	3,5	;RP0=0, select bank0
  6665  0680' 1303               	bcf	3,6	;RP1=0, select bank0
  6666  0681' 0086'              	movwf	___llmod@dividend+2
  6667  0682' 1683               	bsf	3,5	;RP0=1, select bank1
  6668  0683' 1303               	bcf	3,6	;RP1=0, select bank1
  6669  0684' 0800'              	movf	(sprintf@val+1)^(0+128),w
  6670  0685' 1283               	bcf	3,5	;RP0=0, select bank0
  6671  0686' 1303               	bcf	3,6	;RP1=0, select bank0
  6672  0687' 0085'              	movwf	___llmod@dividend+1
  6673  0688' 1683               	bsf	3,5	;RP0=1, select bank1
  6674  0689' 1303               	bcf	3,6	;RP1=0, select bank1
  6675  068A' 0800'              	movf	sprintf@val^(0+128),w
  6676  068B' 1283               	bcf	3,5	;RP0=0, select bank0
  6677  068C' 1303               	bcf	3,6	;RP1=0, select bank0
  6678  068D' 0084'              	movwf	___llmod@dividend
  6679  068E' 120A' 118A' 2000' 120A' 118A' 	fcall	___llmod
  6680  0693' 1283               	bcf	3,5	;RP0=0, select bank0
  6681  0694' 1303               	bcf	3,6	;RP1=0, select bank0
  6682  0695' 0803'              	movf	?___llmod+3,w
  6683  0696' 1683               	bsf	3,5	;RP0=1, select bank1
  6684  0697' 1303               	bcf	3,6	;RP1=0, select bank1
  6685  0698' 0080'              	movwf	(sprintf@val+3)^(0+128)
  6686  0699' 1283               	bcf	3,5	;RP0=0, select bank0
  6687  069A' 1303               	bcf	3,6	;RP1=0, select bank0
  6688  069B' 0802'              	movf	?___llmod+2,w
  6689  069C' 1683               	bsf	3,5	;RP0=1, select bank1
  6690  069D' 1303               	bcf	3,6	;RP1=0, select bank1
  6691  069E' 0080'              	movwf	(sprintf@val+2)^(0+128)
  6692  069F' 1283               	bcf	3,5	;RP0=0, select bank0
  6693  06A0' 1303               	bcf	3,6	;RP1=0, select bank0
  6694  06A1' 0801'              	movf	?___llmod+1,w
  6695  06A2' 1683               	bsf	3,5	;RP0=1, select bank1
  6696  06A3' 1303               	bcf	3,6	;RP1=0, select bank1
  6697  06A4' 0080'              	movwf	(sprintf@val+1)^(0+128)
  6698  06A5' 1283               	bcf	3,5	;RP0=0, select bank0
  6699  06A6' 1303               	bcf	3,6	;RP1=0, select bank0
  6700  06A7' 0800'              	movf	?___llmod,w
  6701  06A8' 2800'              	goto	L7
  6702  06A9'                    L13:	
  6703  06A9'                    L12:	
  6704  06A9' 120A' 118A' 2800'  	ljmp	l4774
  6705  06AC'                    L15:	
  6706  06AC'                    L14:	
  6707  06AC' 120A' 118A' 2800'  	ljmp	l4724
  6708  06AF'                    L17:	
  6709  06AF'                    L16:	
  6710  06AF' 120A' 118A' 2800'  	ljmp	l4722
  6711                           
  6712                           	psect	text17
  6713  0000'                    __ptext17:	
  6714 ;; *************** function _scale *****************
  6715 ;; Defined at:
  6716 ;;		line 425 in file "D:\mplab\sources\common\doprnt.c"
  6717 ;; Parameters:    Size  Location     Type
  6718 ;;  scl             1    wreg     char 
  6719 ;; Auto vars:     Size  Location     Type
  6720 ;;  scl             1   44[BANK0 ] char 
  6721 ;; Return value:  Size  Location     Type
  6722 ;;                  3   36[BANK0 ] char 
  6723 ;; Registers used:
  6724 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6725 ;; Tracked objects:
  6726 ;;		On entry : 0/0
  6727 ;;		On exit  : 0/0
  6728 ;;		Unchanged: 0/0
  6729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6730 ;;      Params:         0       3       0       0       0
  6731 ;;      Locals:         0       4       0       0       0
  6732 ;;      Temps:          0       2       0       0       0
  6733 ;;      Totals:         0       9       0       0       0
  6734 ;;Total ram usage:        9 bytes
  6735 ;; Hardware stack levels used:    1
  6736 ;; Hardware stack levels required when called:    3
  6737 ;; This function calls:
  6738 ;;		___awdiv
  6739 ;;		___awmod
  6740 ;;		___bmul
  6741 ;;		___ftmul
  6742 ;; This function is called by:
  6743 ;;		_sprintf
  6744 ;; This function uses a non-reentrant model
  6745 ;;
  6746                           
  6747                           
  6748                           ;psect for function _scale
  6749  0000'                    _scale:	
  6750                           
  6751                           ;incstack = 0
  6752                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6753                           ;scale@scl stored from wreg
  6754  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  6755  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  6756  0002' 00AC'              	movwf	scale@scl
  6757                           
  6758                           ;doprnt.c: 428: if(scl < 0) {
  6759  0003' 1FAC'              	btfss	scale@scl,7
  6760  0004' 2800'              	goto	l4276
  6761                           
  6762                           ;doprnt.c: 429: scl = -scl;
  6763  0005' 09AC'              	comf	scale@scl,f
  6764  0006' 0AAC'              	incf	scale@scl,f
  6765                           
  6766                           ;doprnt.c: 430: if(scl>=110)
  6767  0007' 082C'              	movf	scale@scl,w
  6768  0008' 3A80               	xorlw	128
  6769  0009' 3E12               	addlw	-238
  6770  000A' 1C03               	skipc
  6771  000B' 2800'              	goto	l4266
  6772                           
  6773                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6774  000C' 3003               	movlw	3
  6775  000D' 00A7'              	movwf	??_scale
  6776  000E' 0827'              	movf	??_scale,w
  6777  000F' 0090'              	movwf	___bmul@multiplicand
  6778  0010' 300A               	movlw	10
  6779  0011' 0087'              	movwf	___awdiv@divisor
  6780  0012' 3000               	movlw	0
  6781  0013' 0088'              	movwf	___awdiv@divisor+1
  6782  0014' 082C'              	movf	scale@scl,w
  6783  0015' 0082'              	movwf	___awmod@dividend
  6784  0016' 0183'              	clrf	___awmod@dividend+1
  6785  0017' 1B82'              	btfsc	___awmod@dividend,7
  6786  0018' 0383'              	decf	___awmod@dividend+1,f
  6787  0019' 3064               	movlw	100
  6788  001A' 0080'              	movwf	___awmod@divisor
  6789  001B' 3000               	movlw	0
  6790  001C' 0081'              	movwf	___awmod@divisor+1
  6791  001D' 120A' 118A' 2000' 120A' 118A' 	fcall	___awmod
  6792  0022' 1283               	bcf	3,5	;RP0=0, select bank0
  6793  0023' 1303               	bcf	3,6	;RP1=0, select bank0
  6794  0024' 0801'              	movf	?___awmod+1,w
  6795  0025' 008A'              	movwf	___awdiv@dividend+1
  6796  0026' 0800'              	movf	?___awmod,w
  6797  0027' 0089'              	movwf	___awdiv@dividend
  6798  0028' 120A' 118A' 2000' 120A' 118A' 	fcall	___awdiv
  6799  002D' 1283               	bcf	3,5	;RP0=0, select bank0
  6800  002E' 1303               	bcf	3,6	;RP1=0, select bank0
  6801  002F' 0807'              	movf	?___awdiv,w
  6802  0030' 3E09               	addlw	9
  6803  0031' 120A' 118A' 2000' 120A' 118A' 	fcall	___bmul
  6804  0036' 3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  6805  0037' 0084               	movwf	4
  6806  0038' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6807  003D' 1283               	bcf	3,5	;RP0=0, select bank0
  6808  003E' 1303               	bcf	3,6	;RP1=0, select bank0
  6809  003F' 0094'              	movwf	___ftmul@f1
  6810  0040' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6811  0045' 0095'              	movwf	___ftmul@f1+1
  6812  0046' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6813  004B' 0096'              	movwf	___ftmul@f1+2
  6814  004C' 3003               	movlw	3
  6815  004D' 00A8'              	movwf	??_scale+1
  6816  004E' 0828'              	movf	??_scale+1,w
  6817  004F' 0090'              	movwf	___bmul@multiplicand
  6818  0050' 3064               	movlw	100
  6819  0051' 0087'              	movwf	___awdiv@divisor
  6820  0052' 3000               	movlw	0
  6821  0053' 0088'              	movwf	___awdiv@divisor+1
  6822  0054' 082C'              	movf	scale@scl,w
  6823  0055' 0089'              	movwf	___awdiv@dividend
  6824  0056' 018A'              	clrf	___awdiv@dividend+1
  6825  0057' 1B89'              	btfsc	___awdiv@dividend,7
  6826  0058' 038A'              	decf	___awdiv@dividend+1,f
  6827  0059' 120A' 118A' 2000' 120A' 118A' 	fcall	___awdiv
  6828  005E' 1283               	bcf	3,5	;RP0=0, select bank0
  6829  005F' 1303               	bcf	3,6	;RP1=0, select bank0
  6830  0060' 0807'              	movf	?___awdiv,w
  6831  0061' 3E12               	addlw	18
  6832  0062' 120A' 118A' 2000' 120A' 118A' 	fcall	___bmul
  6833  0067' 3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  6834  0068' 0084               	movwf	4
  6835  0069' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6836  006E' 1283               	bcf	3,5	;RP0=0, select bank0
  6837  006F' 1303               	bcf	3,6	;RP1=0, select bank0
  6838  0070' 0097'              	movwf	___ftmul@f2
  6839  0071' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6840  0076' 0098'              	movwf	___ftmul@f2+1
  6841  0077' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6842  007C' 0099'              	movwf	___ftmul@f2+2
  6843  007D' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftmul
  6844  0082' 1283               	bcf	3,5	;RP0=0, select bank0
  6845  0083' 1303               	bcf	3,6	;RP1=0, select bank0
  6846  0084' 0814'              	movf	?___ftmul,w
  6847  0085' 00A9'              	movwf	_scale$832
  6848  0086' 0815'              	movf	?___ftmul+1,w
  6849  0087' 00AA'              	movwf	_scale$832+1
  6850  0088' 0816'              	movf	?___ftmul+2,w
  6851  0089' 00AB'              	movwf	_scale$832+2
  6852                           
  6853                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6854  008A' 3003               	movlw	3
  6855  008B' 00A7'              	movwf	??_scale
  6856  008C' 0827'              	movf	??_scale,w
  6857  008D' 0090'              	movwf	___bmul@multiplicand
  6858  008E' 082C'              	movf	scale@scl,w
  6859  008F' 0082'              	movwf	___awmod@dividend
  6860  0090' 0183'              	clrf	___awmod@dividend+1
  6861  0091' 1B82'              	btfsc	___awmod@dividend,7
  6862  0092' 0383'              	decf	___awmod@dividend+1,f
  6863  0093' 300A               	movlw	10
  6864  0094' 0080'              	movwf	___awmod@divisor
  6865  0095' 3000               	movlw	0
  6866  0096' 0081'              	movwf	___awmod@divisor+1
  6867  0097' 120A' 118A' 2000' 120A' 118A' 	fcall	___awmod
  6868  009C' 1283               	bcf	3,5	;RP0=0, select bank0
  6869  009D' 1303               	bcf	3,6	;RP1=0, select bank0
  6870  009E' 0800'              	movf	?___awmod,w
  6871  009F' 120A' 118A' 2000' 120A' 118A' 	fcall	___bmul
  6872  00A4' 3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  6873  00A5' 0084               	movwf	4
  6874  00A6' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6875  00AB' 1283               	bcf	3,5	;RP0=0, select bank0
  6876  00AC' 1303               	bcf	3,6	;RP1=0, select bank0
  6877  00AD' 0094'              	movwf	___ftmul@f1
  6878  00AE' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6879  00B3' 0095'              	movwf	___ftmul@f1+1
  6880  00B4' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6881  00B9' 0096'              	movwf	___ftmul@f1+2
  6882  00BA' 0829'              	movf	_scale$832,w
  6883  00BB' 0097'              	movwf	___ftmul@f2
  6884  00BC' 082A'              	movf	_scale$832+1,w
  6885  00BD' 0098'              	movwf	___ftmul@f2+1
  6886  00BE' 082B'              	movf	_scale$832+2,w
  6887  00BF' 0099'              	movwf	___ftmul@f2+2
  6888  00C0' 120A' 118A' 2000'  	fcall	___ftmul
  6889  00C3' 1283               	bcf	3,5	;RP0=0, select bank0
  6890  00C4' 1303               	bcf	3,6	;RP1=0, select bank0
  6891  00C5' 0814'              	movf	?___ftmul,w
  6892  00C6' 00A4'              	movwf	?_scale
  6893  00C7' 0815'              	movf	?___ftmul+1,w
  6894  00C8' 00A5'              	movwf	?_scale+1
  6895  00C9' 0816'              	movf	?___ftmul+2,w
  6896  00CA' 00A6'              	movwf	?_scale+2
  6897  00CB' 0008               	return
  6898  00CC'                    l4266:	
  6899                           
  6900                           ;doprnt.c: 432: else if(scl > 10)
  6901  00CC' 082C'              	movf	scale@scl,w
  6902  00CD' 3A80               	xorlw	128
  6903  00CE' 3E75               	addlw	-139
  6904  00CF' 1C03               	skipc
  6905  00D0' 2800'              	goto	l4272
  6906                           
  6907                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6908  00D1' 3003               	movlw	3
  6909  00D2' 00A7'              	movwf	??_scale
  6910  00D3' 0827'              	movf	??_scale,w
  6911  00D4' 0090'              	movwf	___bmul@multiplicand
  6912  00D5' 082C'              	movf	scale@scl,w
  6913  00D6' 0082'              	movwf	___awmod@dividend
  6914  00D7' 0183'              	clrf	___awmod@dividend+1
  6915  00D8' 1B82'              	btfsc	___awmod@dividend,7
  6916  00D9' 0383'              	decf	___awmod@dividend+1,f
  6917  00DA' 300A               	movlw	10
  6918  00DB' 0080'              	movwf	___awmod@divisor
  6919  00DC' 3000               	movlw	0
  6920  00DD' 0081'              	movwf	___awmod@divisor+1
  6921  00DE' 120A' 118A' 2000' 120A' 118A' 	fcall	___awmod
  6922  00E3' 1283               	bcf	3,5	;RP0=0, select bank0
  6923  00E4' 1303               	bcf	3,6	;RP1=0, select bank0
  6924  00E5' 0800'              	movf	?___awmod,w
  6925  00E6' 120A' 118A' 2000' 120A' 118A' 	fcall	___bmul
  6926  00EB' 3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  6927  00EC' 0084               	movwf	4
  6928  00ED' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6929  00F2' 1283               	bcf	3,5	;RP0=0, select bank0
  6930  00F3' 1303               	bcf	3,6	;RP1=0, select bank0
  6931  00F4' 0094'              	movwf	___ftmul@f1
  6932  00F5' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6933  00FA' 0095'              	movwf	___ftmul@f1+1
  6934  00FB' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6935  0100' 0096'              	movwf	___ftmul@f1+2
  6936  0101' 3003               	movlw	3
  6937  0102' 00A8'              	movwf	??_scale+1
  6938  0103' 0828'              	movf	??_scale+1,w
  6939  0104' 0090'              	movwf	___bmul@multiplicand
  6940  0105' 300A               	movlw	10
  6941  0106' 0087'              	movwf	___awdiv@divisor
  6942  0107' 3000               	movlw	0
  6943  0108' 0088'              	movwf	___awdiv@divisor+1
  6944  0109' 082C'              	movf	scale@scl,w
  6945  010A' 0089'              	movwf	___awdiv@dividend
  6946  010B' 018A'              	clrf	___awdiv@dividend+1
  6947  010C' 1B89'              	btfsc	___awdiv@dividend,7
  6948  010D' 038A'              	decf	___awdiv@dividend+1,f
  6949  010E' 120A' 118A' 2000' 120A' 118A' 	fcall	___awdiv
  6950  0113' 1283               	bcf	3,5	;RP0=0, select bank0
  6951  0114' 1303               	bcf	3,6	;RP1=0, select bank0
  6952  0115' 0807'              	movf	?___awdiv,w
  6953  0116' 3E09               	addlw	9
  6954  0117' 120A' 118A' 2000' 120A' 118A' 	fcall	___bmul
  6955  011C' 3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  6956  011D' 0084               	movwf	4
  6957  011E' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6958  0123' 1283               	bcf	3,5	;RP0=0, select bank0
  6959  0124' 1303               	bcf	3,6	;RP1=0, select bank0
  6960  0125' 0097'              	movwf	___ftmul@f2
  6961  0126' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6962  012B' 0098'              	movwf	___ftmul@f2+1
  6963  012C' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6964  0131' 0099'              	movwf	___ftmul@f2+2
  6965  0132' 120A' 118A' 2000'  	fcall	___ftmul
  6966  0135' 1283               	bcf	3,5	;RP0=0, select bank0
  6967  0136' 1303               	bcf	3,6	;RP1=0, select bank0
  6968  0137' 0814'              	movf	?___ftmul,w
  6969  0138' 00A4'              	movwf	?_scale
  6970  0139' 0815'              	movf	?___ftmul+1,w
  6971  013A' 00A5'              	movwf	?_scale+1
  6972  013B' 0816'              	movf	?___ftmul+2,w
  6973  013C' 00A6'              	movwf	?_scale+2
  6974  013D' 0008               	return
  6975  013E'                    l4272:	
  6976                           
  6977                           ;doprnt.c: 434: return _npowers_[scl];
  6978  013E' 3003               	movlw	3
  6979  013F' 00A7'              	movwf	??_scale
  6980  0140' 0827'              	movf	??_scale,w
  6981  0141' 0090'              	movwf	___bmul@multiplicand
  6982  0142' 082C'              	movf	scale@scl,w
  6983  0143' 120A' 118A' 2000' 120A' 118A' 	fcall	___bmul
  6984  0148' 3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  6985  0149' 0084               	movwf	4
  6986  014A' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6987  014F' 1283               	bcf	3,5	;RP0=0, select bank0
  6988  0150' 1303               	bcf	3,6	;RP1=0, select bank0
  6989  0151' 00A4'              	movwf	?_scale
  6990  0152' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  6991  0157' 00A5'              	movwf	?_scale+1
  6992  0158' 120A' 118A' 2000'  	fcall	stringdir
  6993  015B' 00A6'              	movwf	?_scale+2
  6994  015C' 0008               	return
  6995  015D'                    l4276:	
  6996                           
  6997                           ;doprnt.c: 435: }
  6998                           ;doprnt.c: 436: if(scl>=110)
  6999  015D' 082C'              	movf	scale@scl,w
  7000  015E' 3A80               	xorlw	128
  7001  015F' 3E12               	addlw	-238
  7002  0160' 1C03               	skipc
  7003  0161' 2800'              	goto	l4284
  7004                           
  7005                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7006  0162' 3003               	movlw	3
  7007  0163' 00A7'              	movwf	??_scale
  7008  0164' 0827'              	movf	??_scale,w
  7009  0165' 0090'              	movwf	___bmul@multiplicand
  7010  0166' 300A               	movlw	10
  7011  0167' 0087'              	movwf	___awdiv@divisor
  7012  0168' 3000               	movlw	0
  7013  0169' 0088'              	movwf	___awdiv@divisor+1
  7014  016A' 082C'              	movf	scale@scl,w
  7015  016B' 0082'              	movwf	___awmod@dividend
  7016  016C' 0183'              	clrf	___awmod@dividend+1
  7017  016D' 1B82'              	btfsc	___awmod@dividend,7
  7018  016E' 0383'              	decf	___awmod@dividend+1,f
  7019  016F' 3064               	movlw	100
  7020  0170' 0080'              	movwf	___awmod@divisor
  7021  0171' 3000               	movlw	0
  7022  0172' 0081'              	movwf	___awmod@divisor+1
  7023  0173' 120A' 118A' 2000' 120A' 118A' 	fcall	___awmod
  7024  0178' 1283               	bcf	3,5	;RP0=0, select bank0
  7025  0179' 1303               	bcf	3,6	;RP1=0, select bank0
  7026  017A' 0801'              	movf	?___awmod+1,w
  7027  017B' 008A'              	movwf	___awdiv@dividend+1
  7028  017C' 0800'              	movf	?___awmod,w
  7029  017D' 0089'              	movwf	___awdiv@dividend
  7030  017E' 120A' 118A' 2000' 120A' 118A' 	fcall	___awdiv
  7031  0183' 1283               	bcf	3,5	;RP0=0, select bank0
  7032  0184' 1303               	bcf	3,6	;RP1=0, select bank0
  7033  0185' 0807'              	movf	?___awdiv,w
  7034  0186' 3E09               	addlw	9
  7035  0187' 120A' 118A' 2000' 120A' 118A' 	fcall	___bmul
  7036  018C' 3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  7037  018D' 0084               	movwf	4
  7038  018E' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7039  0193' 1283               	bcf	3,5	;RP0=0, select bank0
  7040  0194' 1303               	bcf	3,6	;RP1=0, select bank0
  7041  0195' 0094'              	movwf	___ftmul@f1
  7042  0196' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7043  019B' 0095'              	movwf	___ftmul@f1+1
  7044  019C' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7045  01A1' 0096'              	movwf	___ftmul@f1+2
  7046  01A2' 3003               	movlw	3
  7047  01A3' 00A8'              	movwf	??_scale+1
  7048  01A4' 0828'              	movf	??_scale+1,w
  7049  01A5' 0090'              	movwf	___bmul@multiplicand
  7050  01A6' 3064               	movlw	100
  7051  01A7' 0087'              	movwf	___awdiv@divisor
  7052  01A8' 3000               	movlw	0
  7053  01A9' 0088'              	movwf	___awdiv@divisor+1
  7054  01AA' 082C'              	movf	scale@scl,w
  7055  01AB' 0089'              	movwf	___awdiv@dividend
  7056  01AC' 018A'              	clrf	___awdiv@dividend+1
  7057  01AD' 1B89'              	btfsc	___awdiv@dividend,7
  7058  01AE' 038A'              	decf	___awdiv@dividend+1,f
  7059  01AF' 120A' 118A' 2000' 120A' 118A' 	fcall	___awdiv
  7060  01B4' 1283               	bcf	3,5	;RP0=0, select bank0
  7061  01B5' 1303               	bcf	3,6	;RP1=0, select bank0
  7062  01B6' 0807'              	movf	?___awdiv,w
  7063  01B7' 3E12               	addlw	18
  7064  01B8' 120A' 118A' 2000' 120A' 118A' 	fcall	___bmul
  7065  01BD' 3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  7066  01BE' 0084               	movwf	4
  7067  01BF' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7068  01C4' 1283               	bcf	3,5	;RP0=0, select bank0
  7069  01C5' 1303               	bcf	3,6	;RP1=0, select bank0
  7070  01C6' 0097'              	movwf	___ftmul@f2
  7071  01C7' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7072  01CC' 0098'              	movwf	___ftmul@f2+1
  7073  01CD' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7074  01D2' 0099'              	movwf	___ftmul@f2+2
  7075  01D3' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftmul
  7076  01D8' 1283               	bcf	3,5	;RP0=0, select bank0
  7077  01D9' 1303               	bcf	3,6	;RP1=0, select bank0
  7078  01DA' 0814'              	movf	?___ftmul,w
  7079  01DB' 00A9'              	movwf	_scale$832
  7080  01DC' 0815'              	movf	?___ftmul+1,w
  7081  01DD' 00AA'              	movwf	_scale$832+1
  7082  01DE' 0816'              	movf	?___ftmul+2,w
  7083  01DF' 00AB'              	movwf	_scale$832+2
  7084                           
  7085                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7086  01E0' 3003               	movlw	3
  7087  01E1' 00A7'              	movwf	??_scale
  7088  01E2' 0827'              	movf	??_scale,w
  7089  01E3' 0090'              	movwf	___bmul@multiplicand
  7090  01E4' 082C'              	movf	scale@scl,w
  7091  01E5' 0082'              	movwf	___awmod@dividend
  7092  01E6' 0183'              	clrf	___awmod@dividend+1
  7093  01E7' 1B82'              	btfsc	___awmod@dividend,7
  7094  01E8' 0383'              	decf	___awmod@dividend+1,f
  7095  01E9' 300A               	movlw	10
  7096  01EA' 0080'              	movwf	___awmod@divisor
  7097  01EB' 3000               	movlw	0
  7098  01EC' 0081'              	movwf	___awmod@divisor+1
  7099  01ED' 120A' 118A' 2000' 120A' 118A' 	fcall	___awmod
  7100  01F2' 1283               	bcf	3,5	;RP0=0, select bank0
  7101  01F3' 1303               	bcf	3,6	;RP1=0, select bank0
  7102  01F4' 0800'              	movf	?___awmod,w
  7103  01F5' 120A' 118A' 2000' 120A' 118A' 	fcall	___bmul
  7104  01FA' 3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  7105  01FB' 0084               	movwf	4
  7106  01FC' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7107  0201' 1283               	bcf	3,5	;RP0=0, select bank0
  7108  0202' 1303               	bcf	3,6	;RP1=0, select bank0
  7109  0203' 0094'              	movwf	___ftmul@f1
  7110  0204' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7111  0209' 0095'              	movwf	___ftmul@f1+1
  7112  020A' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7113  020F' 0096'              	movwf	___ftmul@f1+2
  7114  0210' 0829'              	movf	_scale$832,w
  7115  0211' 0097'              	movwf	___ftmul@f2
  7116  0212' 082A'              	movf	_scale$832+1,w
  7117  0213' 0098'              	movwf	___ftmul@f2+1
  7118  0214' 082B'              	movf	_scale$832+2,w
  7119  0215' 0099'              	movwf	___ftmul@f2+2
  7120  0216' 120A' 118A' 2000'  	fcall	___ftmul
  7121  0219' 1283               	bcf	3,5	;RP0=0, select bank0
  7122  021A' 1303               	bcf	3,6	;RP1=0, select bank0
  7123  021B' 0814'              	movf	?___ftmul,w
  7124  021C' 00A4'              	movwf	?_scale
  7125  021D' 0815'              	movf	?___ftmul+1,w
  7126  021E' 00A5'              	movwf	?_scale+1
  7127  021F' 0816'              	movf	?___ftmul+2,w
  7128  0220' 00A6'              	movwf	?_scale+2
  7129  0221' 0008               	return
  7130  0222'                    l4284:	
  7131                           
  7132                           ;doprnt.c: 438: else if(scl > 10)
  7133  0222' 082C'              	movf	scale@scl,w
  7134  0223' 3A80               	xorlw	128
  7135  0224' 3E75               	addlw	-139
  7136  0225' 1C03               	skipc
  7137  0226' 2800'              	goto	l4290
  7138                           
  7139                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7140  0227' 3003               	movlw	3
  7141  0228' 00A7'              	movwf	??_scale
  7142  0229' 0827'              	movf	??_scale,w
  7143  022A' 0090'              	movwf	___bmul@multiplicand
  7144  022B' 082C'              	movf	scale@scl,w
  7145  022C' 0082'              	movwf	___awmod@dividend
  7146  022D' 0183'              	clrf	___awmod@dividend+1
  7147  022E' 1B82'              	btfsc	___awmod@dividend,7
  7148  022F' 0383'              	decf	___awmod@dividend+1,f
  7149  0230' 300A               	movlw	10
  7150  0231' 0080'              	movwf	___awmod@divisor
  7151  0232' 3000               	movlw	0
  7152  0233' 0081'              	movwf	___awmod@divisor+1
  7153  0234' 120A' 118A' 2000' 120A' 118A' 	fcall	___awmod
  7154  0239' 1283               	bcf	3,5	;RP0=0, select bank0
  7155  023A' 1303               	bcf	3,6	;RP1=0, select bank0
  7156  023B' 0800'              	movf	?___awmod,w
  7157  023C' 120A' 118A' 2000' 120A' 118A' 	fcall	___bmul
  7158  0241' 3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  7159  0242' 0084               	movwf	4
  7160  0243' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7161  0248' 1283               	bcf	3,5	;RP0=0, select bank0
  7162  0249' 1303               	bcf	3,6	;RP1=0, select bank0
  7163  024A' 0094'              	movwf	___ftmul@f1
  7164  024B' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7165  0250' 0095'              	movwf	___ftmul@f1+1
  7166  0251' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7167  0256' 0096'              	movwf	___ftmul@f1+2
  7168  0257' 3003               	movlw	3
  7169  0258' 00A8'              	movwf	??_scale+1
  7170  0259' 0828'              	movf	??_scale+1,w
  7171  025A' 0090'              	movwf	___bmul@multiplicand
  7172  025B' 300A               	movlw	10
  7173  025C' 0087'              	movwf	___awdiv@divisor
  7174  025D' 3000               	movlw	0
  7175  025E' 0088'              	movwf	___awdiv@divisor+1
  7176  025F' 082C'              	movf	scale@scl,w
  7177  0260' 0089'              	movwf	___awdiv@dividend
  7178  0261' 018A'              	clrf	___awdiv@dividend+1
  7179  0262' 1B89'              	btfsc	___awdiv@dividend,7
  7180  0263' 038A'              	decf	___awdiv@dividend+1,f
  7181  0264' 120A' 118A' 2000' 120A' 118A' 	fcall	___awdiv
  7182  0269' 1283               	bcf	3,5	;RP0=0, select bank0
  7183  026A' 1303               	bcf	3,6	;RP1=0, select bank0
  7184  026B' 0807'              	movf	?___awdiv,w
  7185  026C' 3E09               	addlw	9
  7186  026D' 120A' 118A' 2000' 120A' 118A' 	fcall	___bmul
  7187  0272' 3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  7188  0273' 0084               	movwf	4
  7189  0274' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7190  0279' 1283               	bcf	3,5	;RP0=0, select bank0
  7191  027A' 1303               	bcf	3,6	;RP1=0, select bank0
  7192  027B' 0097'              	movwf	___ftmul@f2
  7193  027C' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7194  0281' 0098'              	movwf	___ftmul@f2+1
  7195  0282' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7196  0287' 0099'              	movwf	___ftmul@f2+2
  7197  0288' 120A' 118A' 2000'  	fcall	___ftmul
  7198  028B' 1283               	bcf	3,5	;RP0=0, select bank0
  7199  028C' 1303               	bcf	3,6	;RP1=0, select bank0
  7200  028D' 0814'              	movf	?___ftmul,w
  7201  028E' 00A4'              	movwf	?_scale
  7202  028F' 0815'              	movf	?___ftmul+1,w
  7203  0290' 00A5'              	movwf	?_scale+1
  7204  0291' 0816'              	movf	?___ftmul+2,w
  7205  0292' 00A6'              	movwf	?_scale+2
  7206  0293' 0008               	return
  7207  0294'                    l4290:	
  7208                           
  7209                           ;doprnt.c: 440: return _powers_[scl];
  7210  0294' 3003               	movlw	3
  7211  0295' 00A7'              	movwf	??_scale
  7212  0296' 0827'              	movf	??_scale,w
  7213  0297' 0090'              	movwf	___bmul@multiplicand
  7214  0298' 082C'              	movf	scale@scl,w
  7215  0299' 120A' 118A' 2000' 120A' 118A' 	fcall	___bmul
  7216  029E' 3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  7217  029F' 0084               	movwf	4
  7218  02A0' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7219  02A5' 1283               	bcf	3,5	;RP0=0, select bank0
  7220  02A6' 1303               	bcf	3,6	;RP1=0, select bank0
  7221  02A7' 00A4'              	movwf	?_scale
  7222  02A8' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7223  02AD' 00A5'              	movwf	?_scale+1
  7224  02AE' 120A' 118A' 2000'  	fcall	stringdir
  7225  02B1' 00A6'              	movwf	?_scale+2
  7226  02B2' 0008               	return
  7227  02B3'                    __end_of_scale:	
  7228                           
  7229                           	psect	text18
  7230  0000'                    __ptext18:	
  7231 ;; *************** function _isdigit *****************
  7232 ;; Defined at:
  7233 ;;		line 8 in file "D:\mplab\sources\common\isdigit.c"
  7234 ;; Parameters:    Size  Location     Type
  7235 ;;  c               1    wreg     unsigned char 
  7236 ;; Auto vars:     Size  Location     Type
  7237 ;;  c               1    1[BANK0 ] unsigned char 
  7238 ;; Return value:  Size  Location     Type
  7239 ;;		None               void
  7240 ;; Registers used:
  7241 ;;		wreg, status,2, status,0
  7242 ;; Tracked objects:
  7243 ;;		On entry : 0/0
  7244 ;;		On exit  : 0/0
  7245 ;;		Unchanged: 0/0
  7246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7247 ;;      Params:         0       0       0       0       0
  7248 ;;      Locals:         0       2       0       0       0
  7249 ;;      Temps:          0       0       0       0       0
  7250 ;;      Totals:         0       2       0       0       0
  7251 ;;Total ram usage:        2 bytes
  7252 ;; Hardware stack levels used:    1
  7253 ;; Hardware stack levels required when called:    1
  7254 ;; This function calls:
  7255 ;;		Nothing
  7256 ;; This function is called by:
  7257 ;;		_sprintf
  7258 ;;		_strtod
  7259 ;;		_atol
  7260 ;; This function uses a non-reentrant model
  7261 ;;
  7262                           
  7263                           
  7264                           ;psect for function _isdigit
  7265  0000'                    _isdigit:	
  7266                           
  7267                           ;incstack = 0
  7268                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7269                           ;isdigit@c stored from wreg
  7270  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  7271  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  7272  0002' 0081'              	movwf	isdigit@c
  7273  0003' 0180'              	clrf	_isdigit$604
  7274  0004' 303A               	movlw	58
  7275  0005' 0201'              	subwf	isdigit@c,w
  7276  0006' 1803               	skipnc
  7277  0007' 2800'              	goto	l3918
  7278  0008' 3030               	movlw	48
  7279  0009' 0201'              	subwf	isdigit@c,w
  7280  000A' 1C03               	skipc
  7281  000B' 2800'              	goto	l3918
  7282  000C' 0180'              	clrf	_isdigit$604
  7283  000D' 0A80'              	incf	_isdigit$604,f
  7284  000E'                    l3918:	
  7285  000E' 0C00'              	rrf	_isdigit$604,w
  7286  000F' 0008               	return
  7287  0010'                    __end_of_isdigit:	
  7288                           
  7289                           	psect	text19
  7290  0000'                    __ptext19:	
  7291 ;; *************** function _fround *****************
  7292 ;; Defined at:
  7293 ;;		line 409 in file "D:\mplab\sources\common\doprnt.c"
  7294 ;; Parameters:    Size  Location     Type
  7295 ;;  prec            1    wreg     unsigned char 
  7296 ;; Auto vars:     Size  Location     Type
  7297 ;;  prec            1   51[BANK0 ] unsigned char 
  7298 ;; Return value:  Size  Location     Type
  7299 ;;                  3   36[BANK0 ] unsigned char 
  7300 ;; Registers used:
  7301 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7302 ;; Tracked objects:
  7303 ;;		On entry : 0/0
  7304 ;;		On exit  : 0/0
  7305 ;;		Unchanged: 0/0
  7306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7307 ;;      Params:         0       3       0       0       0
  7308 ;;      Locals:         0       7       0       0       0
  7309 ;;      Temps:          0       6       0       0       0
  7310 ;;      Totals:         0      16       0       0       0
  7311 ;;Total ram usage:       16 bytes
  7312 ;; Hardware stack levels used:    1
  7313 ;; Hardware stack levels required when called:    3
  7314 ;; This function calls:
  7315 ;;		___awdiv
  7316 ;;		___awmod
  7317 ;;		___bmul
  7318 ;;		___ftmul
  7319 ;; This function is called by:
  7320 ;;		_sprintf
  7321 ;; This function uses a non-reentrant model
  7322 ;;
  7323                           
  7324                           
  7325                           ;psect for function _fround
  7326  0000'                    _fround:	
  7327                           
  7328                           ;incstack = 0
  7329                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7330                           ;fround@prec stored from wreg
  7331  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  7332  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  7333  0002' 00B3'              	movwf	fround@prec
  7334                           
  7335                           ;doprnt.c: 413: if(prec>=110)
  7336  0003' 306E               	movlw	110
  7337  0004' 0233'              	subwf	fround@prec,w
  7338  0005' 1C03               	skipc
  7339  0006' 2800'              	goto	l4242
  7340                           
  7341                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7342  0007' 3003               	movlw	3
  7343  0008' 00A7'              	movwf	??_fround
  7344  0009' 0827'              	movf	??_fround,w
  7345  000A' 0090'              	movwf	___bmul@multiplicand
  7346  000B' 300A               	movlw	10
  7347  000C' 0087'              	movwf	___awdiv@divisor
  7348  000D' 3000               	movlw	0
  7349  000E' 0088'              	movwf	___awdiv@divisor+1
  7350  000F' 0833'              	movf	fround@prec,w
  7351  0010' 00A8'              	movwf	??_fround+1
  7352  0011' 01A9'              	clrf	??_fround+2
  7353  0012' 0828'              	movf	??_fround+1,w
  7354  0013' 0082'              	movwf	___awmod@dividend
  7355  0014' 0829'              	movf	??_fround+2,w
  7356  0015' 0083'              	movwf	___awmod@dividend+1
  7357  0016' 3064               	movlw	100
  7358  0017' 0080'              	movwf	___awmod@divisor
  7359  0018' 3000               	movlw	0
  7360  0019' 0081'              	movwf	___awmod@divisor+1
  7361  001A' 120A' 118A' 2000' 120A' 118A' 	fcall	___awmod
  7362  001F' 1283               	bcf	3,5	;RP0=0, select bank0
  7363  0020' 1303               	bcf	3,6	;RP1=0, select bank0
  7364  0021' 0801'              	movf	?___awmod+1,w
  7365  0022' 008A'              	movwf	___awdiv@dividend+1
  7366  0023' 0800'              	movf	?___awmod,w
  7367  0024' 0089'              	movwf	___awdiv@dividend
  7368  0025' 120A' 118A' 2000' 120A' 118A' 	fcall	___awdiv
  7369  002A' 1283               	bcf	3,5	;RP0=0, select bank0
  7370  002B' 1303               	bcf	3,6	;RP1=0, select bank0
  7371  002C' 0807'              	movf	?___awdiv,w
  7372  002D' 3E09               	addlw	9
  7373  002E' 120A' 118A' 2000' 120A' 118A' 	fcall	___bmul
  7374  0033' 3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  7375  0034' 0084               	movwf	4
  7376  0035' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7377  003A' 1283               	bcf	3,5	;RP0=0, select bank0
  7378  003B' 1303               	bcf	3,6	;RP1=0, select bank0
  7379  003C' 0094'              	movwf	___ftmul@f1
  7380  003D' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7381  0042' 0095'              	movwf	___ftmul@f1+1
  7382  0043' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7383  0048' 0096'              	movwf	___ftmul@f1+2
  7384  0049' 3003               	movlw	3
  7385  004A' 00AA'              	movwf	??_fround+3
  7386  004B' 082A'              	movf	??_fround+3,w
  7387  004C' 0090'              	movwf	___bmul@multiplicand
  7388  004D' 3064               	movlw	100
  7389  004E' 0087'              	movwf	___awdiv@divisor
  7390  004F' 3000               	movlw	0
  7391  0050' 0088'              	movwf	___awdiv@divisor+1
  7392  0051' 0833'              	movf	fround@prec,w
  7393  0052' 00AB'              	movwf	??_fround+4
  7394  0053' 01AC'              	clrf	??_fround+5
  7395  0054' 082B'              	movf	??_fround+4,w
  7396  0055' 0089'              	movwf	___awdiv@dividend
  7397  0056' 082C'              	movf	??_fround+5,w
  7398  0057' 008A'              	movwf	___awdiv@dividend+1
  7399  0058' 120A' 118A' 2000' 120A' 118A' 	fcall	___awdiv
  7400  005D' 1283               	bcf	3,5	;RP0=0, select bank0
  7401  005E' 1303               	bcf	3,6	;RP1=0, select bank0
  7402  005F' 0807'              	movf	?___awdiv,w
  7403  0060' 3E12               	addlw	18
  7404  0061' 120A' 118A' 2000' 120A' 118A' 	fcall	___bmul
  7405  0066' 3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  7406  0067' 0084               	movwf	4
  7407  0068' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7408  006D' 1283               	bcf	3,5	;RP0=0, select bank0
  7409  006E' 1303               	bcf	3,6	;RP1=0, select bank0
  7410  006F' 0097'              	movwf	___ftmul@f2
  7411  0070' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7412  0075' 0098'              	movwf	___ftmul@f2+1
  7413  0076' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7414  007B' 0099'              	movwf	___ftmul@f2+2
  7415  007C' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftmul
  7416  0081' 1283               	bcf	3,5	;RP0=0, select bank0
  7417  0082' 1303               	bcf	3,6	;RP1=0, select bank0
  7418  0083' 0814'              	movf	?___ftmul,w
  7419  0084' 00B0'              	movwf	_fround$830
  7420  0085' 0815'              	movf	?___ftmul+1,w
  7421  0086' 00B1'              	movwf	_fround$830+1
  7422  0087' 0816'              	movf	?___ftmul+2,w
  7423  0088' 00B2'              	movwf	_fround$830+2
  7424                           
  7425                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7426  0089' 3003               	movlw	3
  7427  008A' 00A7'              	movwf	??_fround
  7428  008B' 0827'              	movf	??_fround,w
  7429  008C' 0090'              	movwf	___bmul@multiplicand
  7430  008D' 0833'              	movf	fround@prec,w
  7431  008E' 00A8'              	movwf	??_fround+1
  7432  008F' 01A9'              	clrf	??_fround+2
  7433  0090' 0828'              	movf	??_fround+1,w
  7434  0091' 0082'              	movwf	___awmod@dividend
  7435  0092' 0829'              	movf	??_fround+2,w
  7436  0093' 0083'              	movwf	___awmod@dividend+1
  7437  0094' 300A               	movlw	10
  7438  0095' 0080'              	movwf	___awmod@divisor
  7439  0096' 3000               	movlw	0
  7440  0097' 0081'              	movwf	___awmod@divisor+1
  7441  0098' 120A' 118A' 2000' 120A' 118A' 	fcall	___awmod
  7442  009D' 1283               	bcf	3,5	;RP0=0, select bank0
  7443  009E' 1303               	bcf	3,6	;RP1=0, select bank0
  7444  009F' 0800'              	movf	?___awmod,w
  7445  00A0' 120A' 118A' 2000' 120A' 118A' 	fcall	___bmul
  7446  00A5' 3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  7447  00A6' 0084               	movwf	4
  7448  00A7' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7449  00AC' 1283               	bcf	3,5	;RP0=0, select bank0
  7450  00AD' 1303               	bcf	3,6	;RP1=0, select bank0
  7451  00AE' 0094'              	movwf	___ftmul@f1
  7452  00AF' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7453  00B4' 0095'              	movwf	___ftmul@f1+1
  7454  00B5' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7455  00BA' 0096'              	movwf	___ftmul@f1+2
  7456  00BB' 0830'              	movf	_fround$830,w
  7457  00BC' 0097'              	movwf	___ftmul@f2
  7458  00BD' 0831'              	movf	_fround$830+1,w
  7459  00BE' 0098'              	movwf	___ftmul@f2+1
  7460  00BF' 0832'              	movf	_fround$830+2,w
  7461  00C0' 0099'              	movwf	___ftmul@f2+2
  7462  00C1' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftmul
  7463  00C6' 1283               	bcf	3,5	;RP0=0, select bank0
  7464  00C7' 1303               	bcf	3,6	;RP1=0, select bank0
  7465  00C8' 0814'              	movf	?___ftmul,w
  7466  00C9' 00AD'              	movwf	_fround$831
  7467  00CA' 0815'              	movf	?___ftmul+1,w
  7468  00CB' 00AE'              	movwf	_fround$831+1
  7469  00CC' 0816'              	movf	?___ftmul+2,w
  7470  00CD' 00AF'              	movwf	_fround$831+2
  7471                           
  7472                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7473  00CE' 3000               	movlw	0
  7474  00CF' 0094'              	movwf	___ftmul@f1
  7475  00D0' 3000               	movlw	0
  7476  00D1' 0095'              	movwf	___ftmul@f1+1
  7477  00D2' 303F               	movlw	63
  7478  00D3' 0096'              	movwf	___ftmul@f1+2
  7479  00D4' 082D'              	movf	_fround$831,w
  7480  00D5' 0097'              	movwf	___ftmul@f2
  7481  00D6' 082E'              	movf	_fround$831+1,w
  7482  00D7' 0098'              	movwf	___ftmul@f2+1
  7483  00D8' 082F'              	movf	_fround$831+2,w
  7484  00D9' 0099'              	movwf	___ftmul@f2+2
  7485  00DA' 120A' 118A' 2000'  	fcall	___ftmul
  7486  00DD' 1283               	bcf	3,5	;RP0=0, select bank0
  7487  00DE' 1303               	bcf	3,6	;RP1=0, select bank0
  7488  00DF' 0814'              	movf	?___ftmul,w
  7489  00E0' 00A4'              	movwf	?_fround
  7490  00E1' 0815'              	movf	?___ftmul+1,w
  7491  00E2' 00A5'              	movwf	?_fround+1
  7492  00E3' 0816'              	movf	?___ftmul+2,w
  7493  00E4' 00A6'              	movwf	?_fround+2
  7494  00E5' 0008               	return
  7495  00E6'                    l4242:	
  7496                           
  7497                           ;doprnt.c: 415: else if(prec > 10)
  7498  00E6' 300B               	movlw	11
  7499  00E7' 0233'              	subwf	fround@prec,w
  7500  00E8' 1C03               	skipc
  7501  00E9' 2800'              	goto	l4250
  7502                           
  7503                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7504  00EA' 3003               	movlw	3
  7505  00EB' 00A7'              	movwf	??_fround
  7506  00EC' 0827'              	movf	??_fround,w
  7507  00ED' 0090'              	movwf	___bmul@multiplicand
  7508  00EE' 0833'              	movf	fround@prec,w
  7509  00EF' 00A8'              	movwf	??_fround+1
  7510  00F0' 01A9'              	clrf	??_fround+2
  7511  00F1' 0828'              	movf	??_fround+1,w
  7512  00F2' 0082'              	movwf	___awmod@dividend
  7513  00F3' 0829'              	movf	??_fround+2,w
  7514  00F4' 0083'              	movwf	___awmod@dividend+1
  7515  00F5' 300A               	movlw	10
  7516  00F6' 0080'              	movwf	___awmod@divisor
  7517  00F7' 3000               	movlw	0
  7518  00F8' 0081'              	movwf	___awmod@divisor+1
  7519  00F9' 120A' 118A' 2000' 120A' 118A' 	fcall	___awmod
  7520  00FE' 1283               	bcf	3,5	;RP0=0, select bank0
  7521  00FF' 1303               	bcf	3,6	;RP1=0, select bank0
  7522  0100' 0800'              	movf	?___awmod,w
  7523  0101' 120A' 118A' 2000' 120A' 118A' 	fcall	___bmul
  7524  0106' 3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  7525  0107' 0084               	movwf	4
  7526  0108' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7527  010D' 1283               	bcf	3,5	;RP0=0, select bank0
  7528  010E' 1303               	bcf	3,6	;RP1=0, select bank0
  7529  010F' 0094'              	movwf	___ftmul@f1
  7530  0110' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7531  0115' 0095'              	movwf	___ftmul@f1+1
  7532  0116' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7533  011B' 0096'              	movwf	___ftmul@f1+2
  7534  011C' 3003               	movlw	3
  7535  011D' 00AA'              	movwf	??_fround+3
  7536  011E' 082A'              	movf	??_fround+3,w
  7537  011F' 0090'              	movwf	___bmul@multiplicand
  7538  0120' 300A               	movlw	10
  7539  0121' 0087'              	movwf	___awdiv@divisor
  7540  0122' 3000               	movlw	0
  7541  0123' 0088'              	movwf	___awdiv@divisor+1
  7542  0124' 0833'              	movf	fround@prec,w
  7543  0125' 00AB'              	movwf	??_fround+4
  7544  0126' 01AC'              	clrf	??_fround+5
  7545  0127' 082B'              	movf	??_fround+4,w
  7546  0128' 0089'              	movwf	___awdiv@dividend
  7547  0129' 082C'              	movf	??_fround+5,w
  7548  012A' 008A'              	movwf	___awdiv@dividend+1
  7549  012B' 120A' 118A' 2000' 120A' 118A' 	fcall	___awdiv
  7550  0130' 1283               	bcf	3,5	;RP0=0, select bank0
  7551  0131' 1303               	bcf	3,6	;RP1=0, select bank0
  7552  0132' 0807'              	movf	?___awdiv,w
  7553  0133' 3E09               	addlw	9
  7554  0134' 120A' 118A' 2000' 120A' 118A' 	fcall	___bmul
  7555  0139' 3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  7556  013A' 0084               	movwf	4
  7557  013B' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7558  0140' 1283               	bcf	3,5	;RP0=0, select bank0
  7559  0141' 1303               	bcf	3,6	;RP1=0, select bank0
  7560  0142' 0097'              	movwf	___ftmul@f2
  7561  0143' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7562  0148' 0098'              	movwf	___ftmul@f2+1
  7563  0149' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7564  014E' 0099'              	movwf	___ftmul@f2+2
  7565  014F' 120A' 118A' 2000' 120A' 118A' 	fcall	___ftmul
  7566  0154' 1283               	bcf	3,5	;RP0=0, select bank0
  7567  0155' 1303               	bcf	3,6	;RP1=0, select bank0
  7568  0156' 0814'              	movf	?___ftmul,w
  7569  0157' 00B0'              	movwf	_fround$830
  7570  0158' 0815'              	movf	?___ftmul+1,w
  7571  0159' 00B1'              	movwf	_fround$830+1
  7572  015A' 0816'              	movf	?___ftmul+2,w
  7573  015B' 00B2'              	movwf	_fround$830+2
  7574                           
  7575                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7576  015C' 3000               	movlw	0
  7577  015D' 0094'              	movwf	___ftmul@f1
  7578  015E' 3000               	movlw	0
  7579  015F' 0095'              	movwf	___ftmul@f1+1
  7580  0160' 303F               	movlw	63
  7581  0161' 0096'              	movwf	___ftmul@f1+2
  7582  0162' 0830'              	movf	_fround$830,w
  7583  0163' 0097'              	movwf	___ftmul@f2
  7584  0164' 0831'              	movf	_fround$830+1,w
  7585  0165' 0098'              	movwf	___ftmul@f2+1
  7586  0166' 0832'              	movf	_fround$830+2,w
  7587  0167' 0099'              	movwf	___ftmul@f2+2
  7588  0168' 120A' 118A' 2000'  	fcall	___ftmul
  7589  016B' 1283               	bcf	3,5	;RP0=0, select bank0
  7590  016C' 1303               	bcf	3,6	;RP1=0, select bank0
  7591  016D' 0814'              	movf	?___ftmul,w
  7592  016E' 00A4'              	movwf	?_fround
  7593  016F' 0815'              	movf	?___ftmul+1,w
  7594  0170' 00A5'              	movwf	?_fround+1
  7595  0171' 0816'              	movf	?___ftmul+2,w
  7596  0172' 00A6'              	movwf	?_fround+2
  7597  0173' 0008               	return
  7598  0174'                    l4250:	
  7599                           
  7600                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7601  0174' 3000               	movlw	0
  7602  0175' 0094'              	movwf	___ftmul@f1
  7603  0176' 3000               	movlw	0
  7604  0177' 0095'              	movwf	___ftmul@f1+1
  7605  0178' 303F               	movlw	63
  7606  0179' 0096'              	movwf	___ftmul@f1+2
  7607  017A' 3003               	movlw	3
  7608  017B' 00A7'              	movwf	??_fround
  7609  017C' 0827'              	movf	??_fround,w
  7610  017D' 0090'              	movwf	___bmul@multiplicand
  7611  017E' 0833'              	movf	fround@prec,w
  7612  017F' 120A' 118A' 2000' 120A' 118A' 	fcall	___bmul
  7613  0184' 3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  7614  0185' 0084               	movwf	4
  7615  0186' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7616  018B' 1283               	bcf	3,5	;RP0=0, select bank0
  7617  018C' 1303               	bcf	3,6	;RP1=0, select bank0
  7618  018D' 0097'              	movwf	___ftmul@f2
  7619  018E' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7620  0193' 0098'              	movwf	___ftmul@f2+1
  7621  0194' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  7622  0199' 0099'              	movwf	___ftmul@f2+2
  7623  019A' 120A' 118A' 2000'  	fcall	___ftmul
  7624  019D' 1283               	bcf	3,5	;RP0=0, select bank0
  7625  019E' 1303               	bcf	3,6	;RP1=0, select bank0
  7626  019F' 0814'              	movf	?___ftmul,w
  7627  01A0' 00A4'              	movwf	?_fround
  7628  01A1' 0815'              	movf	?___ftmul+1,w
  7629  01A2' 00A5'              	movwf	?_fround+1
  7630  01A3' 0816'              	movf	?___ftmul+2,w
  7631  01A4' 00A6'              	movwf	?_fround+2
  7632  01A5' 0008               	return
  7633  01A6'                    __end_of_fround:	
  7634                           
  7635                           	psect	text20
  7636  0000'                    __ptext20:	
  7637 ;; *************** function ___ftmul *****************
  7638 ;; Defined at:
  7639 ;;		line 62 in file "D:\mplab\sources\common\ftmul.c"
  7640 ;; Parameters:    Size  Location     Type
  7641 ;;  f1              3   20[BANK0 ] float 
  7642 ;;  f2              3   23[BANK0 ] float 
  7643 ;; Auto vars:     Size  Location     Type
  7644 ;;  f3_as_produc    3   31[BANK0 ] unsigned um
  7645 ;;  sign            1   35[BANK0 ] unsigned char 
  7646 ;;  cntr            1   34[BANK0 ] unsigned char 
  7647 ;;  exp             1   30[BANK0 ] unsigned char 
  7648 ;; Return value:  Size  Location     Type
  7649 ;;                  3   20[BANK0 ] float 
  7650 ;; Registers used:
  7651 ;;		wreg, status,2, status,0, pclath, cstack
  7652 ;; Tracked objects:
  7653 ;;		On entry : 0/0
  7654 ;;		On exit  : 0/0
  7655 ;;		Unchanged: 0/0
  7656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7657 ;;      Params:         0       6       0       0       0
  7658 ;;      Locals:         0       6       0       0       0
  7659 ;;      Temps:          0       4       0       0       0
  7660 ;;      Totals:         0      16       0       0       0
  7661 ;;Total ram usage:       16 bytes
  7662 ;; Hardware stack levels used:    1
  7663 ;; Hardware stack levels required when called:    2
  7664 ;; This function calls:
  7665 ;;		___ftpack
  7666 ;; This function is called by:
  7667 ;;		_convert_to_degrees
  7668 ;;		_fround
  7669 ;;		_scale
  7670 ;;		_sprintf
  7671 ;;		_strtod
  7672 ;; This function uses a non-reentrant model
  7673 ;;
  7674                           
  7675                           
  7676                           ;psect for function ___ftmul
  7677  0000'                    ___ftmul:	
  7678                           
  7679                           ;incstack = 0
  7680                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7681  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  7682  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  7683  0002' 0814'              	movf	___ftmul@f1,w
  7684  0003' 009A'              	movwf	??___ftmul
  7685  0004' 0815'              	movf	___ftmul@f1+1,w
  7686  0005' 009B'              	movwf	??___ftmul+1
  7687  0006' 0816'              	movf	___ftmul@f1+2,w
  7688  0007' 009C'              	movwf	??___ftmul+2
  7689  0008' 1003               	clrc
  7690  0009' 0D1B'              	rlf	??___ftmul+1,w
  7691  000A' 0D1C'              	rlf	??___ftmul+2,w
  7692  000B' 009D'              	movwf	??___ftmul+3
  7693  000C' 081D'              	movf	??___ftmul+3,w
  7694  000D' 009E'              	movwf	___ftmul@exp
  7695  000E' 081E'              	movf	___ftmul@exp,w
  7696  000F' 1D03               	btfss	3,2
  7697  0010' 2800'              	goto	l4166
  7698  0011' 3000               	movlw	0
  7699  0012' 0094'              	movwf	?___ftmul
  7700  0013' 3000               	movlw	0
  7701  0014' 0095'              	movwf	?___ftmul+1
  7702  0015' 3000               	movlw	0
  7703  0016' 0096'              	movwf	?___ftmul+2
  7704  0017' 0008               	return
  7705  0018'                    l4166:	
  7706  0018' 0817'              	movf	___ftmul@f2,w
  7707  0019' 009A'              	movwf	??___ftmul
  7708  001A' 0818'              	movf	___ftmul@f2+1,w
  7709  001B' 009B'              	movwf	??___ftmul+1
  7710  001C' 0819'              	movf	___ftmul@f2+2,w
  7711  001D' 009C'              	movwf	??___ftmul+2
  7712  001E' 1003               	clrc
  7713  001F' 0D1B'              	rlf	??___ftmul+1,w
  7714  0020' 0D1C'              	rlf	??___ftmul+2,w
  7715  0021' 009D'              	movwf	??___ftmul+3
  7716  0022' 081D'              	movf	??___ftmul+3,w
  7717  0023' 00A3'              	movwf	___ftmul@sign
  7718  0024' 0823'              	movf	___ftmul@sign,w
  7719  0025' 1D03               	btfss	3,2
  7720  0026' 2800'              	goto	l4172
  7721  0027' 3000               	movlw	0
  7722  0028' 0094'              	movwf	?___ftmul
  7723  0029' 3000               	movlw	0
  7724  002A' 0095'              	movwf	?___ftmul+1
  7725  002B' 3000               	movlw	0
  7726  002C' 0096'              	movwf	?___ftmul+2
  7727  002D' 0008               	return
  7728  002E'                    l4172:	
  7729  002E' 0823'              	movf	___ftmul@sign,w
  7730  002F' 3E7B               	addlw	123
  7731  0030' 009A'              	movwf	??___ftmul
  7732  0031' 081A'              	movf	??___ftmul,w
  7733  0032' 079E'              	addwf	___ftmul@exp,f
  7734  0033' 0814'              	movf	___ftmul@f1,w
  7735  0034' 009A'              	movwf	??___ftmul
  7736  0035' 0815'              	movf	___ftmul@f1+1,w
  7737  0036' 009B'              	movwf	??___ftmul+1
  7738  0037' 0816'              	movf	___ftmul@f1+2,w
  7739  0038' 009C'              	movwf	??___ftmul+2
  7740  0039' 3010               	movlw	16
  7741  003A'                    u6465:	
  7742  003A' 1003               	clrc
  7743  003B' 0C9C'              	rrf	??___ftmul+2,f
  7744  003C' 0C9B'              	rrf	??___ftmul+1,f
  7745  003D' 0C9A'              	rrf	??___ftmul,f
  7746  003E' 3EFF               	addlw	-1
  7747  003F' 1D03               	skipz
  7748  0040' 2800'              	goto	u6465
  7749  0041' 081A'              	movf	??___ftmul,w
  7750  0042' 009D'              	movwf	??___ftmul+3
  7751  0043' 081D'              	movf	??___ftmul+3,w
  7752  0044' 00A3'              	movwf	___ftmul@sign
  7753  0045' 0817'              	movf	___ftmul@f2,w
  7754  0046' 009A'              	movwf	??___ftmul
  7755  0047' 0818'              	movf	___ftmul@f2+1,w
  7756  0048' 009B'              	movwf	??___ftmul+1
  7757  0049' 0819'              	movf	___ftmul@f2+2,w
  7758  004A' 009C'              	movwf	??___ftmul+2
  7759  004B' 3010               	movlw	16
  7760  004C'                    u6475:	
  7761  004C' 1003               	clrc
  7762  004D' 0C9C'              	rrf	??___ftmul+2,f
  7763  004E' 0C9B'              	rrf	??___ftmul+1,f
  7764  004F' 0C9A'              	rrf	??___ftmul,f
  7765  0050' 3EFF               	addlw	-1
  7766  0051' 1D03               	skipz
  7767  0052' 2800'              	goto	u6475
  7768  0053' 081A'              	movf	??___ftmul,w
  7769  0054' 009D'              	movwf	??___ftmul+3
  7770  0055' 081D'              	movf	??___ftmul+3,w
  7771  0056' 06A3'              	xorwf	___ftmul@sign,f
  7772  0057' 3080               	movlw	128
  7773  0058' 009A'              	movwf	??___ftmul
  7774  0059' 081A'              	movf	??___ftmul,w
  7775  005A' 05A3'              	andwf	___ftmul@sign,f
  7776  005B' 1795'              	bsf	___ftmul@f1+1,7
  7777  005C' 1798'              	bsf	___ftmul@f2+1,7
  7778  005D' 30FF               	movlw	255
  7779  005E' 0597'              	andwf	___ftmul@f2,f
  7780  005F' 30FF               	movlw	255
  7781  0060' 0598'              	andwf	___ftmul@f2+1,f
  7782  0061' 3000               	movlw	0
  7783  0062' 0599'              	andwf	___ftmul@f2+2,f
  7784  0063' 3000               	movlw	0
  7785  0064' 009F'              	movwf	___ftmul@f3_as_product
  7786  0065' 3000               	movlw	0
  7787  0066' 00A0'              	movwf	___ftmul@f3_as_product+1
  7788  0067' 3000               	movlw	0
  7789  0068' 00A1'              	movwf	___ftmul@f3_as_product+2
  7790  0069' 3007               	movlw	7
  7791  006A' 009A'              	movwf	??___ftmul
  7792  006B' 081A'              	movf	??___ftmul,w
  7793  006C' 00A2'              	movwf	___ftmul@cntr
  7794  006D'                    l4184:	
  7795  006D' 1C14'              	btfss	___ftmul@f1,0
  7796  006E' 2800'              	goto	l4188
  7797  006F' 0817'              	movf	___ftmul@f2,w
  7798  0070' 079F'              	addwf	___ftmul@f3_as_product,f
  7799  0071' 0818'              	movf	___ftmul@f2+1,w
  7800  0072' 1103               	clrz
  7801  0073' 1803               	skipnc
  7802  0074' 0A18'              	incf	___ftmul@f2+1,w
  7803  0075' 1D03               	btfss	3,2
  7804  0076' 07A0'              	addwf	___ftmul@f3_as_product+1,f
  7805  0077' 0819'              	movf	___ftmul@f2+2,w
  7806  0078' 1103               	clrz
  7807  0079' 1803               	skipnc
  7808  007A' 0A19'              	incf	___ftmul@f2+2,w
  7809  007B' 1D03               	btfss	3,2
  7810  007C' 07A1'              	addwf	___ftmul@f3_as_product+2,f
  7811  007D'                    l4188:	
  7812  007D' 3001               	movlw	1
  7813  007E'                    u6505:	
  7814  007E' 1003               	clrc
  7815  007F' 0C96'              	rrf	___ftmul@f1+2,f
  7816  0080' 0C95'              	rrf	___ftmul@f1+1,f
  7817  0081' 0C94'              	rrf	___ftmul@f1,f
  7818  0082' 3EFF               	addlw	-1
  7819  0083' 1D03               	skipz
  7820  0084' 2800'              	goto	u6505
  7821  0085' 3001               	movlw	1
  7822  0086'                    u6515:	
  7823  0086' 1003               	clrc
  7824  0087' 0D97'              	rlf	___ftmul@f2,f
  7825  0088' 0D98'              	rlf	___ftmul@f2+1,f
  7826  0089' 0D99'              	rlf	___ftmul@f2+2,f
  7827  008A' 3EFF               	addlw	-1
  7828  008B' 1D03               	skipz
  7829  008C' 2800'              	goto	u6515
  7830  008D' 3001               	movlw	1
  7831  008E' 02A2'              	subwf	___ftmul@cntr,f
  7832  008F' 1D03               	btfss	3,2
  7833  0090' 2800'              	goto	l4184
  7834  0091' 3009               	movlw	9
  7835  0092' 009A'              	movwf	??___ftmul
  7836  0093' 081A'              	movf	??___ftmul,w
  7837  0094' 00A2'              	movwf	___ftmul@cntr
  7838  0095'                    l4196:	
  7839  0095' 1C14'              	btfss	___ftmul@f1,0
  7840  0096' 2800'              	goto	l4200
  7841  0097' 0817'              	movf	___ftmul@f2,w
  7842  0098' 079F'              	addwf	___ftmul@f3_as_product,f
  7843  0099' 0818'              	movf	___ftmul@f2+1,w
  7844  009A' 1103               	clrz
  7845  009B' 1803               	skipnc
  7846  009C' 0A18'              	incf	___ftmul@f2+1,w
  7847  009D' 1D03               	btfss	3,2
  7848  009E' 07A0'              	addwf	___ftmul@f3_as_product+1,f
  7849  009F' 0819'              	movf	___ftmul@f2+2,w
  7850  00A0' 1103               	clrz
  7851  00A1' 1803               	skipnc
  7852  00A2' 0A19'              	incf	___ftmul@f2+2,w
  7853  00A3' 1D03               	btfss	3,2
  7854  00A4' 07A1'              	addwf	___ftmul@f3_as_product+2,f
  7855  00A5'                    l4200:	
  7856  00A5' 3001               	movlw	1
  7857  00A6'                    u6555:	
  7858  00A6' 1003               	clrc
  7859  00A7' 0C96'              	rrf	___ftmul@f1+2,f
  7860  00A8' 0C95'              	rrf	___ftmul@f1+1,f
  7861  00A9' 0C94'              	rrf	___ftmul@f1,f
  7862  00AA' 3EFF               	addlw	-1
  7863  00AB' 1D03               	skipz
  7864  00AC' 2800'              	goto	u6555
  7865  00AD' 3001               	movlw	1
  7866  00AE'                    u6565:	
  7867  00AE' 1003               	clrc
  7868  00AF' 0CA1'              	rrf	___ftmul@f3_as_product+2,f
  7869  00B0' 0CA0'              	rrf	___ftmul@f3_as_product+1,f
  7870  00B1' 0C9F'              	rrf	___ftmul@f3_as_product,f
  7871  00B2' 3EFF               	addlw	-1
  7872  00B3' 1D03               	skipz
  7873  00B4' 2800'              	goto	u6565
  7874  00B5' 3001               	movlw	1
  7875  00B6' 02A2'              	subwf	___ftmul@cntr,f
  7876  00B7' 1D03               	btfss	3,2
  7877  00B8' 2800'              	goto	l4196
  7878  00B9' 081F'              	movf	___ftmul@f3_as_product,w
  7879  00BA' 0080'              	movwf	___ftpack@arg
  7880  00BB' 0820'              	movf	___ftmul@f3_as_product+1,w
  7881  00BC' 0081'              	movwf	___ftpack@arg+1
  7882  00BD' 0821'              	movf	___ftmul@f3_as_product+2,w
  7883  00BE' 0082'              	movwf	___ftpack@arg+2
  7884  00BF' 081E'              	movf	___ftmul@exp,w
  7885  00C0' 009A'              	movwf	??___ftmul
  7886  00C1' 081A'              	movf	??___ftmul,w
  7887  00C2' 0083'              	movwf	___ftpack@exp
  7888  00C3' 0823'              	movf	___ftmul@sign,w
  7889  00C4' 009B'              	movwf	??___ftmul+1
  7890  00C5' 081B'              	movf	??___ftmul+1,w
  7891  00C6' 0084'              	movwf	___ftpack@sign
  7892  00C7' 120A' 118A' 2000'  	fcall	___ftpack
  7893  00CA' 1283               	bcf	3,5	;RP0=0, select bank0
  7894  00CB' 1303               	bcf	3,6	;RP1=0, select bank0
  7895  00CC' 0800'              	movf	?___ftpack,w
  7896  00CD' 0094'              	movwf	?___ftmul
  7897  00CE' 0801'              	movf	?___ftpack+1,w
  7898  00CF' 0095'              	movwf	?___ftmul+1
  7899  00D0' 0802'              	movf	?___ftpack+2,w
  7900  00D1' 0096'              	movwf	?___ftmul+2
  7901  00D2' 0008               	return
  7902  00D3'                    __end_of___ftmul:	
  7903                           
  7904                           	psect	text21
  7905  0000'                    __ptext21:	
  7906 ;; *************** function ___bmul *****************
  7907 ;; Defined at:
  7908 ;;		line 4 in file "D:\mplab\sources\common\Umul8.c"
  7909 ;; Parameters:    Size  Location     Type
  7910 ;;  multiplier      1    wreg     unsigned char 
  7911 ;;  multiplicand    1   16[BANK0 ] unsigned char 
  7912 ;; Auto vars:     Size  Location     Type
  7913 ;;  multiplier      1   19[BANK0 ] unsigned char 
  7914 ;;  product         1   18[BANK0 ] unsigned char 
  7915 ;; Return value:  Size  Location     Type
  7916 ;;                  1    wreg      unsigned char 
  7917 ;; Registers used:
  7918 ;;		wreg, status,2, status,0
  7919 ;; Tracked objects:
  7920 ;;		On entry : 0/0
  7921 ;;		On exit  : 0/0
  7922 ;;		Unchanged: 0/0
  7923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7924 ;;      Params:         0       1       0       0       0
  7925 ;;      Locals:         0       2       0       0       0
  7926 ;;      Temps:          0       1       0       0       0
  7927 ;;      Totals:         0       4       0       0       0
  7928 ;;Total ram usage:        4 bytes
  7929 ;; Hardware stack levels used:    1
  7930 ;; Hardware stack levels required when called:    1
  7931 ;; This function calls:
  7932 ;;		Nothing
  7933 ;; This function is called by:
  7934 ;;		_fround
  7935 ;;		_scale
  7936 ;;		_strtod
  7937 ;; This function uses a non-reentrant model
  7938 ;;
  7939                           
  7940                           
  7941                           ;psect for function ___bmul
  7942  0000'                    ___bmul:	
  7943                           
  7944                           ;incstack = 0
  7945                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7946                           ;___bmul@multiplier stored from wreg
  7947  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  7948  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  7949  0002' 0093'              	movwf	___bmul@multiplier
  7950  0003' 0192'              	clrf	___bmul@product
  7951  0004'                    l2472:	
  7952  0004' 1C13'              	btfss	___bmul@multiplier,0
  7953  0005' 2800'              	goto	l2476
  7954  0006' 0810'              	movf	___bmul@multiplicand,w
  7955  0007' 0091'              	movwf	??___bmul
  7956  0008' 0811'              	movf	??___bmul,w
  7957  0009' 0792'              	addwf	___bmul@product,f
  7958  000A'                    l2476:	
  7959  000A' 1003               	clrc
  7960  000B' 0D90'              	rlf	___bmul@multiplicand,f
  7961  000C' 1003               	clrc
  7962  000D' 0C93'              	rrf	___bmul@multiplier,f
  7963  000E' 0813'              	movf	___bmul@multiplier,w
  7964  000F' 1D03               	btfss	3,2
  7965  0010' 2800'              	goto	l2472
  7966  0011' 0812'              	movf	___bmul@product,w
  7967  0012' 0008               	return
  7968  0013'                    __end_of___bmul:	
  7969                           
  7970                           	psect	text22
  7971  0000'                    __ptext22:	
  7972 ;; *************** function ___awmod *****************
  7973 ;; Defined at:
  7974 ;;		line 6 in file "D:\mplab\sources\common\awmod.c"
  7975 ;; Parameters:    Size  Location     Type
  7976 ;;  divisor         2    0[BANK0 ] int 
  7977 ;;  dividend        2    2[BANK0 ] int 
  7978 ;; Auto vars:     Size  Location     Type
  7979 ;;  sign            1    6[BANK0 ] unsigned char 
  7980 ;;  counter         1    5[BANK0 ] unsigned char 
  7981 ;; Return value:  Size  Location     Type
  7982 ;;                  2    0[BANK0 ] int 
  7983 ;; Registers used:
  7984 ;;		wreg, status,2, status,0
  7985 ;; Tracked objects:
  7986 ;;		On entry : 0/0
  7987 ;;		On exit  : 0/0
  7988 ;;		Unchanged: 0/0
  7989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7990 ;;      Params:         0       4       0       0       0
  7991 ;;      Locals:         0       2       0       0       0
  7992 ;;      Temps:          0       1       0       0       0
  7993 ;;      Totals:         0       7       0       0       0
  7994 ;;Total ram usage:        7 bytes
  7995 ;; Hardware stack levels used:    1
  7996 ;; Hardware stack levels required when called:    1
  7997 ;; This function calls:
  7998 ;;		Nothing
  7999 ;; This function is called by:
  8000 ;;		_fround
  8001 ;;		_scale
  8002 ;; This function uses a non-reentrant model
  8003 ;;
  8004                           
  8005                           
  8006                           ;psect for function ___awmod
  8007  0000'                    ___awmod:	
  8008                           
  8009                           ;incstack = 0
  8010                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8011  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  8012  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  8013  0002' 0186'              	clrf	___awmod@sign
  8014  0003' 1F83'              	btfss	___awmod@dividend+1,7
  8015  0004' 2800'              	goto	l4018
  8016  0005' 0982'              	comf	___awmod@dividend,f
  8017  0006' 0983'              	comf	___awmod@dividend+1,f
  8018  0007' 0A82'              	incf	___awmod@dividend,f
  8019  0008' 1903               	skipnz
  8020  0009' 0A83'              	incf	___awmod@dividend+1,f
  8021  000A' 0186'              	clrf	___awmod@sign
  8022  000B' 0A86'              	incf	___awmod@sign,f
  8023  000C'                    l4018:	
  8024  000C' 1F81'              	btfss	___awmod@divisor+1,7
  8025  000D' 2800'              	goto	l4022
  8026  000E' 0980'              	comf	___awmod@divisor,f
  8027  000F' 0981'              	comf	___awmod@divisor+1,f
  8028  0010' 0A80'              	incf	___awmod@divisor,f
  8029  0011' 1903               	skipnz
  8030  0012' 0A81'              	incf	___awmod@divisor+1,f
  8031  0013'                    l4022:	
  8032  0013' 0800'              	movf	___awmod@divisor,w
  8033  0014' 0401'              	iorwf	___awmod@divisor+1,w
  8034  0015' 1903               	btfsc	3,2
  8035  0016' 2800'              	goto	l4040
  8036  0017' 0185'              	clrf	___awmod@counter
  8037  0018' 0A85'              	incf	___awmod@counter,f
  8038  0019'                    l4030:	
  8039  0019' 1B81'              	btfsc	___awmod@divisor+1,7
  8040  001A' 2800'              	goto	l4032
  8041  001B' 3001               	movlw	1
  8042  001C'                    u6065:	
  8043  001C' 1003               	clrc
  8044  001D' 0D80'              	rlf	___awmod@divisor,f
  8045  001E' 0D81'              	rlf	___awmod@divisor+1,f
  8046  001F' 3EFF               	addlw	-1
  8047  0020' 1D03               	skipz
  8048  0021' 2800'              	goto	u6065
  8049  0022' 3001               	movlw	1
  8050  0023' 0084'              	movwf	??___awmod
  8051  0024' 0804'              	movf	??___awmod,w
  8052  0025' 0785'              	addwf	___awmod@counter,f
  8053  0026' 2800'              	goto	l4030
  8054  0027'                    l4032:	
  8055  0027' 0801'              	movf	___awmod@divisor+1,w
  8056  0028' 0203'              	subwf	___awmod@dividend+1,w
  8057  0029' 1D03               	skipz
  8058  002A' 2800'              	goto	u6085
  8059  002B' 0800'              	movf	___awmod@divisor,w
  8060  002C' 0202'              	subwf	___awmod@dividend,w
  8061  002D'                    u6085:	
  8062  002D' 1C03               	skipc
  8063  002E' 2800'              	goto	l4036
  8064  002F' 0800'              	movf	___awmod@divisor,w
  8065  0030' 0282'              	subwf	___awmod@dividend,f
  8066  0031' 0801'              	movf	___awmod@divisor+1,w
  8067  0032' 1C03               	skipc
  8068  0033' 0383'              	decf	___awmod@dividend+1,f
  8069  0034' 0283'              	subwf	___awmod@dividend+1,f
  8070  0035'                    l4036:	
  8071  0035' 3001               	movlw	1
  8072  0036'                    u6095:	
  8073  0036' 1003               	clrc
  8074  0037' 0C81'              	rrf	___awmod@divisor+1,f
  8075  0038' 0C80'              	rrf	___awmod@divisor,f
  8076  0039' 3EFF               	addlw	-1
  8077  003A' 1D03               	skipz
  8078  003B' 2800'              	goto	u6095
  8079  003C' 3001               	movlw	1
  8080  003D' 0285'              	subwf	___awmod@counter,f
  8081  003E' 1D03               	btfss	3,2
  8082  003F' 2800'              	goto	l4032
  8083  0040'                    l4040:	
  8084  0040' 0806'              	movf	___awmod@sign,w
  8085  0041' 1903               	btfsc	3,2
  8086  0042' 2800'              	goto	l4044
  8087  0043' 0982'              	comf	___awmod@dividend,f
  8088  0044' 0983'              	comf	___awmod@dividend+1,f
  8089  0045' 0A82'              	incf	___awmod@dividend,f
  8090  0046' 1903               	skipnz
  8091  0047' 0A83'              	incf	___awmod@dividend+1,f
  8092  0048'                    l4044:	
  8093  0048' 0803'              	movf	___awmod@dividend+1,w
  8094  0049' 0081'              	movwf	?___awmod+1
  8095  004A' 0802'              	movf	___awmod@dividend,w
  8096  004B' 0080'              	movwf	?___awmod
  8097  004C' 0008               	return
  8098  004D'                    __end_of___awmod:	
  8099                           
  8100                           	psect	text23
  8101  0000'                    __ptext23:	
  8102 ;; *************** function ___awdiv *****************
  8103 ;; Defined at:
  8104 ;;		line 6 in file "D:\mplab\sources\common\awdiv.c"
  8105 ;; Parameters:    Size  Location     Type
  8106 ;;  divisor         2    7[BANK0 ] int 
  8107 ;;  dividend        2    9[BANK0 ] int 
  8108 ;; Auto vars:     Size  Location     Type
  8109 ;;  quotient        2   14[BANK0 ] int 
  8110 ;;  sign            1   13[BANK0 ] unsigned char 
  8111 ;;  counter         1   12[BANK0 ] unsigned char 
  8112 ;; Return value:  Size  Location     Type
  8113 ;;                  2    7[BANK0 ] int 
  8114 ;; Registers used:
  8115 ;;		wreg, status,2, status,0
  8116 ;; Tracked objects:
  8117 ;;		On entry : 0/0
  8118 ;;		On exit  : 0/0
  8119 ;;		Unchanged: 0/0
  8120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8121 ;;      Params:         0       4       0       0       0
  8122 ;;      Locals:         0       4       0       0       0
  8123 ;;      Temps:          0       1       0       0       0
  8124 ;;      Totals:         0       9       0       0       0
  8125 ;;Total ram usage:        9 bytes
  8126 ;; Hardware stack levels used:    1
  8127 ;; Hardware stack levels required when called:    1
  8128 ;; This function calls:
  8129 ;;		Nothing
  8130 ;; This function is called by:
  8131 ;;		_fround
  8132 ;;		_scale
  8133 ;;		_sprintf
  8134 ;; This function uses a non-reentrant model
  8135 ;;
  8136                           
  8137                           
  8138                           ;psect for function ___awdiv
  8139  0000'                    ___awdiv:	
  8140                           
  8141                           ;incstack = 0
  8142                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  8143  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  8144  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  8145  0002' 018D'              	clrf	___awdiv@sign
  8146  0003' 1F88'              	btfss	___awdiv@divisor+1,7
  8147  0004' 2800'              	goto	l3974
  8148  0005' 0987'              	comf	___awdiv@divisor,f
  8149  0006' 0988'              	comf	___awdiv@divisor+1,f
  8150  0007' 0A87'              	incf	___awdiv@divisor,f
  8151  0008' 1903               	skipnz
  8152  0009' 0A88'              	incf	___awdiv@divisor+1,f
  8153  000A' 018D'              	clrf	___awdiv@sign
  8154  000B' 0A8D'              	incf	___awdiv@sign,f
  8155  000C'                    l3974:	
  8156  000C' 1F8A'              	btfss	___awdiv@dividend+1,7
  8157  000D' 2800'              	goto	l3980
  8158  000E' 0989'              	comf	___awdiv@dividend,f
  8159  000F' 098A'              	comf	___awdiv@dividend+1,f
  8160  0010' 0A89'              	incf	___awdiv@dividend,f
  8161  0011' 1903               	skipnz
  8162  0012' 0A8A'              	incf	___awdiv@dividend+1,f
  8163  0013' 3001               	movlw	1
  8164  0014' 008B'              	movwf	??___awdiv
  8165  0015' 080B'              	movf	??___awdiv,w
  8166  0016' 068D'              	xorwf	___awdiv@sign,f
  8167  0017'                    l3980:	
  8168  0017' 018E'              	clrf	___awdiv@quotient
  8169  0018' 018F'              	clrf	___awdiv@quotient+1
  8170  0019' 0807'              	movf	___awdiv@divisor,w
  8171  001A' 0408'              	iorwf	___awdiv@divisor+1,w
  8172  001B' 1903               	btfsc	3,2
  8173  001C' 2800'              	goto	l4002
  8174  001D' 018C'              	clrf	___awdiv@counter
  8175  001E' 0A8C'              	incf	___awdiv@counter,f
  8176  001F'                    l3990:	
  8177  001F' 1B88'              	btfsc	___awdiv@divisor+1,7
  8178  0020' 2800'              	goto	l3992
  8179  0021' 3001               	movlw	1
  8180  0022'                    u5965:	
  8181  0022' 1003               	clrc
  8182  0023' 0D87'              	rlf	___awdiv@divisor,f
  8183  0024' 0D88'              	rlf	___awdiv@divisor+1,f
  8184  0025' 3EFF               	addlw	-1
  8185  0026' 1D03               	skipz
  8186  0027' 2800'              	goto	u5965
  8187  0028' 3001               	movlw	1
  8188  0029' 008B'              	movwf	??___awdiv
  8189  002A' 080B'              	movf	??___awdiv,w
  8190  002B' 078C'              	addwf	___awdiv@counter,f
  8191  002C' 2800'              	goto	l3990
  8192  002D'                    l3992:	
  8193  002D' 3001               	movlw	1
  8194  002E'                    u5985:	
  8195  002E' 1003               	clrc
  8196  002F' 0D8E'              	rlf	___awdiv@quotient,f
  8197  0030' 0D8F'              	rlf	___awdiv@quotient+1,f
  8198  0031' 3EFF               	addlw	-1
  8199  0032' 1D03               	skipz
  8200  0033' 2800'              	goto	u5985
  8201  0034' 0808'              	movf	___awdiv@divisor+1,w
  8202  0035' 020A'              	subwf	___awdiv@dividend+1,w
  8203  0036' 1D03               	skipz
  8204  0037' 2800'              	goto	u5995
  8205  0038' 0807'              	movf	___awdiv@divisor,w
  8206  0039' 0209'              	subwf	___awdiv@dividend,w
  8207  003A'                    u5995:	
  8208  003A' 1C03               	skipc
  8209  003B' 2800'              	goto	l3998
  8210  003C' 0807'              	movf	___awdiv@divisor,w
  8211  003D' 0289'              	subwf	___awdiv@dividend,f
  8212  003E' 0808'              	movf	___awdiv@divisor+1,w
  8213  003F' 1C03               	skipc
  8214  0040' 038A'              	decf	___awdiv@dividend+1,f
  8215  0041' 028A'              	subwf	___awdiv@dividend+1,f
  8216  0042' 140E'              	bsf	___awdiv@quotient,0
  8217  0043'                    l3998:	
  8218  0043' 3001               	movlw	1
  8219  0044'                    u6005:	
  8220  0044' 1003               	clrc
  8221  0045' 0C88'              	rrf	___awdiv@divisor+1,f
  8222  0046' 0C87'              	rrf	___awdiv@divisor,f
  8223  0047' 3EFF               	addlw	-1
  8224  0048' 1D03               	skipz
  8225  0049' 2800'              	goto	u6005
  8226  004A' 3001               	movlw	1
  8227  004B' 028C'              	subwf	___awdiv@counter,f
  8228  004C' 1D03               	btfss	3,2
  8229  004D' 2800'              	goto	l3992
  8230  004E'                    l4002:	
  8231  004E' 080D'              	movf	___awdiv@sign,w
  8232  004F' 1903               	btfsc	3,2
  8233  0050' 2800'              	goto	l4006
  8234  0051' 098E'              	comf	___awdiv@quotient,f
  8235  0052' 098F'              	comf	___awdiv@quotient+1,f
  8236  0053' 0A8E'              	incf	___awdiv@quotient,f
  8237  0054' 1903               	skipnz
  8238  0055' 0A8F'              	incf	___awdiv@quotient+1,f
  8239  0056'                    l4006:	
  8240  0056' 080F'              	movf	___awdiv@quotient+1,w
  8241  0057' 0088'              	movwf	?___awdiv+1
  8242  0058' 080E'              	movf	___awdiv@quotient,w
  8243  0059' 0087'              	movwf	?___awdiv
  8244  005A' 0008               	return
  8245  005B'                    __end_of___awdiv:	
  8246                           
  8247                           	psect	text24
  8248  0000'                    __ptext24:	
  8249 ;; *************** function __tdiv_to_l_ *****************
  8250 ;; Defined at:
  8251 ;;		line 60 in file "D:\mplab\sources\common\ftdivl.c"
  8252 ;; Parameters:    Size  Location     Type
  8253 ;;  f1              3    0[BANK0 ] float 
  8254 ;;  f2              3    3[BANK0 ] float 
  8255 ;; Auto vars:     Size  Location     Type
  8256 ;;  quot            4   10[BANK0 ] unsigned long 
  8257 ;;  exp1            1   15[BANK0 ] unsigned char 
  8258 ;;  cntr            1   14[BANK0 ] unsigned char 
  8259 ;; Return value:  Size  Location     Type
  8260 ;;                  4    0[BANK0 ] unsigned long 
  8261 ;; Registers used:
  8262 ;;		wreg, status,2, status,0
  8263 ;; Tracked objects:
  8264 ;;		On entry : 0/0
  8265 ;;		On exit  : 0/0
  8266 ;;		Unchanged: 0/0
  8267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8268 ;;      Params:         0       6       0       0       0
  8269 ;;      Locals:         0       6       0       0       0
  8270 ;;      Temps:          0       4       0       0       0
  8271 ;;      Totals:         0      16       0       0       0
  8272 ;;Total ram usage:       16 bytes
  8273 ;; Hardware stack levels used:    1
  8274 ;; Hardware stack levels required when called:    1
  8275 ;; This function calls:
  8276 ;;		Nothing
  8277 ;; This function is called by:
  8278 ;;		_sprintf
  8279 ;; This function uses a non-reentrant model
  8280 ;;
  8281                           
  8282                           
  8283                           ;psect for function __tdiv_to_l_
  8284  0000'                    __tdiv_to_l_:	
  8285                           
  8286                           ;incstack = 0
  8287                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  8288  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  8289  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  8290  0002' 0800'              	movf	__tdiv_to_l_@f1,w
  8291  0003' 0086'              	movwf	??__tdiv_to_l_
  8292  0004' 0801'              	movf	__tdiv_to_l_@f1+1,w
  8293  0005' 0087'              	movwf	??__tdiv_to_l_+1
  8294  0006' 0802'              	movf	__tdiv_to_l_@f1+2,w
  8295  0007' 0088'              	movwf	??__tdiv_to_l_+2
  8296  0008' 1003               	clrc
  8297  0009' 0D07'              	rlf	??__tdiv_to_l_+1,w
  8298  000A' 0D08'              	rlf	??__tdiv_to_l_+2,w
  8299  000B' 0089'              	movwf	??__tdiv_to_l_+3
  8300  000C' 0809'              	movf	??__tdiv_to_l_+3,w
  8301  000D' 008F'              	movwf	__tdiv_to_l_@exp1
  8302  000E' 080F'              	movf	__tdiv_to_l_@exp1,w
  8303  000F' 1D03               	btfss	3,2
  8304  0010' 2800'              	goto	l2868
  8305  0011' 3000               	movlw	0
  8306  0012' 0083'              	movwf	?__tdiv_to_l_+3
  8307  0013' 3000               	movlw	0
  8308  0014' 0082'              	movwf	?__tdiv_to_l_+2
  8309  0015' 3000               	movlw	0
  8310  0016' 0081'              	movwf	?__tdiv_to_l_+1
  8311  0017' 3000               	movlw	0
  8312  0018' 0080'              	movwf	?__tdiv_to_l_
  8313  0019' 0008               	return
  8314  001A'                    l2868:	
  8315  001A' 0803'              	movf	__tdiv_to_l_@f2,w
  8316  001B' 0086'              	movwf	??__tdiv_to_l_
  8317  001C' 0804'              	movf	__tdiv_to_l_@f2+1,w
  8318  001D' 0087'              	movwf	??__tdiv_to_l_+1
  8319  001E' 0805'              	movf	__tdiv_to_l_@f2+2,w
  8320  001F' 0088'              	movwf	??__tdiv_to_l_+2
  8321  0020' 1003               	clrc
  8322  0021' 0D07'              	rlf	??__tdiv_to_l_+1,w
  8323  0022' 0D08'              	rlf	??__tdiv_to_l_+2,w
  8324  0023' 0089'              	movwf	??__tdiv_to_l_+3
  8325  0024' 0809'              	movf	??__tdiv_to_l_+3,w
  8326  0025' 008E'              	movwf	__tdiv_to_l_@cntr
  8327  0026' 080E'              	movf	__tdiv_to_l_@cntr,w
  8328  0027' 1D03               	btfss	3,2
  8329  0028' 2800'              	goto	l711
  8330  0029' 3000               	movlw	0
  8331  002A' 0083'              	movwf	?__tdiv_to_l_+3
  8332  002B' 3000               	movlw	0
  8333  002C' 0082'              	movwf	?__tdiv_to_l_+2
  8334  002D' 3000               	movlw	0
  8335  002E' 0081'              	movwf	?__tdiv_to_l_+1
  8336  002F' 3000               	movlw	0
  8337  0030' 0080'              	movwf	?__tdiv_to_l_
  8338  0031' 0008               	return
  8339  0032'                    l711:	
  8340  0032' 1781'              	bsf	__tdiv_to_l_@f1+1,7
  8341  0033' 30FF               	movlw	255
  8342  0034' 0580'              	andwf	__tdiv_to_l_@f1,f
  8343  0035' 30FF               	movlw	255
  8344  0036' 0581'              	andwf	__tdiv_to_l_@f1+1,f
  8345  0037' 3000               	movlw	0
  8346  0038' 0582'              	andwf	__tdiv_to_l_@f1+2,f
  8347  0039' 1784'              	bsf	__tdiv_to_l_@f2+1,7
  8348  003A' 30FF               	movlw	255
  8349  003B' 0583'              	andwf	__tdiv_to_l_@f2,f
  8350  003C' 30FF               	movlw	255
  8351  003D' 0584'              	andwf	__tdiv_to_l_@f2+1,f
  8352  003E' 3000               	movlw	0
  8353  003F' 0585'              	andwf	__tdiv_to_l_@f2+2,f
  8354  0040' 3000               	movlw	0
  8355  0041' 008D'              	movwf	__tdiv_to_l_@quot+3
  8356  0042' 3000               	movlw	0
  8357  0043' 008C'              	movwf	__tdiv_to_l_@quot+2
  8358  0044' 3000               	movlw	0
  8359  0045' 008B'              	movwf	__tdiv_to_l_@quot+1
  8360  0046' 3000               	movlw	0
  8361  0047' 008A'              	movwf	__tdiv_to_l_@quot
  8362  0048' 307F               	movlw	127
  8363  0049' 028F'              	subwf	__tdiv_to_l_@exp1,f
  8364  004A' 3098               	movlw	152
  8365  004B' 070E'              	addwf	__tdiv_to_l_@cntr,w
  8366  004C' 0086'              	movwf	??__tdiv_to_l_
  8367  004D' 0806'              	movf	??__tdiv_to_l_,w
  8368  004E' 028F'              	subwf	__tdiv_to_l_@exp1,f
  8369  004F' 3018               	movlw	24
  8370  0050' 0086'              	movwf	??__tdiv_to_l_
  8371  0051' 0806'              	movf	??__tdiv_to_l_,w
  8372  0052' 008E'              	movwf	__tdiv_to_l_@cntr
  8373  0053'                    l2882:	
  8374  0053' 3001               	movlw	1
  8375  0054' 0086'              	movwf	??__tdiv_to_l_
  8376  0055'                    u3935:	
  8377  0055' 1003               	clrc
  8378  0056' 0D8A'              	rlf	__tdiv_to_l_@quot,f
  8379  0057' 0D8B'              	rlf	__tdiv_to_l_@quot+1,f
  8380  0058' 0D8C'              	rlf	__tdiv_to_l_@quot+2,f
  8381  0059' 0D8D'              	rlf	__tdiv_to_l_@quot+3,f
  8382  005A' 0B86'              	decfsz	??__tdiv_to_l_,f
  8383  005B' 2800'              	goto	u3935
  8384  005C' 0805'              	movf	__tdiv_to_l_@f2+2,w
  8385  005D' 0202'              	subwf	__tdiv_to_l_@f1+2,w
  8386  005E' 1D03               	skipz
  8387  005F' 2800'              	goto	u3945
  8388  0060' 0804'              	movf	__tdiv_to_l_@f2+1,w
  8389  0061' 0201'              	subwf	__tdiv_to_l_@f1+1,w
  8390  0062' 1D03               	skipz
  8391  0063' 2800'              	goto	u3945
  8392  0064' 0803'              	movf	__tdiv_to_l_@f2,w
  8393  0065' 0200'              	subwf	__tdiv_to_l_@f1,w
  8394  0066'                    u3945:	
  8395  0066' 1C03               	skipc
  8396  0067' 2800'              	goto	l2890
  8397  0068' 0803'              	movf	__tdiv_to_l_@f2,w
  8398  0069' 0280'              	subwf	__tdiv_to_l_@f1,f
  8399  006A' 0804'              	movf	__tdiv_to_l_@f2+1,w
  8400  006B' 1C03               	skipc
  8401  006C' 0F04'              	incfsz	__tdiv_to_l_@f2+1,w
  8402  006D' 0281'              	subwf	__tdiv_to_l_@f1+1,f
  8403  006E' 0805'              	movf	__tdiv_to_l_@f2+2,w
  8404  006F' 1C03               	skipc
  8405  0070' 0A05'              	incf	__tdiv_to_l_@f2+2,w
  8406  0071' 0282'              	subwf	__tdiv_to_l_@f1+2,f
  8407  0072' 140A'              	bsf	__tdiv_to_l_@quot,0
  8408  0073'                    l2890:	
  8409  0073' 3001               	movlw	1
  8410  0074'                    u3955:	
  8411  0074' 1003               	clrc
  8412  0075' 0D80'              	rlf	__tdiv_to_l_@f1,f
  8413  0076' 0D81'              	rlf	__tdiv_to_l_@f1+1,f
  8414  0077' 0D82'              	rlf	__tdiv_to_l_@f1+2,f
  8415  0078' 3EFF               	addlw	-1
  8416  0079' 1D03               	skipz
  8417  007A' 2800'              	goto	u3955
  8418  007B' 3001               	movlw	1
  8419  007C' 028E'              	subwf	__tdiv_to_l_@cntr,f
  8420  007D' 1D03               	btfss	3,2
  8421  007E' 2800'              	goto	l2882
  8422  007F' 1F8F'              	btfss	__tdiv_to_l_@exp1,7
  8423  0080' 2800'              	goto	l2902
  8424  0081' 080F'              	movf	__tdiv_to_l_@exp1,w
  8425  0082' 3A80               	xorlw	128
  8426  0083' 3E97               	addlw	151
  8427  0084' 1803               	skipnc
  8428  0085' 2800'              	goto	l2900
  8429  0086' 3000               	movlw	0
  8430  0087' 0083'              	movwf	?__tdiv_to_l_+3
  8431  0088' 3000               	movlw	0
  8432  0089' 0082'              	movwf	?__tdiv_to_l_+2
  8433  008A' 3000               	movlw	0
  8434  008B' 0081'              	movwf	?__tdiv_to_l_+1
  8435  008C' 3000               	movlw	0
  8436  008D' 0080'              	movwf	?__tdiv_to_l_
  8437  008E' 0008               	return
  8438  008F'                    l2900:	
  8439  008F' 3001               	movlw	1
  8440  0090'                    u3995:	
  8441  0090' 1003               	clrc
  8442  0091' 0C8D'              	rrf	__tdiv_to_l_@quot+3,f
  8443  0092' 0C8C'              	rrf	__tdiv_to_l_@quot+2,f
  8444  0093' 0C8B'              	rrf	__tdiv_to_l_@quot+1,f
  8445  0094' 0C8A'              	rrf	__tdiv_to_l_@quot,f
  8446  0095' 3EFF               	addlw	-1
  8447  0096' 1D03               	skipz
  8448  0097' 2800'              	goto	u3995
  8449  0098' 3001               	movlw	1
  8450  0099' 0086'              	movwf	??__tdiv_to_l_
  8451  009A' 0806'              	movf	??__tdiv_to_l_,w
  8452  009B' 078F'              	addwf	__tdiv_to_l_@exp1,f
  8453  009C' 1903               	btfsc	3,2
  8454  009D' 2800'              	goto	l2910
  8455  009E' 2800'              	goto	l2900
  8456  009F'                    l2902:	
  8457  009F' 3018               	movlw	24
  8458  00A0' 020F'              	subwf	__tdiv_to_l_@exp1,w
  8459  00A1' 1C03               	skipc
  8460  00A2' 2800'              	goto	l721
  8461  00A3' 3000               	movlw	0
  8462  00A4' 0083'              	movwf	?__tdiv_to_l_+3
  8463  00A5' 3000               	movlw	0
  8464  00A6' 0082'              	movwf	?__tdiv_to_l_+2
  8465  00A7' 3000               	movlw	0
  8466  00A8' 0081'              	movwf	?__tdiv_to_l_+1
  8467  00A9' 3000               	movlw	0
  8468  00AA' 0080'              	movwf	?__tdiv_to_l_
  8469  00AB' 0008               	return
  8470  00AC'                    l2908:	
  8471  00AC' 3001               	movlw	1
  8472  00AD' 0086'              	movwf	??__tdiv_to_l_
  8473  00AE'                    u4025:	
  8474  00AE' 1003               	clrc
  8475  00AF' 0D8A'              	rlf	__tdiv_to_l_@quot,f
  8476  00B0' 0D8B'              	rlf	__tdiv_to_l_@quot+1,f
  8477  00B1' 0D8C'              	rlf	__tdiv_to_l_@quot+2,f
  8478  00B2' 0D8D'              	rlf	__tdiv_to_l_@quot+3,f
  8479  00B3' 0B86'              	decfsz	??__tdiv_to_l_,f
  8480  00B4' 2800'              	goto	u4025
  8481  00B5' 3001               	movlw	1
  8482  00B6' 028F'              	subwf	__tdiv_to_l_@exp1,f
  8483  00B7'                    l721:	
  8484  00B7' 080F'              	movf	__tdiv_to_l_@exp1,w
  8485  00B8' 1D03               	btfss	3,2
  8486  00B9' 2800'              	goto	l2908
  8487  00BA'                    l2910:	
  8488  00BA' 080D'              	movf	__tdiv_to_l_@quot+3,w
  8489  00BB' 0083'              	movwf	?__tdiv_to_l_+3
  8490  00BC' 080C'              	movf	__tdiv_to_l_@quot+2,w
  8491  00BD' 0082'              	movwf	?__tdiv_to_l_+2
  8492  00BE' 080B'              	movf	__tdiv_to_l_@quot+1,w
  8493  00BF' 0081'              	movwf	?__tdiv_to_l_+1
  8494  00C0' 080A'              	movf	__tdiv_to_l_@quot,w
  8495  00C1' 0080'              	movwf	?__tdiv_to_l_
  8496  00C2' 0008               	return
  8497  00C3'                    __end_of__tdiv_to_l_:	
  8498                           
  8499                           	psect	text25
  8500  0000'                    __ptext25:	
  8501 ;; *************** function __div_to_l_ *****************
  8502 ;; Defined at:
  8503 ;;		line 60 in file "D:\mplab\sources\common\fldivl.c"
  8504 ;; Parameters:    Size  Location     Type
  8505 ;;  f1              3    0[BANK0 ] unsigned long 
  8506 ;;  f2              3    3[BANK0 ] unsigned long 
  8507 ;; Auto vars:     Size  Location     Type
  8508 ;;  quot            4   14[BANK0 ] unsigned long 
  8509 ;;  exp1            1   19[BANK0 ] unsigned char 
  8510 ;;  cntr            1   18[BANK0 ] unsigned char 
  8511 ;; Return value:  Size  Location     Type
  8512 ;;                  4    0[BANK0 ] unsigned long 
  8513 ;; Registers used:
  8514 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8515 ;; Tracked objects:
  8516 ;;		On entry : 0/0
  8517 ;;		On exit  : 0/0
  8518 ;;		Unchanged: 0/0
  8519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8520 ;;      Params:         0       6       0       0       0
  8521 ;;      Locals:         0       6       0       0       0
  8522 ;;      Temps:          0       8       0       0       0
  8523 ;;      Totals:         0      20       0       0       0
  8524 ;;Total ram usage:       20 bytes
  8525 ;; Hardware stack levels used:    1
  8526 ;; Hardware stack levels required when called:    1
  8527 ;; This function calls:
  8528 ;;		Nothing
  8529 ;; This function is called by:
  8530 ;;		_sprintf
  8531 ;; This function uses a non-reentrant model
  8532 ;;
  8533                           
  8534                           
  8535                           ;psect for function __div_to_l_
  8536  0000'                    __div_to_l_:	
  8537                           
  8538                           ;incstack = 0
  8539                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0]
  8540  0000' 3000'              	movlw	low (__div_to_l_@f1| 0)
  8541  0001' 0084               	movwf	4
  8542  0002' 1383               	bcf	3,7	;select IRP bank0
  8543  0003' 0800               	movf	0,w
  8544  0004' 1283               	bcf	3,5	;RP0=0, select bank0
  8545  0005' 1303               	bcf	3,6	;RP1=0, select bank0
  8546  0006' 0086'              	movwf	??__div_to_l_
  8547  0007' 0A84               	incf	4,f
  8548  0008' 0800               	movf	0,w
  8549  0009' 0087'              	movwf	??__div_to_l_+1
  8550  000A' 0A84               	incf	4,f
  8551  000B' 0800               	movf	0,w
  8552  000C' 0088'              	movwf	??__div_to_l_+2
  8553  000D' 0A84               	incf	4,f
  8554  000E' 0800               	movf	0,w
  8555  000F' 0089'              	movwf	??__div_to_l_+3
  8556  0010' 1003               	clrc
  8557  0011' 0D08'              	rlf	??__div_to_l_+2,w
  8558  0012' 0D09'              	rlf	??__div_to_l_+3,w
  8559  0013' 008A'              	movwf	??__div_to_l_+4
  8560  0014' 080A'              	movf	??__div_to_l_+4,w
  8561  0015' 0093'              	movwf	__div_to_l_@exp1
  8562  0016' 0813'              	movf	__div_to_l_@exp1,w
  8563  0017' 1D03               	btfss	3,2
  8564  0018' 2800'              	goto	l2920
  8565  0019' 3000               	movlw	0
  8566  001A' 0083'              	movwf	?__div_to_l_+3
  8567  001B' 3000               	movlw	0
  8568  001C' 0082'              	movwf	?__div_to_l_+2
  8569  001D' 3000               	movlw	0
  8570  001E' 0081'              	movwf	?__div_to_l_+1
  8571  001F' 3000               	movlw	0
  8572  0020' 0080'              	movwf	?__div_to_l_
  8573  0021' 0008               	return
  8574  0022'                    l2920:	
  8575  0022' 3000'              	movlw	low (__div_to_l_@f2| 0)
  8576  0023' 0084               	movwf	4
  8577  0024' 0800               	movf	0,w
  8578  0025' 0086'              	movwf	??__div_to_l_
  8579  0026' 0A84               	incf	4,f
  8580  0027' 0800               	movf	0,w
  8581  0028' 0087'              	movwf	??__div_to_l_+1
  8582  0029' 0A84               	incf	4,f
  8583  002A' 0800               	movf	0,w
  8584  002B' 0088'              	movwf	??__div_to_l_+2
  8585  002C' 0A84               	incf	4,f
  8586  002D' 0800               	movf	0,w
  8587  002E' 0089'              	movwf	??__div_to_l_+3
  8588  002F' 1003               	clrc
  8589  0030' 0D08'              	rlf	??__div_to_l_+2,w
  8590  0031' 0D09'              	rlf	??__div_to_l_+3,w
  8591  0032' 008A'              	movwf	??__div_to_l_+4
  8592  0033' 080A'              	movf	??__div_to_l_+4,w
  8593  0034' 0092'              	movwf	__div_to_l_@cntr
  8594  0035' 0812'              	movf	__div_to_l_@cntr,w
  8595  0036' 1D03               	btfss	3,2
  8596  0037' 2800'              	goto	l2926
  8597  0038' 3000               	movlw	0
  8598  0039' 0083'              	movwf	?__div_to_l_+3
  8599  003A' 3000               	movlw	0
  8600  003B' 0082'              	movwf	?__div_to_l_+2
  8601  003C' 3000               	movlw	0
  8602  003D' 0081'              	movwf	?__div_to_l_+1
  8603  003E' 3000               	movlw	0
  8604  003F' 0080'              	movwf	?__div_to_l_
  8605  0040' 0008               	return
  8606  0041'                    l2926:	
  8607  0041' 3000'              	movlw	low (__div_to_l_@f1| 0)
  8608  0042' 0084               	movwf	4
  8609  0043' 3000               	movlw	0
  8610  0044' 0480               	iorwf	0,f
  8611  0045' 0A84               	incf	4,f
  8612  0046' 3000               	movlw	0
  8613  0047' 0480               	iorwf	0,f
  8614  0048' 0A84               	incf	4,f
  8615  0049' 3080               	movlw	128
  8616  004A' 0480               	iorwf	0,f
  8617  004B' 0A84               	incf	4,f
  8618  004C' 3000               	movlw	0
  8619  004D' 0480               	iorwf	0,f
  8620  004E' 3000'              	movlw	low (__div_to_l_@f1| 0)
  8621  004F' 0084               	movwf	4
  8622  0050' 30FF               	movlw	255
  8623  0051' 0580               	andwf	0,f
  8624  0052' 0A84               	incf	4,f
  8625  0053' 30FF               	movlw	255
  8626  0054' 0580               	andwf	0,f
  8627  0055' 0A84               	incf	4,f
  8628  0056' 30FF               	movlw	255
  8629  0057' 0580               	andwf	0,f
  8630  0058' 0A84               	incf	4,f
  8631  0059' 3000               	movlw	0
  8632  005A' 0580               	andwf	0,f
  8633  005B' 3000'              	movlw	low (__div_to_l_@f2| 0)
  8634  005C' 0084               	movwf	4
  8635  005D' 3000               	movlw	0
  8636  005E' 0480               	iorwf	0,f
  8637  005F' 0A84               	incf	4,f
  8638  0060' 3000               	movlw	0
  8639  0061' 0480               	iorwf	0,f
  8640  0062' 0A84               	incf	4,f
  8641  0063' 3080               	movlw	128
  8642  0064' 0480               	iorwf	0,f
  8643  0065' 0A84               	incf	4,f
  8644  0066' 3000               	movlw	0
  8645  0067' 0480               	iorwf	0,f
  8646  0068' 3000'              	movlw	low (__div_to_l_@f2| 0)
  8647  0069' 0084               	movwf	4
  8648  006A' 30FF               	movlw	255
  8649  006B' 0580               	andwf	0,f
  8650  006C' 0A84               	incf	4,f
  8651  006D' 30FF               	movlw	255
  8652  006E' 0580               	andwf	0,f
  8653  006F' 0A84               	incf	4,f
  8654  0070' 30FF               	movlw	255
  8655  0071' 0580               	andwf	0,f
  8656  0072' 0A84               	incf	4,f
  8657  0073' 3000               	movlw	0
  8658  0074' 0580               	andwf	0,f
  8659  0075' 3000               	movlw	0
  8660  0076' 0091'              	movwf	__div_to_l_@quot+3
  8661  0077' 3000               	movlw	0
  8662  0078' 0090'              	movwf	__div_to_l_@quot+2
  8663  0079' 3000               	movlw	0
  8664  007A' 008F'              	movwf	__div_to_l_@quot+1
  8665  007B' 3000               	movlw	0
  8666  007C' 008E'              	movwf	__div_to_l_@quot
  8667  007D' 307F               	movlw	127
  8668  007E' 0293'              	subwf	__div_to_l_@exp1,f
  8669  007F' 30A0               	movlw	160
  8670  0080' 0712'              	addwf	__div_to_l_@cntr,w
  8671  0081' 0086'              	movwf	??__div_to_l_
  8672  0082' 0806'              	movf	??__div_to_l_,w
  8673  0083' 0293'              	subwf	__div_to_l_@exp1,f
  8674  0084' 3020               	movlw	32
  8675  0085' 0086'              	movwf	??__div_to_l_
  8676  0086' 0806'              	movf	??__div_to_l_,w
  8677  0087' 0092'              	movwf	__div_to_l_@cntr
  8678  0088'                    l2936:	
  8679  0088' 3001               	movlw	1
  8680  0089' 0086'              	movwf	??__div_to_l_
  8681  008A'                    u4065:	
  8682  008A' 1003               	clrc
  8683  008B' 0D8E'              	rlf	__div_to_l_@quot,f
  8684  008C' 0D8F'              	rlf	__div_to_l_@quot+1,f
  8685  008D' 0D90'              	rlf	__div_to_l_@quot+2,f
  8686  008E' 0D91'              	rlf	__div_to_l_@quot+3,f
  8687  008F' 0B86'              	decfsz	??__div_to_l_,f
  8688  0090' 2800'              	goto	u4065
  8689  0091' 3000'              	movlw	low (__div_to_l_@f2| 0)
  8690  0092' 0084               	movwf	4
  8691  0093' 0800               	movf	0,w
  8692  0094' 0086'              	movwf	??__div_to_l_
  8693  0095' 0A84               	incf	4,f
  8694  0096' 0800               	movf	0,w
  8695  0097' 0087'              	movwf	??__div_to_l_+1
  8696  0098' 0A84               	incf	4,f
  8697  0099' 0800               	movf	0,w
  8698  009A' 0088'              	movwf	??__div_to_l_+2
  8699  009B' 0A84               	incf	4,f
  8700  009C' 0800               	movf	0,w
  8701  009D' 0089'              	movwf	??__div_to_l_+3
  8702  009E' 3000'              	movlw	low (__div_to_l_@f1| 0)
  8703  009F' 0084               	movwf	4
  8704  00A0' 0800               	movf	0,w
  8705  00A1' 008A'              	movwf	??__div_to_l_+4
  8706  00A2' 0A84               	incf	4,f
  8707  00A3' 0800               	movf	0,w
  8708  00A4' 008B'              	movwf	??__div_to_l_+5
  8709  00A5' 0A84               	incf	4,f
  8710  00A6' 0800               	movf	0,w
  8711  00A7' 008C'              	movwf	??__div_to_l_+6
  8712  00A8' 0A84               	incf	4,f
  8713  00A9' 0800               	movf	0,w
  8714  00AA' 008D'              	movwf	??__div_to_l_+7
  8715  00AB' 0809'              	movf	??__div_to_l_+3,w
  8716  00AC' 020D'              	subwf	??__div_to_l_+7,w
  8717  00AD' 1D03               	skipz
  8718  00AE' 2800'              	goto	u4075
  8719  00AF' 0808'              	movf	??__div_to_l_+2,w
  8720  00B0' 020C'              	subwf	??__div_to_l_+6,w
  8721  00B1' 1D03               	skipz
  8722  00B2' 2800'              	goto	u4075
  8723  00B3' 0807'              	movf	??__div_to_l_+1,w
  8724  00B4' 020B'              	subwf	??__div_to_l_+5,w
  8725  00B5' 1D03               	skipz
  8726  00B6' 2800'              	goto	u4075
  8727  00B7' 0806'              	movf	??__div_to_l_,w
  8728  00B8' 020A'              	subwf	??__div_to_l_+4,w
  8729  00B9'                    u4075:	
  8730  00B9' 1C03               	skipc
  8731  00BA' 2800'              	goto	l634
  8732  00BB' 3000'              	movlw	low (__div_to_l_@f2| 0)
  8733  00BC' 0084               	movwf	4
  8734  00BD' 0800               	movf	0,w
  8735  00BE' 0086'              	movwf	??__div_to_l_
  8736  00BF' 0A84               	incf	4,f
  8737  00C0' 0800               	movf	0,w
  8738  00C1' 0087'              	movwf	??__div_to_l_+1
  8739  00C2' 0A84               	incf	4,f
  8740  00C3' 0800               	movf	0,w
  8741  00C4' 0088'              	movwf	??__div_to_l_+2
  8742  00C5' 0A84               	incf	4,f
  8743  00C6' 0800               	movf	0,w
  8744  00C7' 0089'              	movwf	??__div_to_l_+3
  8745  00C8' 3000'              	movlw	low (__div_to_l_@f1| 0)
  8746  00C9' 0084               	movwf	4
  8747  00CA' 0806'              	movf	??__div_to_l_,w
  8748  00CB' 0280               	subwf	0,f
  8749  00CC' 0A84               	incf	4,f
  8750  00CD' 0807'              	movf	??__div_to_l_+1,w
  8751  00CE' 1C03               	skipc
  8752  00CF' 0F07'              	incfsz	??__div_to_l_+1,w
  8753  00D0' 0280               	subwf	0,f
  8754  00D1' 0A84               	incf	4,f
  8755  00D2' 0808'              	movf	??__div_to_l_+2,w
  8756  00D3' 1C03               	skipc
  8757  00D4' 0F08'              	incfsz	??__div_to_l_+2,w
  8758  00D5' 0280               	subwf	0,f
  8759  00D6' 0A84               	incf	4,f
  8760  00D7' 0809'              	movf	??__div_to_l_+3,w
  8761  00D8' 1C03               	skipc
  8762  00D9' 0A09'              	incf	??__div_to_l_+3,w
  8763  00DA' 0280               	subwf	0,f
  8764  00DB' 3003               	movlw	3
  8765  00DC' 0284               	subwf	4,f
  8766  00DD' 140E'              	bsf	__div_to_l_@quot,0
  8767  00DE'                    l634:	
  8768  00DE' 3000'              	movlw	low (__div_to_l_@f1| 0)
  8769  00DF' 0084               	movwf	4
  8770  00E0' 1003               	clrc
  8771  00E1' 0D80               	rlf	0,f
  8772  00E2' 0A84               	incf	4,f
  8773  00E3' 0D80               	rlf	0,f
  8774  00E4' 0A84               	incf	4,f
  8775  00E5' 0D80               	rlf	0,f
  8776  00E6' 0A84               	incf	4,f
  8777  00E7' 0D80               	rlf	0,f
  8778  00E8' 0384               	decf	4,f
  8779  00E9' 0384               	decf	4,f
  8780  00EA' 0384               	decf	4,f
  8781  00EB' 3001               	movlw	1
  8782  00EC' 0292'              	subwf	__div_to_l_@cntr,f
  8783  00ED' 1D03               	btfss	3,2
  8784  00EE' 2800'              	goto	l2936
  8785  00EF' 1F93'              	btfss	__div_to_l_@exp1,7
  8786  00F0' 2800'              	goto	l2954
  8787  00F1' 0813'              	movf	__div_to_l_@exp1,w
  8788  00F2' 3A80               	xorlw	128
  8789  00F3' 3E9F               	addlw	159
  8790  00F4' 1803               	skipnc
  8791  00F5' 2800'              	goto	l2952
  8792  00F6' 3000               	movlw	0
  8793  00F7' 0083'              	movwf	?__div_to_l_+3
  8794  00F8' 3000               	movlw	0
  8795  00F9' 0082'              	movwf	?__div_to_l_+2
  8796  00FA' 3000               	movlw	0
  8797  00FB' 0081'              	movwf	?__div_to_l_+1
  8798  00FC' 3000               	movlw	0
  8799  00FD' 0080'              	movwf	?__div_to_l_
  8800  00FE' 0008               	return
  8801  00FF'                    l2952:	
  8802  00FF' 3001               	movlw	1
  8803  0100'                    u4115:	
  8804  0100' 1003               	clrc
  8805  0101' 0C91'              	rrf	__div_to_l_@quot+3,f
  8806  0102' 0C90'              	rrf	__div_to_l_@quot+2,f
  8807  0103' 0C8F'              	rrf	__div_to_l_@quot+1,f
  8808  0104' 0C8E'              	rrf	__div_to_l_@quot,f
  8809  0105' 3EFF               	addlw	-1
  8810  0106' 1D03               	skipz
  8811  0107' 2800'              	goto	u4115
  8812  0108' 3001               	movlw	1
  8813  0109' 0086'              	movwf	??__div_to_l_
  8814  010A' 0806'              	movf	??__div_to_l_,w
  8815  010B' 0793'              	addwf	__div_to_l_@exp1,f
  8816  010C' 1903               	btfsc	3,2
  8817  010D' 2800'              	goto	l2962
  8818  010E' 2800'              	goto	l2952
  8819  010F'                    l2954:	
  8820  010F' 3020               	movlw	32
  8821  0110' 0213'              	subwf	__div_to_l_@exp1,w
  8822  0111' 1C03               	skipc
  8823  0112' 2800'              	goto	l642
  8824  0113' 3000               	movlw	0
  8825  0114' 0083'              	movwf	?__div_to_l_+3
  8826  0115' 3000               	movlw	0
  8827  0116' 0082'              	movwf	?__div_to_l_+2
  8828  0117' 3000               	movlw	0
  8829  0118' 0081'              	movwf	?__div_to_l_+1
  8830  0119' 3000               	movlw	0
  8831  011A' 0080'              	movwf	?__div_to_l_
  8832  011B' 0008               	return
  8833  011C'                    l2960:	
  8834  011C' 3001               	movlw	1
  8835  011D' 0086'              	movwf	??__div_to_l_
  8836  011E'                    u4145:	
  8837  011E' 1003               	clrc
  8838  011F' 0D8E'              	rlf	__div_to_l_@quot,f
  8839  0120' 0D8F'              	rlf	__div_to_l_@quot+1,f
  8840  0121' 0D90'              	rlf	__div_to_l_@quot+2,f
  8841  0122' 0D91'              	rlf	__div_to_l_@quot+3,f
  8842  0123' 0B86'              	decfsz	??__div_to_l_,f
  8843  0124' 2800'              	goto	u4145
  8844  0125' 3001               	movlw	1
  8845  0126' 0293'              	subwf	__div_to_l_@exp1,f
  8846  0127'                    l642:	
  8847  0127' 0813'              	movf	__div_to_l_@exp1,w
  8848  0128' 1D03               	btfss	3,2
  8849  0129' 2800'              	goto	l2960
  8850  012A'                    l2962:	
  8851  012A' 0811'              	movf	__div_to_l_@quot+3,w
  8852  012B' 0083'              	movwf	?__div_to_l_+3
  8853  012C' 0810'              	movf	__div_to_l_@quot+2,w
  8854  012D' 0082'              	movwf	?__div_to_l_+2
  8855  012E' 080F'              	movf	__div_to_l_@quot+1,w
  8856  012F' 0081'              	movwf	?__div_to_l_+1
  8857  0130' 080E'              	movf	__div_to_l_@quot,w
  8858  0131' 0080'              	movwf	?__div_to_l_
  8859  0132' 0008               	return
  8860  0133'                    __end_of__div_to_l_:	
  8861                           
  8862                           	psect	text26
  8863  0000'                    __ptext26:	
  8864 ;; *************** function ___wmul *****************
  8865 ;; Defined at:
  8866 ;;		line 15 in file "D:\mplab\sources\common\Umul16.c"
  8867 ;; Parameters:    Size  Location     Type
  8868 ;;  multiplier      2    0[BANK0 ] unsigned int 
  8869 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  8870 ;; Auto vars:     Size  Location     Type
  8871 ;;  product         2    4[BANK0 ] unsigned int 
  8872 ;; Return value:  Size  Location     Type
  8873 ;;                  2    0[BANK0 ] unsigned int 
  8874 ;; Registers used:
  8875 ;;		wreg, status,2, status,0
  8876 ;; Tracked objects:
  8877 ;;		On entry : 0/0
  8878 ;;		On exit  : 0/0
  8879 ;;		Unchanged: 0/0
  8880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8881 ;;      Params:         0       4       0       0       0
  8882 ;;      Locals:         0       2       0       0       0
  8883 ;;      Temps:          0       0       0       0       0
  8884 ;;      Totals:         0       6       0       0       0
  8885 ;;Total ram usage:        6 bytes
  8886 ;; Hardware stack levels used:    1
  8887 ;; Hardware stack levels required when called:    1
  8888 ;; This function calls:
  8889 ;;		Nothing
  8890 ;; This function is called by:
  8891 ;;		_sprintf
  8892 ;; This function uses a non-reentrant model
  8893 ;;
  8894                           
  8895                           
  8896                           ;psect for function ___wmul
  8897  0000'                    ___wmul:	
  8898                           
  8899                           ;incstack = 0
  8900                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8901  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  8902  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  8903  0002' 0184'              	clrf	___wmul@product
  8904  0003' 0185'              	clrf	___wmul@product+1
  8905  0004'                    l4296:	
  8906  0004' 1C00'              	btfss	___wmul@multiplier,0
  8907  0005' 2800'              	goto	l373
  8908  0006' 0802'              	movf	___wmul@multiplicand,w
  8909  0007' 0784'              	addwf	___wmul@product,f
  8910  0008' 1803               	skipnc
  8911  0009' 0A85'              	incf	___wmul@product+1,f
  8912  000A' 0803'              	movf	___wmul@multiplicand+1,w
  8913  000B' 0785'              	addwf	___wmul@product+1,f
  8914  000C'                    l373:	
  8915  000C' 3001               	movlw	1
  8916  000D'                    u6675:	
  8917  000D' 1003               	clrc
  8918  000E' 0D82'              	rlf	___wmul@multiplicand,f
  8919  000F' 0D83'              	rlf	___wmul@multiplicand+1,f
  8920  0010' 3EFF               	addlw	-1
  8921  0011' 1D03               	skipz
  8922  0012' 2800'              	goto	u6675
  8923  0013' 3001               	movlw	1
  8924  0014'                    u6685:	
  8925  0014' 1003               	clrc
  8926  0015' 0C81'              	rrf	___wmul@multiplier+1,f
  8927  0016' 0C80'              	rrf	___wmul@multiplier,f
  8928  0017' 3EFF               	addlw	-1
  8929  0018' 1D03               	skipz
  8930  0019' 2800'              	goto	u6685
  8931  001A' 0800'              	movf	___wmul@multiplier,w
  8932  001B' 0401'              	iorwf	___wmul@multiplier+1,w
  8933  001C' 1D03               	btfss	3,2
  8934  001D' 2800'              	goto	l4296
  8935  001E' 0805'              	movf	___wmul@product+1,w
  8936  001F' 0081'              	movwf	?___wmul+1
  8937  0020' 0804'              	movf	___wmul@product,w
  8938  0021' 0080'              	movwf	?___wmul
  8939  0022' 0008               	return
  8940  0023'                    __end_of___wmul:	
  8941                           
  8942                           	psect	text27
  8943  0000'                    __ptext27:	
  8944 ;; *************** function ___lltoft *****************
  8945 ;; Defined at:
  8946 ;;		line 35 in file "D:\mplab\sources\common\lltoft.c"
  8947 ;; Parameters:    Size  Location     Type
  8948 ;;  c               4    8[BANK0 ] unsigned long 
  8949 ;; Auto vars:     Size  Location     Type
  8950 ;;  exp             1   13[BANK0 ] unsigned char 
  8951 ;; Return value:  Size  Location     Type
  8952 ;;                  3    8[BANK0 ] float 
  8953 ;; Registers used:
  8954 ;;		wreg, status,2, status,0, pclath, cstack
  8955 ;; Tracked objects:
  8956 ;;		On entry : 0/0
  8957 ;;		On exit  : 0/0
  8958 ;;		Unchanged: 0/0
  8959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8960 ;;      Params:         0       4       0       0       0
  8961 ;;      Locals:         0       1       0       0       0
  8962 ;;      Temps:          0       1       0       0       0
  8963 ;;      Totals:         0       6       0       0       0
  8964 ;;Total ram usage:        6 bytes
  8965 ;; Hardware stack levels used:    1
  8966 ;; Hardware stack levels required when called:    2
  8967 ;; This function calls:
  8968 ;;		___ftpack
  8969 ;; This function is called by:
  8970 ;;		_sprintf
  8971 ;; This function uses a non-reentrant model
  8972 ;;
  8973                           
  8974                           
  8975                           ;psect for function ___lltoft
  8976  0000'                    ___lltoft:	
  8977                           
  8978                           ;incstack = 0
  8979                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  8980  0000' 308E               	movlw	142
  8981  0001' 1283               	bcf	3,5	;RP0=0, select bank0
  8982  0002' 1303               	bcf	3,6	;RP1=0, select bank0
  8983  0003' 008C'              	movwf	??___lltoft
  8984  0004' 080C'              	movf	??___lltoft,w
  8985  0005' 008D'              	movwf	___lltoft@exp
  8986  0006'                    l4534:	
  8987  0006' 30FF               	movlw	255
  8988  0007' 050B'              	andwf	___lltoft@c+3,w
  8989  0008' 1903               	btfsc	3,2
  8990  0009' 2800'              	goto	l4536
  8991  000A' 3001               	movlw	1
  8992  000B'                    u7115:	
  8993  000B' 1003               	clrc
  8994  000C' 0C8B'              	rrf	___lltoft@c+3,f
  8995  000D' 0C8A'              	rrf	___lltoft@c+2,f
  8996  000E' 0C89'              	rrf	___lltoft@c+1,f
  8997  000F' 0C88'              	rrf	___lltoft@c,f
  8998  0010' 3EFF               	addlw	-1
  8999  0011' 1D03               	skipz
  9000  0012' 2800'              	goto	u7115
  9001  0013' 3001               	movlw	1
  9002  0014' 008C'              	movwf	??___lltoft
  9003  0015' 080C'              	movf	??___lltoft,w
  9004  0016' 078D'              	addwf	___lltoft@exp,f
  9005  0017' 2800'              	goto	l4534
  9006  0018'                    l4536:	
  9007  0018' 0808'              	movf	___lltoft@c,w
  9008  0019' 0080'              	movwf	___ftpack@arg
  9009  001A' 0809'              	movf	___lltoft@c+1,w
  9010  001B' 0081'              	movwf	___ftpack@arg+1
  9011  001C' 080A'              	movf	___lltoft@c+2,w
  9012  001D' 0082'              	movwf	___ftpack@arg+2
  9013  001E' 080D'              	movf	___lltoft@exp,w
  9014  001F' 008C'              	movwf	??___lltoft
  9015  0020' 080C'              	movf	??___lltoft,w
  9016  0021' 0083'              	movwf	___ftpack@exp
  9017  0022' 0184'              	clrf	___ftpack@sign
  9018  0023' 120A' 118A' 2000'  	fcall	___ftpack
  9019  0026' 1283               	bcf	3,5	;RP0=0, select bank0
  9020  0027' 1303               	bcf	3,6	;RP1=0, select bank0
  9021  0028' 0800'              	movf	?___ftpack,w
  9022  0029' 0088'              	movwf	?___lltoft
  9023  002A' 0801'              	movf	?___ftpack+1,w
  9024  002B' 0089'              	movwf	?___lltoft+1
  9025  002C' 0802'              	movf	?___ftpack+2,w
  9026  002D' 008A'              	movwf	?___lltoft+2
  9027  002E' 0008               	return
  9028  002F'                    __end_of___lltoft:	
  9029                           
  9030                           	psect	text28
  9031  0000'                    __ptext28:	
  9032 ;; *************** function ___llmod *****************
  9033 ;; Defined at:
  9034 ;;		line 6 in file "D:\mplab\sources\common\llmod.c"
  9035 ;; Parameters:    Size  Location     Type
  9036 ;;  divisor         4    0[BANK0 ] unsigned long 
  9037 ;;  dividend        4    4[BANK0 ] unsigned long 
  9038 ;; Auto vars:     Size  Location     Type
  9039 ;;  counter         1    9[BANK0 ] unsigned char 
  9040 ;; Return value:  Size  Location     Type
  9041 ;;                  4    0[BANK0 ] unsigned long 
  9042 ;; Registers used:
  9043 ;;		wreg, status,2, status,0
  9044 ;; Tracked objects:
  9045 ;;		On entry : 0/0
  9046 ;;		On exit  : 0/0
  9047 ;;		Unchanged: 0/0
  9048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9049 ;;      Params:         0       8       0       0       0
  9050 ;;      Locals:         0       1       0       0       0
  9051 ;;      Temps:          0       1       0       0       0
  9052 ;;      Totals:         0      10       0       0       0
  9053 ;;Total ram usage:       10 bytes
  9054 ;; Hardware stack levels used:    1
  9055 ;; Hardware stack levels required when called:    1
  9056 ;; This function calls:
  9057 ;;		Nothing
  9058 ;; This function is called by:
  9059 ;;		_convert_time_to_UTC
  9060 ;;		_sprintf
  9061 ;; This function uses a non-reentrant model
  9062 ;;
  9063                           
  9064                           
  9065                           ;psect for function ___llmod
  9066  0000'                    ___llmod:	
  9067                           
  9068                           ;incstack = 0
  9069                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  9070  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  9071  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  9072  0002' 0803'              	movf	___llmod@divisor+3,w
  9073  0003' 0402'              	iorwf	___llmod@divisor+2,w
  9074  0004' 0401'              	iorwf	___llmod@divisor+1,w
  9075  0005' 0400'              	iorwf	___llmod@divisor,w
  9076  0006' 1903               	skipnz
  9077  0007' 2800'              	goto	l4526
  9078  0008' 0189'              	clrf	___llmod@counter
  9079  0009' 0A89'              	incf	___llmod@counter,f
  9080  000A'                    l4516:	
  9081  000A' 1B83'              	btfsc	___llmod@divisor+3,7
  9082  000B' 2800'              	goto	l4518
  9083  000C' 3001               	movlw	1
  9084  000D' 0088'              	movwf	??___llmod
  9085  000E'                    u7065:	
  9086  000E' 1003               	clrc
  9087  000F' 0D80'              	rlf	___llmod@divisor,f
  9088  0010' 0D81'              	rlf	___llmod@divisor+1,f
  9089  0011' 0D82'              	rlf	___llmod@divisor+2,f
  9090  0012' 0D83'              	rlf	___llmod@divisor+3,f
  9091  0013' 0B88'              	decfsz	??___llmod,f
  9092  0014' 2800'              	goto	u7065
  9093  0015' 3001               	movlw	1
  9094  0016' 0088'              	movwf	??___llmod
  9095  0017' 0808'              	movf	??___llmod,w
  9096  0018' 0789'              	addwf	___llmod@counter,f
  9097  0019' 2800'              	goto	l4516
  9098  001A'                    l4518:	
  9099  001A' 0803'              	movf	___llmod@divisor+3,w
  9100  001B' 0207'              	subwf	___llmod@dividend+3,w
  9101  001C' 1D03               	skipz
  9102  001D' 2800'              	goto	u7085
  9103  001E' 0802'              	movf	___llmod@divisor+2,w
  9104  001F' 0206'              	subwf	___llmod@dividend+2,w
  9105  0020' 1D03               	skipz
  9106  0021' 2800'              	goto	u7085
  9107  0022' 0801'              	movf	___llmod@divisor+1,w
  9108  0023' 0205'              	subwf	___llmod@dividend+1,w
  9109  0024' 1D03               	skipz
  9110  0025' 2800'              	goto	u7085
  9111  0026' 0800'              	movf	___llmod@divisor,w
  9112  0027' 0204'              	subwf	___llmod@dividend,w
  9113  0028'                    u7085:	
  9114  0028' 1C03               	skipc
  9115  0029' 2800'              	goto	l4522
  9116  002A' 0800'              	movf	___llmod@divisor,w
  9117  002B' 0284'              	subwf	___llmod@dividend,f
  9118  002C' 0801'              	movf	___llmod@divisor+1,w
  9119  002D' 1C03               	skipc
  9120  002E' 0F01'              	incfsz	___llmod@divisor+1,w
  9121  002F' 0285'              	subwf	___llmod@dividend+1,f
  9122  0030' 0802'              	movf	___llmod@divisor+2,w
  9123  0031' 1C03               	skipc
  9124  0032' 0F02'              	incfsz	___llmod@divisor+2,w
  9125  0033' 0286'              	subwf	___llmod@dividend+2,f
  9126  0034' 0803'              	movf	___llmod@divisor+3,w
  9127  0035' 1C03               	skipc
  9128  0036' 0F03'              	incfsz	___llmod@divisor+3,w
  9129  0037' 0287'              	subwf	___llmod@dividend+3,f
  9130  0038'                    l4522:	
  9131  0038' 3001               	movlw	1
  9132  0039'                    u7095:	
  9133  0039' 1003               	clrc
  9134  003A' 0C83'              	rrf	___llmod@divisor+3,f
  9135  003B' 0C82'              	rrf	___llmod@divisor+2,f
  9136  003C' 0C81'              	rrf	___llmod@divisor+1,f
  9137  003D' 0C80'              	rrf	___llmod@divisor,f
  9138  003E' 3EFF               	addlw	-1
  9139  003F' 1D03               	skipz
  9140  0040' 2800'              	goto	u7095
  9141  0041' 3001               	movlw	1
  9142  0042' 0289'              	subwf	___llmod@counter,f
  9143  0043' 1D03               	btfss	3,2
  9144  0044' 2800'              	goto	l4518
  9145  0045'                    l4526:	
  9146  0045' 0807'              	movf	___llmod@dividend+3,w
  9147  0046' 0083'              	movwf	?___llmod+3
  9148  0047' 0806'              	movf	___llmod@dividend+2,w
  9149  0048' 0082'              	movwf	?___llmod+2
  9150  0049' 0805'              	movf	___llmod@dividend+1,w
  9151  004A' 0081'              	movwf	?___llmod+1
  9152  004B' 0804'              	movf	___llmod@dividend,w
  9153  004C' 0080'              	movwf	?___llmod
  9154  004D' 0008               	return
  9155  004E'                    __end_of___llmod:	
  9156                           
  9157                           	psect	text29
  9158  0000'                    __ptext29:	
  9159 ;; *************** function ___lldiv *****************
  9160 ;; Defined at:
  9161 ;;		line 6 in file "D:\mplab\sources\common\lldiv.c"
  9162 ;; Parameters:    Size  Location     Type
  9163 ;;  divisor         4   10[BANK0 ] unsigned long 
  9164 ;;  dividend        4   14[BANK0 ] unsigned long 
  9165 ;; Auto vars:     Size  Location     Type
  9166 ;;  quotient        4   19[BANK0 ] unsigned long 
  9167 ;;  counter         1   23[BANK0 ] unsigned char 
  9168 ;; Return value:  Size  Location     Type
  9169 ;;                  4   10[BANK0 ] unsigned long 
  9170 ;; Registers used:
  9171 ;;		wreg, status,2, status,0
  9172 ;; Tracked objects:
  9173 ;;		On entry : 0/0
  9174 ;;		On exit  : 0/0
  9175 ;;		Unchanged: 0/0
  9176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9177 ;;      Params:         0       8       0       0       0
  9178 ;;      Locals:         0       5       0       0       0
  9179 ;;      Temps:          0       1       0       0       0
  9180 ;;      Totals:         0      14       0       0       0
  9181 ;;Total ram usage:       14 bytes
  9182 ;; Hardware stack levels used:    1
  9183 ;; Hardware stack levels required when called:    1
  9184 ;; This function calls:
  9185 ;;		Nothing
  9186 ;; This function is called by:
  9187 ;;		_convert_time_to_UTC
  9188 ;;		_sprintf
  9189 ;; This function uses a non-reentrant model
  9190 ;;
  9191                           
  9192                           
  9193                           ;psect for function ___lldiv
  9194  0000'                    ___lldiv:	
  9195                           
  9196                           ;incstack = 0
  9197                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9198  0000' 3000               	movlw	0
  9199  0001' 1283               	bcf	3,5	;RP0=0, select bank0
  9200  0002' 1303               	bcf	3,6	;RP1=0, select bank0
  9201  0003' 0096'              	movwf	___lldiv@quotient+3
  9202  0004' 3000               	movlw	0
  9203  0005' 0095'              	movwf	___lldiv@quotient+2
  9204  0006' 3000               	movlw	0
  9205  0007' 0094'              	movwf	___lldiv@quotient+1
  9206  0008' 3000               	movlw	0
  9207  0009' 0093'              	movwf	___lldiv@quotient
  9208  000A' 080D'              	movf	___lldiv@divisor+3,w
  9209  000B' 040C'              	iorwf	___lldiv@divisor+2,w
  9210  000C' 040B'              	iorwf	___lldiv@divisor+1,w
  9211  000D' 040A'              	iorwf	___lldiv@divisor,w
  9212  000E' 1903               	skipnz
  9213  000F' 2800'              	goto	l3244
  9214  0010' 0197'              	clrf	___lldiv@counter
  9215  0011' 0A97'              	incf	___lldiv@counter,f
  9216  0012'                    l3230:	
  9217  0012' 1B8D'              	btfsc	___lldiv@divisor+3,7
  9218  0013' 2800'              	goto	l3232
  9219  0014' 3001               	movlw	1
  9220  0015' 0092'              	movwf	??___lldiv
  9221  0016'                    u4665:	
  9222  0016' 1003               	clrc
  9223  0017' 0D8A'              	rlf	___lldiv@divisor,f
  9224  0018' 0D8B'              	rlf	___lldiv@divisor+1,f
  9225  0019' 0D8C'              	rlf	___lldiv@divisor+2,f
  9226  001A' 0D8D'              	rlf	___lldiv@divisor+3,f
  9227  001B' 0B92'              	decfsz	??___lldiv,f
  9228  001C' 2800'              	goto	u4665
  9229  001D' 3001               	movlw	1
  9230  001E' 0092'              	movwf	??___lldiv
  9231  001F' 0812'              	movf	??___lldiv,w
  9232  0020' 0797'              	addwf	___lldiv@counter,f
  9233  0021' 2800'              	goto	l3230
  9234  0022'                    l3232:	
  9235  0022' 3001               	movlw	1
  9236  0023' 0092'              	movwf	??___lldiv
  9237  0024'                    u4685:	
  9238  0024' 1003               	clrc
  9239  0025' 0D93'              	rlf	___lldiv@quotient,f
  9240  0026' 0D94'              	rlf	___lldiv@quotient+1,f
  9241  0027' 0D95'              	rlf	___lldiv@quotient+2,f
  9242  0028' 0D96'              	rlf	___lldiv@quotient+3,f
  9243  0029' 0B92'              	decfsz	??___lldiv,f
  9244  002A' 2800'              	goto	u4685
  9245  002B' 080D'              	movf	___lldiv@divisor+3,w
  9246  002C' 0211'              	subwf	___lldiv@dividend+3,w
  9247  002D' 1D03               	skipz
  9248  002E' 2800'              	goto	u4695
  9249  002F' 080C'              	movf	___lldiv@divisor+2,w
  9250  0030' 0210'              	subwf	___lldiv@dividend+2,w
  9251  0031' 1D03               	skipz
  9252  0032' 2800'              	goto	u4695
  9253  0033' 080B'              	movf	___lldiv@divisor+1,w
  9254  0034' 020F'              	subwf	___lldiv@dividend+1,w
  9255  0035' 1D03               	skipz
  9256  0036' 2800'              	goto	u4695
  9257  0037' 080A'              	movf	___lldiv@divisor,w
  9258  0038' 020E'              	subwf	___lldiv@dividend,w
  9259  0039'                    u4695:	
  9260  0039' 1C03               	skipc
  9261  003A' 2800'              	goto	l3240
  9262  003B' 080A'              	movf	___lldiv@divisor,w
  9263  003C' 028E'              	subwf	___lldiv@dividend,f
  9264  003D' 080B'              	movf	___lldiv@divisor+1,w
  9265  003E' 1C03               	skipc
  9266  003F' 0F0B'              	incfsz	___lldiv@divisor+1,w
  9267  0040' 028F'              	subwf	___lldiv@dividend+1,f
  9268  0041' 080C'              	movf	___lldiv@divisor+2,w
  9269  0042' 1C03               	skipc
  9270  0043' 0F0C'              	incfsz	___lldiv@divisor+2,w
  9271  0044' 0290'              	subwf	___lldiv@dividend+2,f
  9272  0045' 080D'              	movf	___lldiv@divisor+3,w
  9273  0046' 1C03               	skipc
  9274  0047' 0F0D'              	incfsz	___lldiv@divisor+3,w
  9275  0048' 0291'              	subwf	___lldiv@dividend+3,f
  9276  0049' 1413'              	bsf	___lldiv@quotient,0
  9277  004A'                    l3240:	
  9278  004A' 3001               	movlw	1
  9279  004B'                    u4705:	
  9280  004B' 1003               	clrc
  9281  004C' 0C8D'              	rrf	___lldiv@divisor+3,f
  9282  004D' 0C8C'              	rrf	___lldiv@divisor+2,f
  9283  004E' 0C8B'              	rrf	___lldiv@divisor+1,f
  9284  004F' 0C8A'              	rrf	___lldiv@divisor,f
  9285  0050' 3EFF               	addlw	-1
  9286  0051' 1D03               	skipz
  9287  0052' 2800'              	goto	u4705
  9288  0053' 3001               	movlw	1
  9289  0054' 0297'              	subwf	___lldiv@counter,f
  9290  0055' 1D03               	btfss	3,2
  9291  0056' 2800'              	goto	l3232
  9292  0057'                    l3244:	
  9293  0057' 0816'              	movf	___lldiv@quotient+3,w
  9294  0058' 008D'              	movwf	?___lldiv+3
  9295  0059' 0815'              	movf	___lldiv@quotient+2,w
  9296  005A' 008C'              	movwf	?___lldiv+2
  9297  005B' 0814'              	movf	___lldiv@quotient+1,w
  9298  005C' 008B'              	movwf	?___lldiv+1
  9299  005D' 0813'              	movf	___lldiv@quotient,w
  9300  005E' 008A'              	movwf	?___lldiv
  9301  005F' 0008               	return
  9302  0060'                    __end_of___lldiv:	
  9303                           
  9304                           	psect	text30
  9305  0000'                    __ptext30:	
  9306 ;; *************** function ___ftsub *****************
  9307 ;; Defined at:
  9308 ;;		line 18 in file "D:\mplab\sources\common\ftsub.c"
  9309 ;; Parameters:    Size  Location     Type
  9310 ;;  f2              3   65[BANK0 ] float 
  9311 ;;  f1              3   68[BANK0 ] float 
  9312 ;; Auto vars:     Size  Location     Type
  9313 ;;		None
  9314 ;; Return value:  Size  Location     Type
  9315 ;;                  3   65[BANK0 ] float 
  9316 ;; Registers used:
  9317 ;;		wreg, status,2, status,0, pclath, cstack
  9318 ;; Tracked objects:
  9319 ;;		On entry : 0/0
  9320 ;;		On exit  : 0/0
  9321 ;;		Unchanged: 0/0
  9322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9323 ;;      Params:         0       6       0       0       0
  9324 ;;      Locals:         0       0       0       0       0
  9325 ;;      Temps:          0       0       0       0       0
  9326 ;;      Totals:         0       6       0       0       0
  9327 ;;Total ram usage:        6 bytes
  9328 ;; Hardware stack levels used:    1
  9329 ;; Hardware stack levels required when called:    3
  9330 ;; This function calls:
  9331 ;;		___ftadd
  9332 ;; This function is called by:
  9333 ;;		_sprintf
  9334 ;; This function uses a non-reentrant model
  9335 ;;
  9336                           
  9337                           
  9338                           ;psect for function ___ftsub
  9339  0000'                    ___ftsub:	
  9340                           
  9341                           ;incstack = 0
  9342                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9343  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  9344  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  9345  0002' 0843'              	movf	___ftsub@f2+2,w
  9346  0003' 0442'              	iorwf	___ftsub@f2+1,w
  9347  0004' 0441'              	iorwf	___ftsub@f2,w
  9348  0005' 1903               	skipnz
  9349  0006' 2800'              	goto	l4506
  9350  0007' 3080               	movlw	128
  9351  0008' 06C3'              	xorwf	___ftsub@f2+2,f
  9352  0009'                    l4506:	
  9353  0009' 0844'              	movf	___ftsub@f1,w
  9354  000A' 00B4'              	movwf	___ftadd@f1
  9355  000B' 0845'              	movf	___ftsub@f1+1,w
  9356  000C' 00B5'              	movwf	___ftadd@f1+1
  9357  000D' 0846'              	movf	___ftsub@f1+2,w
  9358  000E' 00B6'              	movwf	___ftadd@f1+2
  9359  000F' 0841'              	movf	___ftsub@f2,w
  9360  0010' 00B7'              	movwf	___ftadd@f2
  9361  0011' 0842'              	movf	___ftsub@f2+1,w
  9362  0012' 00B8'              	movwf	___ftadd@f2+1
  9363  0013' 0843'              	movf	___ftsub@f2+2,w
  9364  0014' 00B9'              	movwf	___ftadd@f2+2
  9365  0015' 120A' 118A' 2000'  	fcall	___ftadd
  9366  0018' 1283               	bcf	3,5	;RP0=0, select bank0
  9367  0019' 1303               	bcf	3,6	;RP1=0, select bank0
  9368  001A' 0834'              	movf	?___ftadd,w
  9369  001B' 00C1'              	movwf	?___ftsub
  9370  001C' 0835'              	movf	?___ftadd+1,w
  9371  001D' 00C2'              	movwf	?___ftsub+1
  9372  001E' 0836'              	movf	?___ftadd+2,w
  9373  001F' 00C3'              	movwf	?___ftsub+2
  9374  0020' 0008               	return
  9375  0021'                    __end_of___ftsub:	
  9376                           
  9377                           	psect	text31
  9378  0000'                    __ptext31:	
  9379 ;; *************** function ___ftadd *****************
  9380 ;; Defined at:
  9381 ;;		line 86 in file "D:\mplab\sources\common\ftadd.c"
  9382 ;; Parameters:    Size  Location     Type
  9383 ;;  f1              3   52[BANK0 ] float 
  9384 ;;  f2              3   55[BANK0 ] float 
  9385 ;; Auto vars:     Size  Location     Type
  9386 ;;  exp1            1   64[BANK0 ] unsigned char 
  9387 ;;  exp2            1   63[BANK0 ] unsigned char 
  9388 ;;  sign            1   62[BANK0 ] unsigned char 
  9389 ;; Return value:  Size  Location     Type
  9390 ;;                  3   52[BANK0 ] float 
  9391 ;; Registers used:
  9392 ;;		wreg, status,2, status,0, pclath, cstack
  9393 ;; Tracked objects:
  9394 ;;		On entry : 0/0
  9395 ;;		On exit  : 0/0
  9396 ;;		Unchanged: 0/0
  9397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9398 ;;      Params:         0       6       0       0       0
  9399 ;;      Locals:         0       3       0       0       0
  9400 ;;      Temps:          0       4       0       0       0
  9401 ;;      Totals:         0      13       0       0       0
  9402 ;;Total ram usage:       13 bytes
  9403 ;; Hardware stack levels used:    1
  9404 ;; Hardware stack levels required when called:    2
  9405 ;; This function calls:
  9406 ;;		___ftpack
  9407 ;; This function is called by:
  9408 ;;		_convert_to_degrees
  9409 ;;		_sprintf
  9410 ;;		___ftsub
  9411 ;; This function uses a non-reentrant model
  9412 ;;
  9413                           
  9414                           
  9415                           ;psect for function ___ftadd
  9416  0000'                    ___ftadd:	
  9417                           
  9418                           ;incstack = 0
  9419                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9420  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  9421  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  9422  0002' 0834'              	movf	___ftadd@f1,w
  9423  0003' 00BA'              	movwf	??___ftadd
  9424  0004' 0835'              	movf	___ftadd@f1+1,w
  9425  0005' 00BB'              	movwf	??___ftadd+1
  9426  0006' 0836'              	movf	___ftadd@f1+2,w
  9427  0007' 00BC'              	movwf	??___ftadd+2
  9428  0008' 1003               	clrc
  9429  0009' 0D3B'              	rlf	??___ftadd+1,w
  9430  000A' 0D3C'              	rlf	??___ftadd+2,w
  9431  000B' 00BD'              	movwf	??___ftadd+3
  9432  000C' 083D'              	movf	??___ftadd+3,w
  9433  000D' 00C0'              	movwf	___ftadd@exp1
  9434  000E' 0837'              	movf	___ftadd@f2,w
  9435  000F' 00BA'              	movwf	??___ftadd
  9436  0010' 0838'              	movf	___ftadd@f2+1,w
  9437  0011' 00BB'              	movwf	??___ftadd+1
  9438  0012' 0839'              	movf	___ftadd@f2+2,w
  9439  0013' 00BC'              	movwf	??___ftadd+2
  9440  0014' 1003               	clrc
  9441  0015' 0D3B'              	rlf	??___ftadd+1,w
  9442  0016' 0D3C'              	rlf	??___ftadd+2,w
  9443  0017' 00BD'              	movwf	??___ftadd+3
  9444  0018' 083D'              	movf	??___ftadd+3,w
  9445  0019' 00BF'              	movwf	___ftadd@exp2
  9446  001A' 0840'              	movf	___ftadd@exp1,w
  9447  001B' 1903               	btfsc	3,2
  9448  001C' 2800'              	goto	l4054
  9449  001D' 083F'              	movf	___ftadd@exp2,w
  9450  001E' 0240'              	subwf	___ftadd@exp1,w
  9451  001F' 1803               	skipnc
  9452  0020' 2800'              	goto	l4058
  9453  0021' 0340'              	decf	___ftadd@exp1,w
  9454  0022' 3AFF               	xorlw	255
  9455  0023' 073F'              	addwf	___ftadd@exp2,w
  9456  0024' 00BA'              	movwf	??___ftadd
  9457  0025' 3019               	movlw	25
  9458  0026' 023A'              	subwf	??___ftadd,w
  9459  0027' 1C03               	skipc
  9460  0028' 2800'              	goto	l4058
  9461  0029'                    l4054:	
  9462  0029' 0837'              	movf	___ftadd@f2,w
  9463  002A' 00B4'              	movwf	?___ftadd
  9464  002B' 0838'              	movf	___ftadd@f2+1,w
  9465  002C' 00B5'              	movwf	?___ftadd+1
  9466  002D' 0839'              	movf	___ftadd@f2+2,w
  9467  002E' 00B6'              	movwf	?___ftadd+2
  9468  002F' 0008               	return
  9469  0030'                    l4058:	
  9470  0030' 083F'              	movf	___ftadd@exp2,w
  9471  0031' 1903               	btfsc	3,2
  9472  0032' 0008               	return
  9473  0033' 0840'              	movf	___ftadd@exp1,w
  9474  0034' 023F'              	subwf	___ftadd@exp2,w
  9475  0035' 1803               	skipnc
  9476  0036' 2800'              	goto	l4064
  9477  0037' 033F'              	decf	___ftadd@exp2,w
  9478  0038' 3AFF               	xorlw	255
  9479  0039' 0740'              	addwf	___ftadd@exp1,w
  9480  003A' 00BA'              	movwf	??___ftadd
  9481  003B' 3019               	movlw	25
  9482  003C' 023A'              	subwf	??___ftadd,w
  9483  003D' 1803               	btfsc	3,0
  9484  003E' 0008               	return
  9485  003F'                    l4064:	
  9486  003F' 3006               	movlw	6
  9487  0040' 00BA'              	movwf	??___ftadd
  9488  0041' 083A'              	movf	??___ftadd,w
  9489  0042' 00BE'              	movwf	___ftadd@sign
  9490  0043' 1BB6'              	btfsc	___ftadd@f1+2,7
  9491  0044' 17BE'              	bsf	___ftadd@sign,7
  9492  0045' 1BB9'              	btfsc	___ftadd@f2+2,7
  9493  0046' 173E'              	bsf	___ftadd@sign,6
  9494  0047' 17B5'              	bsf	___ftadd@f1+1,7
  9495  0048' 30FF               	movlw	255
  9496  0049' 05B4'              	andwf	___ftadd@f1,f
  9497  004A' 30FF               	movlw	255
  9498  004B' 05B5'              	andwf	___ftadd@f1+1,f
  9499  004C' 3000               	movlw	0
  9500  004D' 05B6'              	andwf	___ftadd@f1+2,f
  9501  004E' 17B8'              	bsf	___ftadd@f2+1,7
  9502  004F' 30FF               	movlw	255
  9503  0050' 05B7'              	andwf	___ftadd@f2,f
  9504  0051' 30FF               	movlw	255
  9505  0052' 05B8'              	andwf	___ftadd@f2+1,f
  9506  0053' 3000               	movlw	0
  9507  0054' 05B9'              	andwf	___ftadd@f2+2,f
  9508  0055' 083F'              	movf	___ftadd@exp2,w
  9509  0056' 0240'              	subwf	___ftadd@exp1,w
  9510  0057' 1803               	skipnc
  9511  0058' 2800'              	goto	l4086
  9512  0059'                    l4076:	
  9513  0059' 3001               	movlw	1
  9514  005A'                    u6215:	
  9515  005A' 1003               	clrc
  9516  005B' 0DB7'              	rlf	___ftadd@f2,f
  9517  005C' 0DB8'              	rlf	___ftadd@f2+1,f
  9518  005D' 0DB9'              	rlf	___ftadd@f2+2,f
  9519  005E' 3EFF               	addlw	-1
  9520  005F' 1D03               	skipz
  9521  0060' 2800'              	goto	u6215
  9522  0061' 3001               	movlw	1
  9523  0062' 02BF'              	subwf	___ftadd@exp2,f
  9524  0063' 083F'              	movf	___ftadd@exp2,w
  9525  0064' 0640'              	xorwf	___ftadd@exp1,w
  9526  0065' 1903               	skipnz
  9527  0066' 2800'              	goto	l4084
  9528  0067' 3001               	movlw	1
  9529  0068' 02BE'              	subwf	___ftadd@sign,f
  9530  0069' 083E'              	movf	___ftadd@sign,w
  9531  006A' 3907               	andlw	7
  9532  006B' 1903               	btfsc	3,2
  9533  006C' 2800'              	goto	l4084
  9534  006D' 2800'              	goto	l4076
  9535  006E'                    l4082:	
  9536  006E' 3001               	movlw	1
  9537  006F'                    u6245:	
  9538  006F' 1003               	clrc
  9539  0070' 0CB6'              	rrf	___ftadd@f1+2,f
  9540  0071' 0CB5'              	rrf	___ftadd@f1+1,f
  9541  0072' 0CB4'              	rrf	___ftadd@f1,f
  9542  0073' 3EFF               	addlw	-1
  9543  0074' 1D03               	skipz
  9544  0075' 2800'              	goto	u6245
  9545  0076' 3001               	movlw	1
  9546  0077' 00BA'              	movwf	??___ftadd
  9547  0078' 083A'              	movf	??___ftadd,w
  9548  0079' 07C0'              	addwf	___ftadd@exp1,f
  9549  007A'                    l4084:	
  9550  007A' 0840'              	movf	___ftadd@exp1,w
  9551  007B' 063F'              	xorwf	___ftadd@exp2,w
  9552  007C' 1903               	btfsc	3,2
  9553  007D' 2800'              	goto	l685
  9554  007E' 2800'              	goto	l4082
  9555  007F'                    l4086:	
  9556  007F' 0840'              	movf	___ftadd@exp1,w
  9557  0080' 023F'              	subwf	___ftadd@exp2,w
  9558  0081' 1803               	skipnc
  9559  0082' 2800'              	goto	l685
  9560  0083'                    l4088:	
  9561  0083' 3001               	movlw	1
  9562  0084'                    u6275:	
  9563  0084' 1003               	clrc
  9564  0085' 0DB4'              	rlf	___ftadd@f1,f
  9565  0086' 0DB5'              	rlf	___ftadd@f1+1,f
  9566  0087' 0DB6'              	rlf	___ftadd@f1+2,f
  9567  0088' 3EFF               	addlw	-1
  9568  0089' 1D03               	skipz
  9569  008A' 2800'              	goto	u6275
  9570  008B' 3001               	movlw	1
  9571  008C' 02C0'              	subwf	___ftadd@exp1,f
  9572  008D' 083F'              	movf	___ftadd@exp2,w
  9573  008E' 0640'              	xorwf	___ftadd@exp1,w
  9574  008F' 1903               	skipnz
  9575  0090' 2800'              	goto	l4096
  9576  0091' 3001               	movlw	1
  9577  0092' 02BE'              	subwf	___ftadd@sign,f
  9578  0093' 083E'              	movf	___ftadd@sign,w
  9579  0094' 3907               	andlw	7
  9580  0095' 1903               	btfsc	3,2
  9581  0096' 2800'              	goto	l4096
  9582  0097' 2800'              	goto	l4088
  9583  0098'                    l4094:	
  9584  0098' 3001               	movlw	1
  9585  0099'                    u6305:	
  9586  0099' 1003               	clrc
  9587  009A' 0CB9'              	rrf	___ftadd@f2+2,f
  9588  009B' 0CB8'              	rrf	___ftadd@f2+1,f
  9589  009C' 0CB7'              	rrf	___ftadd@f2,f
  9590  009D' 3EFF               	addlw	-1
  9591  009E' 1D03               	skipz
  9592  009F' 2800'              	goto	u6305
  9593  00A0' 3001               	movlw	1
  9594  00A1' 00BA'              	movwf	??___ftadd
  9595  00A2' 083A'              	movf	??___ftadd,w
  9596  00A3' 07BF'              	addwf	___ftadd@exp2,f
  9597  00A4'                    l4096:	
  9598  00A4' 0840'              	movf	___ftadd@exp1,w
  9599  00A5' 063F'              	xorwf	___ftadd@exp2,w
  9600  00A6' 1D03               	skipz
  9601  00A7' 2800'              	goto	l4094
  9602  00A8'                    l685:	
  9603  00A8' 1FBE'              	btfss	___ftadd@sign,7
  9604  00A9' 2800'              	goto	l4100
  9605  00AA' 30FF               	movlw	255
  9606  00AB' 06B4'              	xorwf	___ftadd@f1,f
  9607  00AC' 30FF               	movlw	255
  9608  00AD' 06B5'              	xorwf	___ftadd@f1+1,f
  9609  00AE' 30FF               	movlw	255
  9610  00AF' 06B6'              	xorwf	___ftadd@f1+2,f
  9611  00B0' 3001               	movlw	1
  9612  00B1' 07B4'              	addwf	___ftadd@f1,f
  9613  00B2' 3000               	movlw	0
  9614  00B3' 1803               	skipnc
  9615  00B4' 3001               	movlw	1
  9616  00B5' 07B5'              	addwf	___ftadd@f1+1,f
  9617  00B6' 3000               	movlw	0
  9618  00B7' 1803               	skipnc
  9619  00B8' 3001               	movlw	1
  9620  00B9' 07B6'              	addwf	___ftadd@f1+2,f
  9621  00BA'                    l4100:	
  9622  00BA' 1F3E'              	btfss	___ftadd@sign,6
  9623  00BB' 2800'              	goto	l4104
  9624  00BC' 30FF               	movlw	255
  9625  00BD' 06B7'              	xorwf	___ftadd@f2,f
  9626  00BE' 30FF               	movlw	255
  9627  00BF' 06B8'              	xorwf	___ftadd@f2+1,f
  9628  00C0' 30FF               	movlw	255
  9629  00C1' 06B9'              	xorwf	___ftadd@f2+2,f
  9630  00C2' 3001               	movlw	1
  9631  00C3' 07B7'              	addwf	___ftadd@f2,f
  9632  00C4' 3000               	movlw	0
  9633  00C5' 1803               	skipnc
  9634  00C6' 3001               	movlw	1
  9635  00C7' 07B8'              	addwf	___ftadd@f2+1,f
  9636  00C8' 3000               	movlw	0
  9637  00C9' 1803               	skipnc
  9638  00CA' 3001               	movlw	1
  9639  00CB' 07B9'              	addwf	___ftadd@f2+2,f
  9640  00CC'                    l4104:	
  9641  00CC' 01BE'              	clrf	___ftadd@sign
  9642  00CD' 0834'              	movf	___ftadd@f1,w
  9643  00CE' 07B7'              	addwf	___ftadd@f2,f
  9644  00CF' 0835'              	movf	___ftadd@f1+1,w
  9645  00D0' 1103               	clrz
  9646  00D1' 1803               	skipnc
  9647  00D2' 0A35'              	incf	___ftadd@f1+1,w
  9648  00D3' 1D03               	btfss	3,2
  9649  00D4' 07B8'              	addwf	___ftadd@f2+1,f
  9650  00D5' 0836'              	movf	___ftadd@f1+2,w
  9651  00D6' 1103               	clrz
  9652  00D7' 1803               	skipnc
  9653  00D8' 0A36'              	incf	___ftadd@f1+2,w
  9654  00D9' 1D03               	btfss	3,2
  9655  00DA' 07B9'              	addwf	___ftadd@f2+2,f
  9656  00DB' 1FB9'              	btfss	___ftadd@f2+2,7
  9657  00DC' 2800'              	goto	l4114
  9658  00DD' 30FF               	movlw	255
  9659  00DE' 06B7'              	xorwf	___ftadd@f2,f
  9660  00DF' 30FF               	movlw	255
  9661  00E0' 06B8'              	xorwf	___ftadd@f2+1,f
  9662  00E1' 30FF               	movlw	255
  9663  00E2' 06B9'              	xorwf	___ftadd@f2+2,f
  9664  00E3' 3001               	movlw	1
  9665  00E4' 07B7'              	addwf	___ftadd@f2,f
  9666  00E5' 3000               	movlw	0
  9667  00E6' 1803               	skipnc
  9668  00E7' 3001               	movlw	1
  9669  00E8' 07B8'              	addwf	___ftadd@f2+1,f
  9670  00E9' 3000               	movlw	0
  9671  00EA' 1803               	skipnc
  9672  00EB' 3001               	movlw	1
  9673  00EC' 07B9'              	addwf	___ftadd@f2+2,f
  9674  00ED' 01BE'              	clrf	___ftadd@sign
  9675  00EE' 0ABE'              	incf	___ftadd@sign,f
  9676  00EF'                    l4114:	
  9677  00EF' 0837'              	movf	___ftadd@f2,w
  9678  00F0' 0080'              	movwf	___ftpack@arg
  9679  00F1' 0838'              	movf	___ftadd@f2+1,w
  9680  00F2' 0081'              	movwf	___ftpack@arg+1
  9681  00F3' 0839'              	movf	___ftadd@f2+2,w
  9682  00F4' 0082'              	movwf	___ftpack@arg+2
  9683  00F5' 0840'              	movf	___ftadd@exp1,w
  9684  00F6' 00BA'              	movwf	??___ftadd
  9685  00F7' 083A'              	movf	??___ftadd,w
  9686  00F8' 0083'              	movwf	___ftpack@exp
  9687  00F9' 083E'              	movf	___ftadd@sign,w
  9688  00FA' 00BB'              	movwf	??___ftadd+1
  9689  00FB' 083B'              	movf	??___ftadd+1,w
  9690  00FC' 0084'              	movwf	___ftpack@sign
  9691  00FD' 120A' 118A' 2000'  	fcall	___ftpack
  9692  0100' 1283               	bcf	3,5	;RP0=0, select bank0
  9693  0101' 1303               	bcf	3,6	;RP1=0, select bank0
  9694  0102' 0800'              	movf	?___ftpack,w
  9695  0103' 00B4'              	movwf	?___ftadd
  9696  0104' 0801'              	movf	?___ftpack+1,w
  9697  0105' 00B5'              	movwf	?___ftadd+1
  9698  0106' 0802'              	movf	?___ftpack+2,w
  9699  0107' 00B6'              	movwf	?___ftadd+2
  9700  0108' 0008               	return
  9701  0109'                    __end_of___ftadd:	
  9702                           
  9703                           	psect	text32
  9704  0000'                    __ptext32:	
  9705 ;; *************** function ___ftneg *****************
  9706 ;; Defined at:
  9707 ;;		line 15 in file "D:\mplab\sources\common\ftneg.c"
  9708 ;; Parameters:    Size  Location     Type
  9709 ;;  f1              3   36[BANK0 ] float 
  9710 ;; Auto vars:     Size  Location     Type
  9711 ;;		None
  9712 ;; Return value:  Size  Location     Type
  9713 ;;                  3   36[BANK0 ] float 
  9714 ;; Registers used:
  9715 ;;		wreg
  9716 ;; Tracked objects:
  9717 ;;		On entry : 0/0
  9718 ;;		On exit  : 0/0
  9719 ;;		Unchanged: 0/0
  9720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9721 ;;      Params:         0       3       0       0       0
  9722 ;;      Locals:         0       0       0       0       0
  9723 ;;      Temps:          0       0       0       0       0
  9724 ;;      Totals:         0       3       0       0       0
  9725 ;;Total ram usage:        3 bytes
  9726 ;; Hardware stack levels used:    1
  9727 ;; Hardware stack levels required when called:    1
  9728 ;; This function calls:
  9729 ;;		Nothing
  9730 ;; This function is called by:
  9731 ;;		_convert_to_degrees
  9732 ;;		_sprintf
  9733 ;;		_strtod
  9734 ;; This function uses a non-reentrant model
  9735 ;;
  9736                           
  9737                           
  9738                           ;psect for function ___ftneg
  9739  0000'                    ___ftneg:	
  9740                           
  9741                           ;incstack = 0
  9742                           ; Regs used in ___ftneg: [wreg]
  9743  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  9744  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  9745  0002' 0826'              	movf	___ftneg@f1+2,w
  9746  0003' 0425'              	iorwf	___ftneg@f1+1,w
  9747  0004' 0424'              	iorwf	___ftneg@f1,w
  9748  0005' 1903               	skipnz
  9749  0006' 0008               	return
  9750  0007' 3080               	movlw	128
  9751  0008' 06A6'              	xorwf	___ftneg@f1+2,f
  9752  0009' 0008               	return
  9753  000A'                    __end_of___ftneg:	
  9754                           
  9755                           	psect	text33
  9756  0000'                    __ptext33:	
  9757 ;; *************** function ___ftge *****************
  9758 ;; Defined at:
  9759 ;;		line 4 in file "D:\mplab\sources\common\ftge.c"
  9760 ;; Parameters:    Size  Location     Type
  9761 ;;  ff1             3    0[BANK0 ] float 
  9762 ;;  ff2             3    3[BANK0 ] float 
  9763 ;; Auto vars:     Size  Location     Type
  9764 ;;		None
  9765 ;; Return value:  Size  Location     Type
  9766 ;;		None               void
  9767 ;; Registers used:
  9768 ;;		wreg, status,2, status,0
  9769 ;; Tracked objects:
  9770 ;;		On entry : 0/0
  9771 ;;		On exit  : 0/0
  9772 ;;		Unchanged: 0/0
  9773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9774 ;;      Params:         0       6       0       0       0
  9775 ;;      Locals:         0       0       0       0       0
  9776 ;;      Temps:          0       6       0       0       0
  9777 ;;      Totals:         0      12       0       0       0
  9778 ;;Total ram usage:       12 bytes
  9779 ;; Hardware stack levels used:    1
  9780 ;; Hardware stack levels required when called:    1
  9781 ;; This function calls:
  9782 ;;		Nothing
  9783 ;; This function is called by:
  9784 ;;		_sprintf
  9785 ;;		_strtod
  9786 ;; This function uses a non-reentrant model
  9787 ;;
  9788                           
  9789                           
  9790                           ;psect for function ___ftge
  9791  0000'                    ___ftge:	
  9792                           
  9793                           ;incstack = 0
  9794                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  9795  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  9796  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  9797  0002' 1F82'              	btfss	___ftge@ff1+2,7
  9798  0003' 2800'              	goto	l2712
  9799  0004' 3000               	movlw	0
  9800  0005' 0086'              	movwf	??___ftge
  9801  0006' 3000               	movlw	0
  9802  0007' 0087'              	movwf	??___ftge+1
  9803  0008' 3080               	movlw	128
  9804  0009' 0088'              	movwf	??___ftge+2
  9805  000A' 0900'              	comf	___ftge@ff1,w
  9806  000B' 0089'              	movwf	??___ftge+3
  9807  000C' 0901'              	comf	___ftge@ff1+1,w
  9808  000D' 008A'              	movwf	??___ftge+4
  9809  000E' 0902'              	comf	___ftge@ff1+2,w
  9810  000F' 008B'              	movwf	??___ftge+5
  9811  0010' 0A89'              	incf	??___ftge+3,f
  9812  0011' 1903               	skipnz
  9813  0012' 0A8A'              	incf	??___ftge+4,f
  9814  0013' 1903               	skipnz
  9815  0014' 0A8B'              	incf	??___ftge+5,f
  9816  0015' 0809'              	movf	??___ftge+3,w
  9817  0016' 0786'              	addwf	??___ftge,f
  9818  0017' 080A'              	movf	??___ftge+4,w
  9819  0018' 1803               	skipnc
  9820  0019' 0F0A'              	incfsz	??___ftge+4,w
  9821  001A' 2800'              	goto	u3651
  9822  001B' 2800'              	goto	u3652
  9823  001C'                    u3651:	
  9824  001C' 0787'              	addwf	??___ftge+1,f
  9825  001D'                    u3652:	
  9826  001D' 080B'              	movf	??___ftge+5,w
  9827  001E' 1803               	skipnc
  9828  001F' 0F0B'              	incfsz	??___ftge+5,w
  9829  0020' 2800'              	goto	u3653
  9830  0021' 2800'              	goto	u3654
  9831  0022'                    u3653:	
  9832  0022' 0788'              	addwf	??___ftge+2,f
  9833  0023'                    u3654:	
  9834  0023' 0806'              	movf	??___ftge,w
  9835  0024' 0080'              	movwf	___ftge@ff1
  9836  0025' 0807'              	movf	??___ftge+1,w
  9837  0026' 0081'              	movwf	___ftge@ff1+1
  9838  0027' 0808'              	movf	??___ftge+2,w
  9839  0028' 0082'              	movwf	___ftge@ff1+2
  9840  0029'                    l2712:	
  9841  0029' 1F85'              	btfss	___ftge@ff2+2,7
  9842  002A' 2800'              	goto	l2716
  9843  002B' 3000               	movlw	0
  9844  002C' 0086'              	movwf	??___ftge
  9845  002D' 3000               	movlw	0
  9846  002E' 0087'              	movwf	??___ftge+1
  9847  002F' 3080               	movlw	128
  9848  0030' 0088'              	movwf	??___ftge+2
  9849  0031' 0903'              	comf	___ftge@ff2,w
  9850  0032' 0089'              	movwf	??___ftge+3
  9851  0033' 0904'              	comf	___ftge@ff2+1,w
  9852  0034' 008A'              	movwf	??___ftge+4
  9853  0035' 0905'              	comf	___ftge@ff2+2,w
  9854  0036' 008B'              	movwf	??___ftge+5
  9855  0037' 0A89'              	incf	??___ftge+3,f
  9856  0038' 1903               	skipnz
  9857  0039' 0A8A'              	incf	??___ftge+4,f
  9858  003A' 1903               	skipnz
  9859  003B' 0A8B'              	incf	??___ftge+5,f
  9860  003C' 0809'              	movf	??___ftge+3,w
  9861  003D' 0786'              	addwf	??___ftge,f
  9862  003E' 080A'              	movf	??___ftge+4,w
  9863  003F' 1803               	skipnc
  9864  0040' 0F0A'              	incfsz	??___ftge+4,w
  9865  0041' 2800'              	goto	u3671
  9866  0042' 2800'              	goto	u3672
  9867  0043'                    u3671:	
  9868  0043' 0787'              	addwf	??___ftge+1,f
  9869  0044'                    u3672:	
  9870  0044' 080B'              	movf	??___ftge+5,w
  9871  0045' 1803               	skipnc
  9872  0046' 0F0B'              	incfsz	??___ftge+5,w
  9873  0047' 2800'              	goto	u3673
  9874  0048' 2800'              	goto	u3674
  9875  0049'                    u3673:	
  9876  0049' 0788'              	addwf	??___ftge+2,f
  9877  004A'                    u3674:	
  9878  004A' 0806'              	movf	??___ftge,w
  9879  004B' 0083'              	movwf	___ftge@ff2
  9880  004C' 0807'              	movf	??___ftge+1,w
  9881  004D' 0084'              	movwf	___ftge@ff2+1
  9882  004E' 0808'              	movf	??___ftge+2,w
  9883  004F' 0085'              	movwf	___ftge@ff2+2
  9884  0050'                    l2716:	
  9885  0050' 3080               	movlw	128
  9886  0051' 0682'              	xorwf	___ftge@ff1+2,f
  9887  0052' 3080               	movlw	128
  9888  0053' 0685'              	xorwf	___ftge@ff2+2,f
  9889  0054' 0805'              	movf	___ftge@ff2+2,w
  9890  0055' 0202'              	subwf	___ftge@ff1+2,w
  9891  0056' 1D03               	skipz
  9892  0057' 0008               	return
  9893  0058' 0804'              	movf	___ftge@ff2+1,w
  9894  0059' 0201'              	subwf	___ftge@ff1+1,w
  9895  005A' 1D03               	skipz
  9896  005B' 0008               	return
  9897  005C' 0803'              	movf	___ftge@ff2,w
  9898  005D' 0200'              	subwf	___ftge@ff1,w
  9899  005E' 0008               	return
  9900  005F'                    __end_of___ftge:	
  9901                           
  9902                           	psect	text34
  9903  0000'                    __ptext34:	
  9904 ;; *************** function _USART_Init *****************
  9905 ;; Defined at:
  9906 ;;		line 9 in file "USART_Source_File.c"
  9907 ;; Parameters:    Size  Location     Type
  9908 ;;  baud_rate       4   59[BANK0 ] long 
  9909 ;; Auto vars:     Size  Location     Type
  9910 ;;  temp            3   67[BANK0 ] float 
  9911 ;; Return value:  Size  Location     Type
  9912 ;;                  1    wreg      void 
  9913 ;; Registers used:
  9914 ;;		wreg, status,2, status,0, pclath, cstack
  9915 ;; Tracked objects:
  9916 ;;		On entry : 0/0
  9917 ;;		On exit  : 0/0
  9918 ;;		Unchanged: 0/0
  9919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9920 ;;      Params:         0       4       0       0       0
  9921 ;;      Locals:         0       7       0       0       0
  9922 ;;      Temps:          0       0       0       0       0
  9923 ;;      Totals:         0      11       0       0       0
  9924 ;;Total ram usage:       11 bytes
  9925 ;; Hardware stack levels used:    1
  9926 ;; Hardware stack levels required when called:    3
  9927 ;; This function calls:
  9928 ;;		___aldiv
  9929 ;;		___fttol
  9930 ;;		___lbtoft
  9931 ;; This function is called by:
  9932 ;;		_main
  9933 ;; This function uses a non-reentrant model
  9934 ;;
  9935                           
  9936                           
  9937                           ;psect for function _USART_Init
  9938  0000'                    _USART_Init:	
  9939                           
  9940                           ;USART_Source_File.c: 11: float temp;
  9941                           ;USART_Source_File.c: 12: TRISC6=0;
  9942                           
  9943                           ;incstack = 0
  9944                           ; Regs used in _USART_Init: [wreg+status,2+status,0+pclath+cstack]
  9945  0000' 1683               	bsf	3,5	;RP0=1, select bank1
  9946  0001' 1303               	bcf	3,6	;RP1=0, select bank1
  9947  0002' 1307               	bcf	7,6	;volatile
  9948                           
  9949                           ;USART_Source_File.c: 13: TRISC7=1;
  9950  0003' 1787               	bsf	7,7	;volatile
  9951                           
  9952                           ;USART_Source_File.c: 14: temp=(unsigned char) (((8000000 / baud_rate) / 64) - 1);
  9953  0004' 1283               	bcf	3,5	;RP0=0, select bank0
  9954  0005' 1303               	bcf	3,6	;RP1=0, select bank0
  9955  0006' 083E'              	movf	USART_Init@baud_rate+3,w
  9956  0007' 0083'              	movwf	___aldiv@divisor+3
  9957  0008' 083D'              	movf	USART_Init@baud_rate+2,w
  9958  0009' 0082'              	movwf	___aldiv@divisor+2
  9959  000A' 083C'              	movf	USART_Init@baud_rate+1,w
  9960  000B' 0081'              	movwf	___aldiv@divisor+1
  9961  000C' 083B'              	movf	USART_Init@baud_rate,w
  9962  000D' 0080'              	movwf	___aldiv@divisor
  9963  000E' 3000               	movlw	0
  9964  000F' 0087'              	movwf	___aldiv@dividend+3
  9965  0010' 307A               	movlw	122
  9966  0011' 0086'              	movwf	___aldiv@dividend+2
  9967  0012' 3012               	movlw	18
  9968  0013' 0085'              	movwf	___aldiv@dividend+1
  9969  0014' 3000               	movlw	0
  9970  0015' 0084'              	movwf	___aldiv@dividend
  9971  0016' 120A' 118A' 2000' 120A' 118A' 	fcall	___aldiv
  9972  001B' 1283               	bcf	3,5	;RP0=0, select bank0
  9973  001C' 1303               	bcf	3,6	;RP1=0, select bank0
  9974  001D' 0803'              	movf	?___aldiv+3,w
  9975  001E' 00C2'              	movwf	_USART_Init$829+3
  9976  001F' 0802'              	movf	?___aldiv+2,w
  9977  0020' 00C1'              	movwf	_USART_Init$829+2
  9978  0021' 0801'              	movf	?___aldiv+1,w
  9979  0022' 00C0'              	movwf	_USART_Init$829+1
  9980  0023' 0800'              	movf	?___aldiv,w
  9981  0024' 00BF'              	movwf	_USART_Init$829
  9982                           
  9983                           ;USART_Source_File.c: 14: temp=(unsigned char) (((8000000 / baud_rate) / 64) - 1);
  9984  0025' 3000               	movlw	0
  9985  0026' 0083'              	movwf	___aldiv@divisor+3
  9986  0027' 3000               	movlw	0
  9987  0028' 0082'              	movwf	___aldiv@divisor+2
  9988  0029' 3000               	movlw	0
  9989  002A' 0081'              	movwf	___aldiv@divisor+1
  9990  002B' 3040               	movlw	64
  9991  002C' 0080'              	movwf	___aldiv@divisor
  9992  002D' 0842'              	movf	_USART_Init$829+3,w
  9993  002E' 0087'              	movwf	___aldiv@dividend+3
  9994  002F' 0841'              	movf	_USART_Init$829+2,w
  9995  0030' 0086'              	movwf	___aldiv@dividend+2
  9996  0031' 0840'              	movf	_USART_Init$829+1,w
  9997  0032' 0085'              	movwf	___aldiv@dividend+1
  9998  0033' 083F'              	movf	_USART_Init$829,w
  9999  0034' 0084'              	movwf	___aldiv@dividend
 10000  0035' 120A' 118A' 2000' 120A' 118A' 	fcall	___aldiv
 10001  003A' 1283               	bcf	3,5	;RP0=0, select bank0
 10002  003B' 1303               	bcf	3,6	;RP1=0, select bank0
 10003  003C' 0800'              	movf	?___aldiv,w
 10004  003D' 3EFF               	addlw	255
 10005  003E' 120A' 118A' 2000' 120A' 118A' 	fcall	___lbtoft
 10006  0043' 1283               	bcf	3,5	;RP0=0, select bank0
 10007  0044' 1303               	bcf	3,6	;RP1=0, select bank0
 10008  0045' 0808'              	movf	?___lbtoft,w
 10009  0046' 00C3'              	movwf	USART_Init@temp
 10010  0047' 0809'              	movf	?___lbtoft+1,w
 10011  0048' 00C4'              	movwf	USART_Init@temp+1
 10012  0049' 080A'              	movf	?___lbtoft+2,w
 10013  004A' 00C5'              	movwf	USART_Init@temp+2
 10014                           
 10015                           ;USART_Source_File.c: 15: SPBRG=(int)temp;
 10016  004B' 0843'              	movf	USART_Init@temp,w
 10017  004C' 00AD'              	movwf	___fttol@f1
 10018  004D' 0844'              	movf	USART_Init@temp+1,w
 10019  004E' 00AE'              	movwf	___fttol@f1+1
 10020  004F' 0845'              	movf	USART_Init@temp+2,w
 10021  0050' 00AF'              	movwf	___fttol@f1+2
 10022  0051' 120A' 118A' 2000'  	fcall	___fttol
 10023  0054' 1283               	bcf	3,5	;RP0=0, select bank0
 10024  0055' 1303               	bcf	3,6	;RP1=0, select bank0
 10025  0056' 082D'              	movf	?___fttol,w
 10026  0057' 1683               	bsf	3,5	;RP0=1, select bank1
 10027  0058' 1303               	bcf	3,6	;RP1=0, select bank1
 10028  0059' 0099               	movwf	25	;volatile
 10029                           
 10030                           ;USART_Source_File.c: 16: TXSTA=0x20;
 10031  005A' 3020               	movlw	32
 10032  005B' 0098               	movwf	24	;volatile
 10033                           
 10034                           ;USART_Source_File.c: 17: RCSTA=0x90;
 10035  005C' 3090               	movlw	144
 10036  005D' 1283               	bcf	3,5	;RP0=0, select bank0
 10037  005E' 1303               	bcf	3,6	;RP1=0, select bank0
 10038  005F' 0098               	movwf	24	;volatile
 10039  0060' 0008               	return
 10040  0061'                    __end_of_USART_Init:	
 10041                           
 10042                           	psect	text35
 10043  0000'                    __ptext35:	
 10044 ;; *************** function ___lbtoft *****************
 10045 ;; Defined at:
 10046 ;;		line 27 in file "D:\mplab\sources\common\lbtoft.c"
 10047 ;; Parameters:    Size  Location     Type
 10048 ;;  c               1    wreg     unsigned char 
 10049 ;; Auto vars:     Size  Location     Type
 10050 ;;  c               1   15[BANK0 ] unsigned char 
 10051 ;; Return value:  Size  Location     Type
 10052 ;;                  3    8[BANK0 ] float 
 10053 ;; Registers used:
 10054 ;;		wreg, status,2, status,0, pclath, cstack
 10055 ;; Tracked objects:
 10056 ;;		On entry : 0/0
 10057 ;;		On exit  : 0/0
 10058 ;;		Unchanged: 0/0
 10059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10060 ;;      Params:         0       3       0       0       0
 10061 ;;      Locals:         0       1       0       0       0
 10062 ;;      Temps:          0       4       0       0       0
 10063 ;;      Totals:         0       8       0       0       0
 10064 ;;Total ram usage:        8 bytes
 10065 ;; Hardware stack levels used:    1
 10066 ;; Hardware stack levels required when called:    2
 10067 ;; This function calls:
 10068 ;;		___ftpack
 10069 ;; This function is called by:
 10070 ;;		_USART_Init
 10071 ;; This function uses a non-reentrant model
 10072 ;;
 10073                           
 10074                           
 10075                           ;psect for function ___lbtoft
 10076  0000'                    ___lbtoft:	
 10077                           
 10078                           ;incstack = 0
 10079                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
 10080                           ;___lbtoft@c stored from wreg
 10081  0000' 1283               	bcf	3,5	;RP0=0, select bank0
 10082  0001' 1303               	bcf	3,6	;RP1=0, select bank0
 10083  0002' 008F'              	movwf	___lbtoft@c
 10084  0003' 080F'              	movf	___lbtoft@c,w
 10085  0004' 008B'              	movwf	??___lbtoft
 10086  0005' 018C'              	clrf	??___lbtoft+1
 10087  0006' 018D'              	clrf	??___lbtoft+2
 10088  0007' 080B'              	movf	??___lbtoft,w
 10089  0008' 0080'              	movwf	___ftpack@arg
 10090  0009' 080C'              	movf	??___lbtoft+1,w
 10091  000A' 0081'              	movwf	___ftpack@arg+1
 10092  000B' 080D'              	movf	??___lbtoft+2,w
 10093  000C' 0082'              	movwf	___ftpack@arg+2
 10094  000D' 308E               	movlw	142
 10095  000E' 008E'              	movwf	??___lbtoft+3
 10096  000F' 080E'              	movf	??___lbtoft+3,w
 10097  0010' 0083'              	movwf	___ftpack@exp
 10098  0011' 0184'              	clrf	___ftpack@sign
 10099  0012' 120A' 118A' 2000'  	fcall	___ftpack
 10100  0015' 1283               	bcf	3,5	;RP0=0, select bank0
 10101  0016' 1303               	bcf	3,6	;RP1=0, select bank0
 10102  0017' 0800'              	movf	?___ftpack,w
 10103  0018' 0088'              	movwf	?___lbtoft
 10104  0019' 0801'              	movf	?___ftpack+1,w
 10105  001A' 0089'              	movwf	?___lbtoft+1
 10106  001B' 0802'              	movf	?___ftpack+2,w
 10107  001C' 008A'              	movwf	?___lbtoft+2
 10108  001D' 0008               	return
 10109  001E'                    __end_of___lbtoft:	
 10110                           
 10111                           	psect	text36
 10112  0000'                    __ptext36:	
 10113 ;; *************** function ___ftpack *****************
 10114 ;; Defined at:
 10115 ;;		line 62 in file "D:\mplab\sources\common\float.c"
 10116 ;; Parameters:    Size  Location     Type
 10117 ;;  arg             3    0[BANK0 ] unsigned um
 10118 ;;  exp             1    3[BANK0 ] unsigned char 
 10119 ;;  sign            1    4[BANK0 ] unsigned char 
 10120 ;; Auto vars:     Size  Location     Type
 10121 ;;		None
 10122 ;; Return value:  Size  Location     Type
 10123 ;;                  3    0[BANK0 ] float 
 10124 ;; Registers used:
 10125 ;;		wreg, status,2, status,0
 10126 ;; Tracked objects:
 10127 ;;		On entry : 0/0
 10128 ;;		On exit  : 0/0
 10129 ;;		Unchanged: 0/0
 10130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10131 ;;      Params:         0       5       0       0       0
 10132 ;;      Locals:         0       0       0       0       0
 10133 ;;      Temps:          0       3       0       0       0
 10134 ;;      Totals:         0       8       0       0       0
 10135 ;;Total ram usage:        8 bytes
 10136 ;; Hardware stack levels used:    1
 10137 ;; Hardware stack levels required when called:    1
 10138 ;; This function calls:
 10139 ;;		Nothing
 10140 ;; This function is called by:
 10141 ;;		___altoft
 10142 ;;		___awtoft
 10143 ;;		___ftadd
 10144 ;;		___ftdiv
 10145 ;;		___ftmul
 10146 ;;		___lbtoft
 10147 ;;		___lltoft
 10148 ;; This function uses a non-reentrant model
 10149 ;;
 10150                           
 10151                           
 10152                           ;psect for function ___ftpack
 10153  0000'                    ___ftpack:	
 10154                           
 10155                           ;incstack = 0
 10156                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 10157  0000' 1283               	bcf	3,5	;RP0=0, select bank0
 10158  0001' 1303               	bcf	3,6	;RP1=0, select bank0
 10159  0002' 0803'              	movf	___ftpack@exp,w
 10160  0003' 1903               	btfsc	3,2
 10161  0004' 2800'              	goto	l3870
 10162  0005' 0802'              	movf	___ftpack@arg+2,w
 10163  0006' 0401'              	iorwf	___ftpack@arg+1,w
 10164  0007' 0400'              	iorwf	___ftpack@arg,w
 10165  0008' 1D03               	skipz
 10166  0009' 2800'              	goto	l3876
 10167  000A'                    l3870:	
 10168  000A' 3000               	movlw	0
 10169  000B' 0080'              	movwf	?___ftpack
 10170  000C' 3000               	movlw	0
 10171  000D' 0081'              	movwf	?___ftpack+1
 10172  000E' 3000               	movlw	0
 10173  000F' 0082'              	movwf	?___ftpack+2
 10174  0010' 0008               	return
 10175  0011'                    l3874:	
 10176  0011' 3001               	movlw	1
 10177  0012' 0085'              	movwf	??___ftpack
 10178  0013' 0805'              	movf	??___ftpack,w
 10179  0014' 0783'              	addwf	___ftpack@exp,f
 10180  0015' 3001               	movlw	1
 10181  0016'                    u5675:	
 10182  0016' 1003               	clrc
 10183  0017' 0C82'              	rrf	___ftpack@arg+2,f
 10184  0018' 0C81'              	rrf	___ftpack@arg+1,f
 10185  0019' 0C80'              	rrf	___ftpack@arg,f
 10186  001A' 3EFF               	addlw	-1
 10187  001B' 1D03               	skipz
 10188  001C' 2800'              	goto	u5675
 10189  001D'                    l3876:	
 10190  001D' 30FE               	movlw	254
 10191  001E' 0502'              	andwf	___ftpack@arg+2,w
 10192  001F' 1903               	btfsc	3,2
 10193  0020' 2800'              	goto	l654
 10194  0021' 2800'              	goto	l3874
 10195  0022'                    l3878:	
 10196  0022' 3001               	movlw	1
 10197  0023' 0085'              	movwf	??___ftpack
 10198  0024' 0805'              	movf	??___ftpack,w
 10199  0025' 0783'              	addwf	___ftpack@exp,f
 10200  0026' 3001               	movlw	1
 10201  0027' 0780'              	addwf	___ftpack@arg,f
 10202  0028' 3000               	movlw	0
 10203  0029' 1803               	skipnc
 10204  002A' 3001               	movlw	1
 10205  002B' 0781'              	addwf	___ftpack@arg+1,f
 10206  002C' 3000               	movlw	0
 10207  002D' 1803               	skipnc
 10208  002E' 3001               	movlw	1
 10209  002F' 0782'              	addwf	___ftpack@arg+2,f
 10210  0030' 3001               	movlw	1
 10211  0031'                    u5695:	
 10212  0031' 1003               	clrc
 10213  0032' 0C82'              	rrf	___ftpack@arg+2,f
 10214  0033' 0C81'              	rrf	___ftpack@arg+1,f
 10215  0034' 0C80'              	rrf	___ftpack@arg,f
 10216  0035' 3EFF               	addlw	-1
 10217  0036' 1D03               	skipz
 10218  0037' 2800'              	goto	u5695
 10219  0038'                    l654:	
 10220  0038' 30FF               	movlw	255
 10221  0039' 0502'              	andwf	___ftpack@arg+2,w
 10222  003A' 1903               	btfsc	3,2
 10223  003B' 2800'              	goto	l3886
 10224  003C' 2800'              	goto	l3878
 10225  003D'                    l3884:	
 10226  003D' 3001               	movlw	1
 10227  003E' 0283'              	subwf	___ftpack@exp,f
 10228  003F' 3001               	movlw	1
 10229  0040'                    u5715:	
 10230  0040' 1003               	clrc
 10231  0041' 0D80'              	rlf	___ftpack@arg,f
 10232  0042' 0D81'              	rlf	___ftpack@arg+1,f
 10233  0043' 0D82'              	rlf	___ftpack@arg+2,f
 10234  0044' 3EFF               	addlw	-1
 10235  0045' 1D03               	skipz
 10236  0046' 2800'              	goto	u5715
 10237  0047'                    l3886:	
 10238  0047' 1B81'              	btfsc	___ftpack@arg+1,7
 10239  0048' 2800'              	goto	l661
 10240  0049' 3002               	movlw	2
 10241  004A' 0203'              	subwf	___ftpack@exp,w
 10242  004B' 1803               	skipnc
 10243  004C' 2800'              	goto	l3884
 10244  004D'                    l661:	
 10245  004D' 1803'              	btfsc	___ftpack@exp,0
 10246  004E' 2800'              	goto	l662
 10247  004F' 30FF               	movlw	255
 10248  0050' 0580'              	andwf	___ftpack@arg,f
 10249  0051' 307F               	movlw	127
 10250  0052' 0581'              	andwf	___ftpack@arg+1,f
 10251  0053' 30FF               	movlw	255
 10252  0054' 0582'              	andwf	___ftpack@arg+2,f
 10253  0055'                    l662:	
 10254  0055' 1003               	clrc
 10255  0056' 0C83'              	rrf	___ftpack@exp,f
 10256  0057' 0803'              	movf	___ftpack@exp,w
 10257  0058' 0085'              	movwf	??___ftpack
 10258  0059' 0186'              	clrf	??___ftpack+1
 10259  005A' 0187'              	clrf	??___ftpack+2
 10260  005B' 3010               	movlw	16
 10261  005C'                    u5755:	
 10262  005C' 1003               	clrc
 10263  005D' 0D85'              	rlf	??___ftpack,f
 10264  005E' 0D86'              	rlf	??___ftpack+1,f
 10265  005F' 0D87'              	rlf	??___ftpack+2,f
 10266  0060' 3EFF               	addlw	-1
 10267  0061' 1D03               	skipz
 10268  0062' 2800'              	goto	u5755
 10269  0063' 0805'              	movf	??___ftpack,w
 10270  0064' 0480'              	iorwf	___ftpack@arg,f
 10271  0065' 0806'              	movf	??___ftpack+1,w
 10272  0066' 0481'              	iorwf	___ftpack@arg+1,f
 10273  0067' 0807'              	movf	??___ftpack+2,w
 10274  0068' 0482'              	iorwf	___ftpack@arg+2,f
 10275  0069' 0804'              	movf	___ftpack@sign,w
 10276  006A' 1903               	btfsc	3,2
 10277  006B' 0008               	return
 10278  006C' 1782'              	bsf	___ftpack@arg+2,7
 10279  006D' 0008               	return
 10280  006E'                    __end_of___ftpack:	
 10281                           
 10282                           	psect	text37
 10283  0000'                    __ptext37:	
 10284 ;; *************** function ___fttol *****************
 10285 ;; Defined at:
 10286 ;;		line 44 in file "D:\mplab\sources\common\fttol.c"
 10287 ;; Parameters:    Size  Location     Type
 10288 ;;  f1              3   45[BANK0 ] float 
 10289 ;; Auto vars:     Size  Location     Type
 10290 ;;  lval            4   54[BANK0 ] unsigned long 
 10291 ;;  exp1            1   58[BANK0 ] unsigned char 
 10292 ;;  sign1           1   53[BANK0 ] unsigned char 
 10293 ;; Return value:  Size  Location     Type
 10294 ;;                  4   45[BANK0 ] long 
 10295 ;; Registers used:
 10296 ;;		wreg, status,2, status,0
 10297 ;; Tracked objects:
 10298 ;;		On entry : 0/0
 10299 ;;		On exit  : 0/0
 10300 ;;		Unchanged: 0/0
 10301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10302 ;;      Params:         0       4       0       0       0
 10303 ;;      Locals:         0       6       0       0       0
 10304 ;;      Temps:          0       4       0       0       0
 10305 ;;      Totals:         0      14       0       0       0
 10306 ;;Total ram usage:       14 bytes
 10307 ;; Hardware stack levels used:    1
 10308 ;; Hardware stack levels required when called:    1
 10309 ;; This function calls:
 10310 ;;		Nothing
 10311 ;; This function is called by:
 10312 ;;		_convert_to_degrees
 10313 ;;		_USART_Init
 10314 ;;		_sprintf
 10315 ;; This function uses a non-reentrant model
 10316 ;;
 10317                           
 10318                           
 10319                           ;psect for function ___fttol
 10320  0000'                    ___fttol:	
 10321                           
 10322                           ;incstack = 0
 10323                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 10324  0000' 1283               	bcf	3,5	;RP0=0, select bank0
 10325  0001' 1303               	bcf	3,6	;RP1=0, select bank0
 10326  0002' 082D'              	movf	___fttol@f1,w
 10327  0003' 00B1'              	movwf	??___fttol
 10328  0004' 082E'              	movf	___fttol@f1+1,w
 10329  0005' 00B2'              	movwf	??___fttol+1
 10330  0006' 082F'              	movf	___fttol@f1+2,w
 10331  0007' 00B3'              	movwf	??___fttol+2
 10332  0008' 1003               	clrc
 10333  0009' 0D32'              	rlf	??___fttol+1,w
 10334  000A' 0D33'              	rlf	??___fttol+2,w
 10335  000B' 00B4'              	movwf	??___fttol+3
 10336  000C' 0834'              	movf	??___fttol+3,w
 10337  000D' 00BA'              	movwf	___fttol@exp1
 10338  000E' 083A'              	movf	___fttol@exp1,w
 10339  000F' 1D03               	btfss	3,2
 10340  0010' 2800'              	goto	l3188
 10341  0011' 3000               	movlw	0
 10342  0012' 00B0'              	movwf	?___fttol+3
 10343  0013' 3000               	movlw	0
 10344  0014' 00AF'              	movwf	?___fttol+2
 10345  0015' 3000               	movlw	0
 10346  0016' 00AE'              	movwf	?___fttol+1
 10347  0017' 3000               	movlw	0
 10348  0018' 00AD'              	movwf	?___fttol
 10349  0019' 0008               	return
 10350  001A'                    l3188:	
 10351  001A' 082D'              	movf	___fttol@f1,w
 10352  001B' 00B1'              	movwf	??___fttol
 10353  001C' 082E'              	movf	___fttol@f1+1,w
 10354  001D' 00B2'              	movwf	??___fttol+1
 10355  001E' 082F'              	movf	___fttol@f1+2,w
 10356  001F' 00B3'              	movwf	??___fttol+2
 10357  0020' 3017               	movlw	23
 10358  0021'                    u4565:	
 10359  0021' 1003               	clrc
 10360  0022' 0CB3'              	rrf	??___fttol+2,f
 10361  0023' 0CB2'              	rrf	??___fttol+1,f
 10362  0024' 0CB1'              	rrf	??___fttol,f
 10363  0025' 3EFF               	addlw	-1
 10364  0026' 1D03               	skipz
 10365  0027' 2800'              	goto	u4565
 10366  0028' 0831'              	movf	??___fttol,w
 10367  0029' 00B4'              	movwf	??___fttol+3
 10368  002A' 0834'              	movf	??___fttol+3,w
 10369  002B' 00B5'              	movwf	___fttol@sign1
 10370  002C' 17AE'              	bsf	___fttol@f1+1,7
 10371  002D' 30FF               	movlw	255
 10372  002E' 05AD'              	andwf	___fttol@f1,f
 10373  002F' 30FF               	movlw	255
 10374  0030' 05AE'              	andwf	___fttol@f1+1,f
 10375  0031' 3000               	movlw	0
 10376  0032' 05AF'              	andwf	___fttol@f1+2,f
 10377  0033' 082D'              	movf	___fttol@f1,w
 10378  0034' 00B6'              	movwf	___fttol@lval
 10379  0035' 082E'              	movf	___fttol@f1+1,w
 10380  0036' 00B7'              	movwf	___fttol@lval+1
 10381  0037' 082F'              	movf	___fttol@f1+2,w
 10382  0038' 00B8'              	movwf	___fttol@lval+2
 10383  0039' 01B9'              	clrf	___fttol@lval+3
 10384  003A' 308E               	movlw	142
 10385  003B' 02BA'              	subwf	___fttol@exp1,f
 10386  003C' 1FBA'              	btfss	___fttol@exp1,7
 10387  003D' 2800'              	goto	l3208
 10388  003E' 083A'              	movf	___fttol@exp1,w
 10389  003F' 3A80               	xorlw	128
 10390  0040' 3E8F               	addlw	143
 10391  0041' 1803               	skipnc
 10392  0042' 2800'              	goto	l3206
 10393  0043' 3000               	movlw	0
 10394  0044' 00B0'              	movwf	?___fttol+3
 10395  0045' 3000               	movlw	0
 10396  0046' 00AF'              	movwf	?___fttol+2
 10397  0047' 3000               	movlw	0
 10398  0048' 00AE'              	movwf	?___fttol+1
 10399  0049' 3000               	movlw	0
 10400  004A' 00AD'              	movwf	?___fttol
 10401  004B' 0008               	return
 10402  004C'                    l3206:	
 10403  004C' 3001               	movlw	1
 10404  004D'                    u4595:	
 10405  004D' 1003               	clrc
 10406  004E' 0CB9'              	rrf	___fttol@lval+3,f
 10407  004F' 0CB8'              	rrf	___fttol@lval+2,f
 10408  0050' 0CB7'              	rrf	___fttol@lval+1,f
 10409  0051' 0CB6'              	rrf	___fttol@lval,f
 10410  0052' 3EFF               	addlw	-1
 10411  0053' 1D03               	skipz
 10412  0054' 2800'              	goto	u4595
 10413  0055' 3001               	movlw	1
 10414  0056' 00B1'              	movwf	??___fttol
 10415  0057' 0831'              	movf	??___fttol,w
 10416  0058' 07BA'              	addwf	___fttol@exp1,f
 10417  0059' 1903               	btfsc	3,2
 10418  005A' 2800'              	goto	l3216
 10419  005B' 2800'              	goto	l3206
 10420  005C'                    l3208:	
 10421  005C' 3018               	movlw	24
 10422  005D' 023A'              	subwf	___fttol@exp1,w
 10423  005E' 1C03               	skipc
 10424  005F' 2800'              	goto	l762
 10425  0060' 3000               	movlw	0
 10426  0061' 00B0'              	movwf	?___fttol+3
 10427  0062' 3000               	movlw	0
 10428  0063' 00AF'              	movwf	?___fttol+2
 10429  0064' 3000               	movlw	0
 10430  0065' 00AE'              	movwf	?___fttol+1
 10431  0066' 3000               	movlw	0
 10432  0067' 00AD'              	movwf	?___fttol
 10433  0068' 0008               	return
 10434  0069'                    l3214:	
 10435  0069' 3001               	movlw	1
 10436  006A' 00B1'              	movwf	??___fttol
 10437  006B'                    u4625:	
 10438  006B' 1003               	clrc
 10439  006C' 0DB6'              	rlf	___fttol@lval,f
 10440  006D' 0DB7'              	rlf	___fttol@lval+1,f
 10441  006E' 0DB8'              	rlf	___fttol@lval+2,f
 10442  006F' 0DB9'              	rlf	___fttol@lval+3,f
 10443  0070' 0BB1'              	decfsz	??___fttol,f
 10444  0071' 2800'              	goto	u4625
 10445  0072' 3001               	movlw	1
 10446  0073' 02BA'              	subwf	___fttol@exp1,f
 10447  0074'                    l762:	
 10448  0074' 083A'              	movf	___fttol@exp1,w
 10449  0075' 1D03               	btfss	3,2
 10450  0076' 2800'              	goto	l3214
 10451  0077'                    l3216:	
 10452  0077' 0835'              	movf	___fttol@sign1,w
 10453  0078' 1903               	btfsc	3,2
 10454  0079' 2800'              	goto	l3220
 10455  007A' 09B6'              	comf	___fttol@lval,f
 10456  007B' 09B7'              	comf	___fttol@lval+1,f
 10457  007C' 09B8'              	comf	___fttol@lval+2,f
 10458  007D' 09B9'              	comf	___fttol@lval+3,f
 10459  007E' 0AB6'              	incf	___fttol@lval,f
 10460  007F' 1903               	skipnz
 10461  0080' 0AB7'              	incf	___fttol@lval+1,f
 10462  0081' 1903               	skipnz
 10463  0082' 0AB8'              	incf	___fttol@lval+2,f
 10464  0083' 1903               	skipnz
 10465  0084' 0AB9'              	incf	___fttol@lval+3,f
 10466  0085'                    l3220:	
 10467  0085' 0839'              	movf	___fttol@lval+3,w
 10468  0086' 00B0'              	movwf	?___fttol+3
 10469  0087' 0838'              	movf	___fttol@lval+2,w
 10470  0088' 00AF'              	movwf	?___fttol+2
 10471  0089' 0837'              	movf	___fttol@lval+1,w
 10472  008A' 00AE'              	movwf	?___fttol+1
 10473  008B' 0836'              	movf	___fttol@lval,w
 10474  008C' 00AD'              	movwf	?___fttol
 10475  008D' 0008               	return
 10476  008E'                    __end_of___fttol:	
 10477                           
 10478                           	psect	text38
 10479  0000'                    __ptext38:	
 10480 ;; *************** function ___aldiv *****************
 10481 ;; Defined at:
 10482 ;;		line 6 in file "D:\mplab\sources\common\aldiv.c"
 10483 ;; Parameters:    Size  Location     Type
 10484 ;;  divisor         4    0[BANK0 ] long 
 10485 ;;  dividend        4    4[BANK0 ] long 
 10486 ;; Auto vars:     Size  Location     Type
 10487 ;;  quotient        4   11[BANK0 ] long 
 10488 ;;  sign            1   10[BANK0 ] unsigned char 
 10489 ;;  counter         1    9[BANK0 ] unsigned char 
 10490 ;; Return value:  Size  Location     Type
 10491 ;;                  4    0[BANK0 ] long 
 10492 ;; Registers used:
 10493 ;;		wreg, status,2, status,0
 10494 ;; Tracked objects:
 10495 ;;		On entry : 0/0
 10496 ;;		On exit  : 0/0
 10497 ;;		Unchanged: 0/0
 10498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10499 ;;      Params:         0       8       0       0       0
 10500 ;;      Locals:         0       6       0       0       0
 10501 ;;      Temps:          0       1       0       0       0
 10502 ;;      Totals:         0      15       0       0       0
 10503 ;;Total ram usage:       15 bytes
 10504 ;; Hardware stack levels used:    1
 10505 ;; Hardware stack levels required when called:    1
 10506 ;; This function calls:
 10507 ;;		Nothing
 10508 ;; This function is called by:
 10509 ;;		_USART_Init
 10510 ;; This function uses a non-reentrant model
 10511 ;;
 10512                           
 10513                           
 10514                           ;psect for function ___aldiv
 10515  0000'                    ___aldiv:	
 10516                           
 10517                           ;incstack = 0
 10518                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 10519  0000' 1283               	bcf	3,5	;RP0=0, select bank0
 10520  0001' 1303               	bcf	3,6	;RP1=0, select bank0
 10521  0002' 018A'              	clrf	___aldiv@sign
 10522  0003' 1F83'              	btfss	___aldiv@divisor+3,7
 10523  0004' 2800'              	goto	l428
 10524  0005' 0980'              	comf	___aldiv@divisor,f
 10525  0006' 0981'              	comf	___aldiv@divisor+1,f
 10526  0007' 0982'              	comf	___aldiv@divisor+2,f
 10527  0008' 0983'              	comf	___aldiv@divisor+3,f
 10528  0009' 0A80'              	incf	___aldiv@divisor,f
 10529  000A' 1903               	skipnz
 10530  000B' 0A81'              	incf	___aldiv@divisor+1,f
 10531  000C' 1903               	skipnz
 10532  000D' 0A82'              	incf	___aldiv@divisor+2,f
 10533  000E' 1903               	skipnz
 10534  000F' 0A83'              	incf	___aldiv@divisor+3,f
 10535  0010' 018A'              	clrf	___aldiv@sign
 10536  0011' 0A8A'              	incf	___aldiv@sign,f
 10537  0012'                    l428:	
 10538  0012' 1F87'              	btfss	___aldiv@dividend+3,7
 10539  0013' 2800'              	goto	l4850
 10540  0014' 0984'              	comf	___aldiv@dividend,f
 10541  0015' 0985'              	comf	___aldiv@dividend+1,f
 10542  0016' 0986'              	comf	___aldiv@dividend+2,f
 10543  0017' 0987'              	comf	___aldiv@dividend+3,f
 10544  0018' 0A84'              	incf	___aldiv@dividend,f
 10545  0019' 1903               	skipnz
 10546  001A' 0A85'              	incf	___aldiv@dividend+1,f
 10547  001B' 1903               	skipnz
 10548  001C' 0A86'              	incf	___aldiv@dividend+2,f
 10549  001D' 1903               	skipnz
 10550  001E' 0A87'              	incf	___aldiv@dividend+3,f
 10551  001F' 3001               	movlw	1
 10552  0020' 0088'              	movwf	??___aldiv
 10553  0021' 0808'              	movf	??___aldiv,w
 10554  0022' 068A'              	xorwf	___aldiv@sign,f
 10555  0023'                    l4850:	
 10556  0023' 3000               	movlw	0
 10557  0024' 008E'              	movwf	___aldiv@quotient+3
 10558  0025' 3000               	movlw	0
 10559  0026' 008D'              	movwf	___aldiv@quotient+2
 10560  0027' 3000               	movlw	0
 10561  0028' 008C'              	movwf	___aldiv@quotient+1
 10562  0029' 3000               	movlw	0
 10563  002A' 008B'              	movwf	___aldiv@quotient
 10564  002B' 0803'              	movf	___aldiv@divisor+3,w
 10565  002C' 0402'              	iorwf	___aldiv@divisor+2,w
 10566  002D' 0401'              	iorwf	___aldiv@divisor+1,w
 10567  002E' 0400'              	iorwf	___aldiv@divisor,w
 10568  002F' 1903               	skipnz
 10569  0030' 2800'              	goto	l4872
 10570  0031' 0189'              	clrf	___aldiv@counter
 10571  0032' 0A89'              	incf	___aldiv@counter,f
 10572  0033'                    l4858:	
 10573  0033' 1B83'              	btfsc	___aldiv@divisor+3,7
 10574  0034' 2800'              	goto	l4860
 10575  0035' 3001               	movlw	1
 10576  0036' 0088'              	movwf	??___aldiv
 10577  0037'                    u7685:	
 10578  0037' 1003               	clrc
 10579  0038' 0D80'              	rlf	___aldiv@divisor,f
 10580  0039' 0D81'              	rlf	___aldiv@divisor+1,f
 10581  003A' 0D82'              	rlf	___aldiv@divisor+2,f
 10582  003B' 0D83'              	rlf	___aldiv@divisor+3,f
 10583  003C' 0B88'              	decfsz	??___aldiv,f
 10584  003D' 2800'              	goto	u7685
 10585  003E' 3001               	movlw	1
 10586  003F' 0088'              	movwf	??___aldiv
 10587  0040' 0808'              	movf	??___aldiv,w
 10588  0041' 0789'              	addwf	___aldiv@counter,f
 10589  0042' 2800'              	goto	l4858
 10590  0043'                    l4860:	
 10591  0043' 3001               	movlw	1
 10592  0044' 0088'              	movwf	??___aldiv
 10593  0045'                    u7705:	
 10594  0045' 1003               	clrc
 10595  0046' 0D8B'              	rlf	___aldiv@quotient,f
 10596  0047' 0D8C'              	rlf	___aldiv@quotient+1,f
 10597  0048' 0D8D'              	rlf	___aldiv@quotient+2,f
 10598  0049' 0D8E'              	rlf	___aldiv@quotient+3,f
 10599  004A' 0B88'              	decfsz	??___aldiv,f
 10600  004B' 2800'              	goto	u7705
 10601  004C' 0803'              	movf	___aldiv@divisor+3,w
 10602  004D' 0207'              	subwf	___aldiv@dividend+3,w
 10603  004E' 1D03               	skipz
 10604  004F' 2800'              	goto	u7715
 10605  0050' 0802'              	movf	___aldiv@divisor+2,w
 10606  0051' 0206'              	subwf	___aldiv@dividend+2,w
 10607  0052' 1D03               	skipz
 10608  0053' 2800'              	goto	u7715
 10609  0054' 0801'              	movf	___aldiv@divisor+1,w
 10610  0055' 0205'              	subwf	___aldiv@dividend+1,w
 10611  0056' 1D03               	skipz
 10612  0057' 2800'              	goto	u7715
 10613  0058' 0800'              	movf	___aldiv@divisor,w
 10614  0059' 0204'              	subwf	___aldiv@dividend,w
 10615  005A'                    u7715:	
 10616  005A' 1C03               	skipc
 10617  005B' 2800'              	goto	l4868
 10618  005C' 0800'              	movf	___aldiv@divisor,w
 10619  005D' 0284'              	subwf	___aldiv@dividend,f
 10620  005E' 0801'              	movf	___aldiv@divisor+1,w
 10621  005F' 1C03               	skipc
 10622  0060' 0F01'              	incfsz	___aldiv@divisor+1,w
 10623  0061' 0285'              	subwf	___aldiv@dividend+1,f
 10624  0062' 0802'              	movf	___aldiv@divisor+2,w
 10625  0063' 1C03               	skipc
 10626  0064' 0F02'              	incfsz	___aldiv@divisor+2,w
 10627  0065' 0286'              	subwf	___aldiv@dividend+2,f
 10628  0066' 0803'              	movf	___aldiv@divisor+3,w
 10629  0067' 1C03               	skipc
 10630  0068' 0F03'              	incfsz	___aldiv@divisor+3,w
 10631  0069' 0287'              	subwf	___aldiv@dividend+3,f
 10632  006A' 140B'              	bsf	___aldiv@quotient,0
 10633  006B'                    l4868:	
 10634  006B' 3001               	movlw	1
 10635  006C'                    u7725:	
 10636  006C' 1003               	clrc
 10637  006D' 0C83'              	rrf	___aldiv@divisor+3,f
 10638  006E' 0C82'              	rrf	___aldiv@divisor+2,f
 10639  006F' 0C81'              	rrf	___aldiv@divisor+1,f
 10640  0070' 0C80'              	rrf	___aldiv@divisor,f
 10641  0071' 3EFF               	addlw	-1
 10642  0072' 1D03               	skipz
 10643  0073' 2800'              	goto	u7725
 10644  0074' 3001               	movlw	1
 10645  0075' 0289'              	subwf	___aldiv@counter,f
 10646  0076' 1D03               	btfss	3,2
 10647  0077' 2800'              	goto	l4860
 10648  0078'                    l4872:	
 10649  0078' 080A'              	movf	___aldiv@sign,w
 10650  0079' 1903               	btfsc	3,2
 10651  007A' 2800'              	goto	l4876
 10652  007B' 098B'              	comf	___aldiv@quotient,f
 10653  007C' 098C'              	comf	___aldiv@quotient+1,f
 10654  007D' 098D'              	comf	___aldiv@quotient+2,f
 10655  007E' 098E'              	comf	___aldiv@quotient+3,f
 10656  007F' 0A8B'              	incf	___aldiv@quotient,f
 10657  0080' 1903               	skipnz
 10658  0081' 0A8C'              	incf	___aldiv@quotient+1,f
 10659  0082' 1903               	skipnz
 10660  0083' 0A8D'              	incf	___aldiv@quotient+2,f
 10661  0084' 1903               	skipnz
 10662  0085' 0A8E'              	incf	___aldiv@quotient+3,f
 10663  0086'                    l4876:	
 10664  0086' 080E'              	movf	___aldiv@quotient+3,w
 10665  0087' 0083'              	movwf	?___aldiv+3
 10666  0088' 080D'              	movf	___aldiv@quotient+2,w
 10667  0089' 0082'              	movwf	?___aldiv+2
 10668  008A' 080C'              	movf	___aldiv@quotient+1,w
 10669  008B' 0081'              	movwf	?___aldiv+1
 10670  008C' 080B'              	movf	___aldiv@quotient,w
 10671  008D' 0080'              	movwf	?___aldiv
 10672  008E' 0008               	return
 10673  008F'                    __end_of___aldiv:	
 10674                           
 10675                           	psect	text39
 10676  0000'                    __ptext39:	
 10677 ;; *************** function _LCD_String_xy *****************
 10678 ;; Defined at:
 10679 ;;		line 57 in file "LCD_20x4_C_file.c"
 10680 ;; Parameters:    Size  Location     Type
 10681 ;;  row             1    wreg     unsigned char 
 10682 ;;  pos             1    9[BANK0 ] unsigned char 
 10683 ;;  str             1   10[BANK0 ] PTR const unsigned char 
 10684 ;;		 -> STR_7(6), STR_5(7), STR_3(6), STR_1(11), 
 10685 ;; Auto vars:     Size  Location     Type
 10686 ;;  row             1   11[BANK0 ] unsigned char 
 10687 ;; Return value:  Size  Location     Type
 10688 ;;                  1    wreg      void 
 10689 ;; Registers used:
 10690 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10691 ;; Tracked objects:
 10692 ;;		On entry : 0/0
 10693 ;;		On exit  : 0/0
 10694 ;;		Unchanged: 0/0
 10695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10696 ;;      Params:         0       2       0       0       0
 10697 ;;      Locals:         0       1       0       0       0
 10698 ;;      Temps:          0       0       0       0       0
 10699 ;;      Totals:         0       3       0       0       0
 10700 ;;Total ram usage:        3 bytes
 10701 ;; Hardware stack levels used:    1
 10702 ;; Hardware stack levels required when called:    4
 10703 ;; This function calls:
 10704 ;;		_LCD_Command
 10705 ;;		_LCD_String
 10706 ;; This function is called by:
 10707 ;;		_main
 10708 ;; This function uses a non-reentrant model
 10709 ;;
 10710                           
 10711                           
 10712                           ;psect for function _LCD_String_xy
 10713  0000'                    _LCD_String_xy:	
 10714                           
 10715                           ;incstack = 0
 10716                           ; Regs used in _LCD_String_xy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10717                           ;LCD_String_xy@row stored from wreg
 10718  0000' 1283               	bcf	3,5	;RP0=0, select bank0
 10719  0001' 1303               	bcf	3,6	;RP1=0, select bank0
 10720  0002' 008B'              	movwf	LCD_String_xy@row
 10721                           
 10722                           ;LCD_20x4_C_file.c: 59: if (row == 1)
 10723  0003' 030B'              	decf	LCD_String_xy@row,w
 10724  0004' 1D03               	btfss	3,2
 10725  0005' 2800'              	goto	l4932
 10726                           
 10727                           ;LCD_20x4_C_file.c: 60: LCD_Command((pos & 0x0F)|0x80);
 10728  0006' 0809'              	movf	LCD_String_xy@pos,w
 10729  0007' 390F               	andlw	15
 10730  0008' 3880               	iorlw	128
 10731  0009' 2800'              	goto	L11
 10732  000A'                    l4932:	
 10733                           
 10734                           ;LCD_20x4_C_file.c: 61: else if (row == 2)
 10735  000A' 3002               	movlw	2
 10736  000B' 1283               	bcf	3,5	;RP0=0, select bank0
 10737  000C' 1303               	bcf	3,6	;RP1=0, select bank0
 10738  000D' 060B'              	xorwf	LCD_String_xy@row,w
 10739  000E' 1D03               	btfss	3,2
 10740  000F' 2800'              	goto	l4936
 10741                           
 10742                           ;LCD_20x4_C_file.c: 62: LCD_Command((pos & 0x0F)|0xC0);
 10743  0010' 0809'              	movf	LCD_String_xy@pos,w
 10744  0011' 390F               	andlw	15
 10745  0012' 38C0               	iorlw	192
 10746  0013' 2800'              	goto	L11
 10747  0014'                    l4936:	
 10748                           
 10749                           ;LCD_20x4_C_file.c: 63: else if (row == 3)
 10750  0014' 3003               	movlw	3
 10751  0015' 1283               	bcf	3,5	;RP0=0, select bank0
 10752  0016' 1303               	bcf	3,6	;RP1=0, select bank0
 10753  0017' 060B'              	xorwf	LCD_String_xy@row,w
 10754  0018' 1D03               	btfss	3,2
 10755  0019' 2800'              	goto	l4940
 10756                           
 10757                           ;LCD_20x4_C_file.c: 64: LCD_Command((pos & 0x0F)|0x94);
 10758  001A' 0809'              	movf	LCD_String_xy@pos,w
 10759  001B' 390F               	andlw	15
 10760  001C' 3894               	iorlw	148
 10761  001D' 2800'              	goto	L11
 10762  001E'                    l4940:	
 10763                           
 10764                           ;LCD_20x4_C_file.c: 65: else if (row == 4)
 10765  001E' 3004               	movlw	4
 10766  001F' 1283               	bcf	3,5	;RP0=0, select bank0
 10767  0020' 1303               	bcf	3,6	;RP1=0, select bank0
 10768  0021' 060B'              	xorwf	LCD_String_xy@row,w
 10769  0022' 1D03               	btfss	3,2
 10770  0023' 2800'              	goto	l4944
 10771                           
 10772                           ;LCD_20x4_C_file.c: 66: LCD_Command((pos & 0x0F)|0xD4);
 10773  0024' 0809'              	movf	LCD_String_xy@pos,w
 10774  0025' 390F               	andlw	15
 10775  0026' 38D4               	iorlw	212
 10776  0027'                    L11:	
 10777  0027' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_Command
 10778  002C'                    l4944:	
 10779                           
 10780                           ;LCD_20x4_C_file.c: 67: LCD_String(str);
 10781  002C' 1283               	bcf	3,5	;RP0=0, select bank0
 10782  002D' 1303               	bcf	3,6	;RP1=0, select bank0
 10783  002E' 080A'              	movf	LCD_String_xy@str,w
 10784  002F' 0087'              	movwf	LCD_String@str
 10785  0030' 3000               	movlw	0
 10786  0031' 1D03               	btfss	3,2
 10787  0032' 3080               	movlw	128
 10788  0033' 0088'              	movwf	LCD_String@str+1
 10789  0034' 120A' 118A' 2000'  	fcall	_LCD_String
 10790  0037' 0008               	return
 10791  0038'                    __end_of_LCD_String_xy:	
 10792                           
 10793                           	psect	text40
 10794  0000'                    __ptext40:	
 10795 ;; *************** function _LCD_String *****************
 10796 ;; Defined at:
 10797 ;;		line 47 in file "LCD_20x4_C_file.c"
 10798 ;; Parameters:    Size  Location     Type
 10799 ;;  str             2    7[BANK0 ] PTR const unsigned char 
 10800 ;;		 -> STR_7(6), STR_5(7), STR_3(6), STR_2(3), 
 10801 ;;		 -> Data_Buffer(15), STR_1(11), main@GPS_Buffer(15), 
 10802 ;; Auto vars:     Size  Location     Type
 10803 ;;  i               2    0        int 
 10804 ;; Return value:  Size  Location     Type
 10805 ;;                  1    wreg      void 
 10806 ;; Registers used:
 10807 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10808 ;; Tracked objects:
 10809 ;;		On entry : 0/0
 10810 ;;		On exit  : 0/0
 10811 ;;		Unchanged: 0/0
 10812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10813 ;;      Params:         0       2       0       0       0
 10814 ;;      Locals:         0       0       0       0       0
 10815 ;;      Temps:          0       0       0       0       0
 10816 ;;      Totals:         0       2       0       0       0
 10817 ;;Total ram usage:        2 bytes
 10818 ;; Hardware stack levels used:    1
 10819 ;; Hardware stack levels required when called:    3
 10820 ;; This function calls:
 10821 ;;		_LCD_Char
 10822 ;; This function is called by:
 10823 ;;		_main
 10824 ;;		_LCD_String_xy
 10825 ;; This function uses a non-reentrant model
 10826 ;;
 10827                           
 10828                           
 10829                           ;psect for function _LCD_String
 10830  0000'                    _LCD_String:	
 10831  0000'                    l4546:	
 10832                           ;LCD_20x4_C_file.c: 49: int i;
 10833                           ;LCD_20x4_C_file.c: 50: while((*str)!=0)
 10834                           
 10835                           ;incstack = 0
 10836                           ; Regs used in _LCD_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10837                           
 10838  0000' 1283               	bcf	3,5	;RP0=0, select bank0
 10839  0001' 1303               	bcf	3,6	;RP1=0, select bank0
 10840  0002' 0808'              	movf	LCD_String@str+1,w
 10841  0003' 00FF               	movwf	127
 10842  0004' 0807'              	movf	LCD_String@str,w
 10843  0005' 0084               	movwf	4
 10844  0006' 120A' 118A' 2000' 120A' 118A' 	fcall	stringtab
 10845  000B' 3A00               	xorlw	0
 10846  000C' 1903               	btfsc	3,2
 10847  000D' 0008               	return
 10848                           
 10849                           ;LCD_20x4_C_file.c: 51: {
 10850                           ;LCD_20x4_C_file.c: 52: LCD_Char (*str);
 10851  000E' 1283               	bcf	3,5	;RP0=0, select bank0
 10852  000F' 1303               	bcf	3,6	;RP1=0, select bank0
 10853  0010' 0808'              	movf	LCD_String@str+1,w
 10854  0011' 00FF               	movwf	127
 10855  0012' 0807'              	movf	LCD_String@str,w
 10856  0013' 0084               	movwf	4
 10857  0014' 120A' 118A' 2000' 120A' 118A' 	fcall	stringtab
 10858  0019' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_Char
 10859                           
 10860                           ;LCD_20x4_C_file.c: 53: str++;
 10861  001E' 3001               	movlw	1
 10862  001F' 1283               	bcf	3,5	;RP0=0, select bank0
 10863  0020' 1303               	bcf	3,6	;RP1=0, select bank0
 10864  0021' 0787'              	addwf	LCD_String@str,f
 10865  0022' 1803               	skipnc
 10866  0023' 0A88'              	incf	LCD_String@str+1,f
 10867  0024' 2800'              	goto	l4546
 10868  0025'                    __end_of_LCD_String:	
 10869                           
 10870                           	psect	text41
 10871  0000'                    __ptext41:	
 10872 ;; *************** function _LCD_Char *****************
 10873 ;; Defined at:
 10874 ;;		line 22 in file "LCD_20x4_C_file.c"
 10875 ;; Parameters:    Size  Location     Type
 10876 ;;  char_data       1    wreg     unsigned char 
 10877 ;; Auto vars:     Size  Location     Type
 10878 ;;  char_data       1    6[BANK0 ] unsigned char 
 10879 ;; Return value:  Size  Location     Type
 10880 ;;                  1    wreg      void 
 10881 ;; Registers used:
 10882 ;;		wreg, status,2, status,0, pclath, cstack
 10883 ;; Tracked objects:
 10884 ;;		On entry : 0/0
 10885 ;;		On exit  : 0/0
 10886 ;;		Unchanged: 0/0
 10887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10888 ;;      Params:         0       0       0       0       0
 10889 ;;      Locals:         0       1       0       0       0
 10890 ;;      Temps:          0       0       0       0       0
 10891 ;;      Totals:         0       1       0       0       0
 10892 ;;Total ram usage:        1 bytes
 10893 ;; Hardware stack levels used:    1
 10894 ;; Hardware stack levels required when called:    2
 10895 ;; This function calls:
 10896 ;;		_MSdelay
 10897 ;; This function is called by:
 10898 ;;		_LCD_String
 10899 ;; This function uses a non-reentrant model
 10900 ;;
 10901                           
 10902                           
 10903                           ;psect for function _LCD_Char
 10904  0000'                    _LCD_Char:	
 10905                           
 10906                           ;incstack = 0
 10907                           ; Regs used in _LCD_Char: [wreg+status,2+status,0+pclath+cstack]
 10908                           ;LCD_Char@char_data stored from wreg
 10909  0000' 1283               	bcf	3,5	;RP0=0, select bank0
 10910  0001' 1303               	bcf	3,6	;RP1=0, select bank0
 10911  0002' 0086'              	movwf	LCD_Char@char_data
 10912                           
 10913                           ;LCD_20x4_C_file.c: 24: PORTB = char_data;
 10914  0003' 0806'              	movf	LCD_Char@char_data,w
 10915  0004' 0086               	movwf	6	;volatile
 10916                           
 10917                           ;LCD_20x4_C_file.c: 25: RC0 = 1;
 10918  0005' 1407               	bsf	7,0	;volatile
 10919                           
 10920                           ;LCD_20x4_C_file.c: 26: RC1 = 0;
 10921  0006' 1087               	bcf	7,1	;volatile
 10922                           
 10923                           ;LCD_20x4_C_file.c: 27: RC2 = 1;
 10924  0007' 1507               	bsf	7,2	;volatile
 10925                           
 10926                           ;LCD_20x4_C_file.c: 28: __nop();
 10927  0008' 0000               	nop
 10928                           
 10929                           ;LCD_20x4_C_file.c: 29: RC2 = 0;
 10930  0009' 1283               	bcf	3,5	;RP0=0, select bank0
 10931  000A' 1303               	bcf	3,6	;RP1=0, select bank0
 10932  000B' 1107               	bcf	7,2	;volatile
 10933                           
 10934                           ;LCD_20x4_C_file.c: 30: MSdelay(3);
 10935  000C' 3003               	movlw	3
 10936  000D' 0080'              	movwf	MSdelay@val
 10937  000E' 3000               	movlw	0
 10938  000F' 0081'              	movwf	MSdelay@val+1
 10939  0010' 120A' 118A' 2000'  	fcall	_MSdelay
 10940  0013' 0008               	return
 10941  0014'                    __end_of_LCD_Char:	
 10942                           
 10943                           	psect	text42
 10944  0000'                    __ptext42:	
 10945 ;; *************** function _LCD_Init *****************
 10946 ;; Defined at:
 10947 ;;		line 33 in file "LCD_20x4_C_file.c"
 10948 ;; Parameters:    Size  Location     Type
 10949 ;;		None
 10950 ;; Auto vars:     Size  Location     Type
 10951 ;;		None
 10952 ;; Return value:  Size  Location     Type
 10953 ;;                  1    wreg      void 
 10954 ;; Registers used:
 10955 ;;		wreg, status,2, status,0, pclath, cstack
 10956 ;; Tracked objects:
 10957 ;;		On entry : 0/0
 10958 ;;		On exit  : 0/0
 10959 ;;		Unchanged: 0/0
 10960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10961 ;;      Params:         0       0       0       0       0
 10962 ;;      Locals:         0       0       0       0       0
 10963 ;;      Temps:          0       0       0       0       0
 10964 ;;      Totals:         0       0       0       0       0
 10965 ;;Total ram usage:        0 bytes
 10966 ;; Hardware stack levels used:    1
 10967 ;; Hardware stack levels required when called:    3
 10968 ;; This function calls:
 10969 ;;		_LCD_Command
 10970 ;;		_MSdelay
 10971 ;; This function is called by:
 10972 ;;		_main
 10973 ;; This function uses a non-reentrant model
 10974 ;;
 10975                           
 10976                           
 10977                           ;psect for function _LCD_Init
 10978  0000'                    _LCD_Init:	
 10979                           
 10980                           ;LCD_20x4_C_file.c: 35: TRISC = 0;
 10981                           
 10982                           ;incstack = 0
 10983                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
 10984  0000' 1683               	bsf	3,5	;RP0=1, select bank1
 10985  0001' 1303               	bcf	3,6	;RP1=0, select bank1
 10986  0002' 0187               	clrf	7	;volatile
 10987                           
 10988                           ;LCD_20x4_C_file.c: 36: TRISB = 0;
 10989  0003' 0186               	clrf	6	;volatile
 10990                           
 10991                           ;LCD_20x4_C_file.c: 38: MSdelay(20);
 10992  0004' 3014               	movlw	20
 10993  0005' 1283               	bcf	3,5	;RP0=0, select bank0
 10994  0006' 1303               	bcf	3,6	;RP1=0, select bank0
 10995  0007' 0080'              	movwf	MSdelay@val
 10996  0008' 3000               	movlw	0
 10997  0009' 0081'              	movwf	MSdelay@val+1
 10998  000A' 120A' 118A' 2000' 120A' 118A' 	fcall	_MSdelay
 10999                           
 11000                           ;LCD_20x4_C_file.c: 39: LCD_Command (0x38);
 11001  000F' 3038               	movlw	56
 11002  0010' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_Command
 11003                           
 11004                           ;LCD_20x4_C_file.c: 40: LCD_Command (0x0C);
 11005  0015' 300C               	movlw	12
 11006  0016' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_Command
 11007                           
 11008                           ;LCD_20x4_C_file.c: 41: LCD_Command (0x06);
 11009  001B' 3006               	movlw	6
 11010  001C' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_Command
 11011                           
 11012                           ;LCD_20x4_C_file.c: 42: LCD_Command (0x01);
 11013  0021' 3001               	movlw	1
 11014  0022' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_Command
 11015                           
 11016                           ;LCD_20x4_C_file.c: 43: MSdelay(3);
 11017  0027' 3003               	movlw	3
 11018  0028' 1283               	bcf	3,5	;RP0=0, select bank0
 11019  0029' 1303               	bcf	3,6	;RP1=0, select bank0
 11020  002A' 0080'              	movwf	MSdelay@val
 11021  002B' 3000               	movlw	0
 11022  002C' 0081'              	movwf	MSdelay@val+1
 11023  002D' 120A' 118A' 2000' 120A' 118A' 	fcall	_MSdelay
 11024                           
 11025                           ;LCD_20x4_C_file.c: 44: LCD_Command (0x80);
 11026  0032' 3080               	movlw	128
 11027  0033' 120A' 118A' 2000'  	fcall	_LCD_Command
 11028  0036' 0008               	return
 11029  0037'                    __end_of_LCD_Init:	
 11030                           
 11031                           	psect	text43
 11032  0000'                    __ptext43:	
 11033 ;; *************** function _LCD_Command *****************
 11034 ;; Defined at:
 11035 ;;		line 11 in file "LCD_20x4_C_file.c"
 11036 ;; Parameters:    Size  Location     Type
 11037 ;;  cmd             1    wreg     unsigned char 
 11038 ;; Auto vars:     Size  Location     Type
 11039 ;;  cmd             1    6[BANK0 ] unsigned char 
 11040 ;; Return value:  Size  Location     Type
 11041 ;;                  1    wreg      void 
 11042 ;; Registers used:
 11043 ;;		wreg, status,2, status,0, pclath, cstack
 11044 ;; Tracked objects:
 11045 ;;		On entry : 0/0
 11046 ;;		On exit  : 0/0
 11047 ;;		Unchanged: 0/0
 11048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11049 ;;      Params:         0       0       0       0       0
 11050 ;;      Locals:         0       1       0       0       0
 11051 ;;      Temps:          0       0       0       0       0
 11052 ;;      Totals:         0       1       0       0       0
 11053 ;;Total ram usage:        1 bytes
 11054 ;; Hardware stack levels used:    1
 11055 ;; Hardware stack levels required when called:    2
 11056 ;; This function calls:
 11057 ;;		_MSdelay
 11058 ;; This function is called by:
 11059 ;;		_LCD_Init
 11060 ;;		_LCD_String_xy
 11061 ;;		_LCD_Clear
 11062 ;; This function uses a non-reentrant model
 11063 ;;
 11064                           
 11065                           
 11066                           ;psect for function _LCD_Command
 11067  0000'                    _LCD_Command:	
 11068                           
 11069                           ;incstack = 0
 11070                           ; Regs used in _LCD_Command: [wreg+status,2+status,0+pclath+cstack]
 11071                           ;LCD_Command@cmd stored from wreg
 11072  0000' 1283               	bcf	3,5	;RP0=0, select bank0
 11073  0001' 1303               	bcf	3,6	;RP1=0, select bank0
 11074  0002' 0086'              	movwf	LCD_Command@cmd
 11075                           
 11076                           ;LCD_20x4_C_file.c: 13: PORTB = cmd;
 11077  0003' 0806'              	movf	LCD_Command@cmd,w
 11078  0004' 0086               	movwf	6	;volatile
 11079                           
 11080                           ;LCD_20x4_C_file.c: 14: RC0 = 0;
 11081  0005' 1007               	bcf	7,0	;volatile
 11082                           
 11083                           ;LCD_20x4_C_file.c: 15: RC1 = 0;
 11084  0006' 1087               	bcf	7,1	;volatile
 11085                           
 11086                           ;LCD_20x4_C_file.c: 16: RC2 = 1;
 11087  0007' 1507               	bsf	7,2	;volatile
 11088                           
 11089                           ;LCD_20x4_C_file.c: 17: __nop();
 11090  0008' 0000               	nop
 11091                           
 11092                           ;LCD_20x4_C_file.c: 18: RC2 = 0;
 11093  0009' 1283               	bcf	3,5	;RP0=0, select bank0
 11094  000A' 1303               	bcf	3,6	;RP1=0, select bank0
 11095  000B' 1107               	bcf	7,2	;volatile
 11096                           
 11097                           ;LCD_20x4_C_file.c: 19: MSdelay(3);
 11098  000C' 3003               	movlw	3
 11099  000D' 0080'              	movwf	MSdelay@val
 11100  000E' 3000               	movlw	0
 11101  000F' 0081'              	movwf	MSdelay@val+1
 11102  0010' 120A' 118A' 2000'  	fcall	_MSdelay
 11103  0013' 0008               	return
 11104  0014'                    __end_of_LCD_Command:	
 11105                           
 11106                           	psect	text44
 11107  0000'                    __ptext44:	
 11108 ;; *************** function _MSdelay *****************
 11109 ;; Defined at:
 11110 ;;		line 78 in file "LCD_20x4_C_file.c"
 11111 ;; Parameters:    Size  Location     Type
 11112 ;;  val             2    0[BANK0 ] unsigned int 
 11113 ;; Auto vars:     Size  Location     Type
 11114 ;;  j               2    4[BANK0 ] unsigned int 
 11115 ;;  i               2    2[BANK0 ] unsigned int 
 11116 ;; Return value:  Size  Location     Type
 11117 ;;                  1    wreg      void 
 11118 ;; Registers used:
 11119 ;;		wreg, status,2
 11120 ;; Tracked objects:
 11121 ;;		On entry : 0/0
 11122 ;;		On exit  : 0/0
 11123 ;;		Unchanged: 0/0
 11124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11125 ;;      Params:         0       2       0       0       0
 11126 ;;      Locals:         0       4       0       0       0
 11127 ;;      Temps:          0       0       0       0       0
 11128 ;;      Totals:         0       6       0       0       0
 11129 ;;Total ram usage:        6 bytes
 11130 ;; Hardware stack levels used:    1
 11131 ;; Hardware stack levels required when called:    1
 11132 ;; This function calls:
 11133 ;;		Nothing
 11134 ;; This function is called by:
 11135 ;;		_LCD_Command
 11136 ;;		_LCD_Char
 11137 ;;		_LCD_Init
 11138 ;;		_LCD_Clear
 11139 ;; This function uses a non-reentrant model
 11140 ;;
 11141                           
 11142                           
 11143                           ;psect for function _MSdelay
 11144  0000'                    _MSdelay:	
 11145                           
 11146                           ;LCD_20x4_C_file.c: 80: unsigned int i,j;
 11147                           ;LCD_20x4_C_file.c: 81: for(i=0;i<val;i++)
 11148                           
 11149                           ;incstack = 0
 11150                           ; Regs used in _MSdelay: [wreg+status,2]
 11151  0000' 1283               	bcf	3,5	;RP0=0, select bank0
 11152  0001' 1303               	bcf	3,6	;RP1=0, select bank0
 11153  0002' 0182'              	clrf	MSdelay@i
 11154  0003' 0183'              	clrf	MSdelay@i+1
 11155  0004'                    l169:	
 11156  0004' 0801'              	movf	MSdelay@val+1,w
 11157  0005' 0203'              	subwf	MSdelay@i+1,w
 11158  0006' 1D03               	skipz
 11159  0007' 2800'              	goto	u5795
 11160  0008' 0800'              	movf	MSdelay@val,w
 11161  0009' 0202'              	subwf	MSdelay@i,w
 11162  000A'                    u5795:	
 11163  000A' 1803               	btfsc	3,0
 11164  000B' 0008               	return
 11165                           
 11166                           ;LCD_20x4_C_file.c: 82: for(j=0;j<165;j++);
 11167  000C' 0184'              	clrf	MSdelay@j
 11168  000D' 0185'              	clrf	MSdelay@j+1
 11169  000E' 3000               	movlw	0
 11170  000F' 0205'              	subwf	MSdelay@j+1,w
 11171  0010' 30A5               	movlw	165
 11172  0011' 1903               	skipnz
 11173  0012' 0204'              	subwf	MSdelay@j,w
 11174  0013' 1803               	btfsc	3,0
 11175  0014' 2800'              	goto	l3908
 11176  0015'                    l3906:	
 11177  0015' 3001               	movlw	1
 11178  0016' 0784'              	addwf	MSdelay@j,f
 11179  0017' 1803               	skipnc
 11180  0018' 0A85'              	incf	MSdelay@j+1,f
 11181  0019' 3000               	movlw	0
 11182  001A' 0785'              	addwf	MSdelay@j+1,f
 11183  001B' 3000               	movlw	0
 11184  001C' 0205'              	subwf	MSdelay@j+1,w
 11185  001D' 30A5               	movlw	165
 11186  001E' 1903               	skipnz
 11187  001F' 0204'              	subwf	MSdelay@j,w
 11188  0020' 1C03               	skipc
 11189  0021' 2800'              	goto	l3906
 11190  0022'                    l3908:	
 11191  0022' 3001               	movlw	1
 11192  0023' 0782'              	addwf	MSdelay@i,f
 11193  0024' 1803               	skipnc
 11194  0025' 0A83'              	incf	MSdelay@i+1,f
 11195  0026' 3000               	movlw	0
 11196  0027' 0783'              	addwf	MSdelay@i+1,f
 11197  0028' 2800'              	goto	l169
 11198  0029'                    __end_of_MSdelay:	
 11199                           
 11200                           	psect	text45
 11201  0000'                    __ptext45:	
 11202 ;; *************** function _Serial_ISR *****************
 11203 ;; Defined at:
 11204 ;;		line 256 in file "GPS.c"
 11205 ;; Parameters:    Size  Location     Type
 11206 ;;		None
 11207 ;; Auto vars:     Size  Location     Type
 11208 ;;  received_cha    1    5[COMMON] unsigned char 
 11209 ;; Return value:  Size  Location     Type
 11210 ;;                  1    wreg      void 
 11211 ;; Registers used:
 11212 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11213 ;; Tracked objects:
 11214 ;;		On entry : 0/0
 11215 ;;		On exit  : 0/0
 11216 ;;		Unchanged: 0/0
 11217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11218 ;;      Params:         0       0       0       0       0
 11219 ;;      Locals:         1       0       0       0       0
 11220 ;;      Temps:          5       0       0       0       0
 11221 ;;      Totals:         6       0       0       0       0
 11222 ;;Total ram usage:        6 bytes
 11223 ;; Hardware stack levels used:    1
 11224 ;; This function calls:
 11225 ;;		Nothing
 11226 ;; This function is called by:
 11227 ;;		Interrupt level 1
 11228 ;; This function uses a non-reentrant model
 11229 ;;
 11230                           
 11231                           
 11232                           ;psect for function _Serial_ISR
 11233  0000'                    _Serial_ISR:	
 11234                           
 11235                           ;GPS.c: 261: if(RCIF){
 11236  0000' 1E8C               	btfss	12,5	;volatile
 11237  0001' 2800'              	goto	i1l122
 11238                           
 11239                           ;GPS.c: 262: GIE = 0;
 11240  0002' 138B               	bcf	11,7	;volatile
 11241                           
 11242                           ;GPS.c: 263: unsigned char received_char = RCREG;
 11243  0003' 081A               	movf	26,w	;volatile
 11244  0004' 0080'              	movwf	??_Serial_ISR
 11245  0005' 0800'              	movf	??_Serial_ISR,w
 11246  0006' 0085'              	movwf	Serial_ISR@received_char
 11247                           
 11248                           ;GPS.c: 264: if(RCSTAbits.OERR){
 11249  0007' 1C98               	btfss	24,1	;volatile
 11250  0008' 2800'              	goto	i1l3822
 11251                           
 11252                           ;GPS.c: 265: CREN = 0;
 11253  0009' 1218               	bcf	24,4	;volatile
 11254                           
 11255                           ;GPS.c: 266: __nop();
 11256  000A' 0000               	nop
 11257                           
 11258                           ;GPS.c: 267: CREN=1;
 11259  000B' 1283               	bcf	3,5	;RP0=0, select bank0
 11260  000C' 1303               	bcf	3,6	;RP1=0, select bank0
 11261  000D' 1618               	bsf	24,4	;volatile
 11262  000E'                    i1l3822:	
 11263                           
 11264                           ;GPS.c: 268: }
 11265                           ;GPS.c: 270: if(received_char =='$'){
 11266  000E' 3024               	movlw	36
 11267  000F' 0605'              	xorwf	Serial_ISR@received_char,w
 11268  0010' 1D03               	btfss	3,2
 11269  0011' 2800'              	goto	i1l3826
 11270                           
 11271                           ;GPS.c: 271: GGA_Index = 0;
 11272  0012' 0180'              	clrf	_GGA_Index	;volatile
 11273  0013' 0181'              	clrf	_GGA_Index+1	;volatile
 11274                           
 11275                           ;GPS.c: 272: IsItGGAString = 0;
 11276  0014' 1683               	bsf	3,5	;RP0=1, select bank1
 11277  0015' 1303               	bcf	3,6	;RP1=0, select bank1
 11278  0016' 0180'              	clrf	_IsItGGAString^(0+128)	;volatile
 11279                           
 11280                           ;GPS.c: 273: IsLastEndGGA = 0;
 11281  0017' 0182'              	clrf	_IsLastEndGGA	;volatile
 11282                           
 11283                           ;GPS.c: 274: CommaCounter = 0;
 11284  0018' 0184'              	clrf	_CommaCounter
 11285                           
 11286                           ;GPS.c: 275: IsEndGGA = 0;
 11287  0019' 0183'              	clrf	_IsEndGGA	;volatile
 11288                           
 11289                           ;GPS.c: 276: }
 11290  001A' 2800'              	goto	i1l122
 11291  001B'                    i1l3826:	
 11292                           
 11293                           ;GPS.c: 277: else if(IsItGGAString == 1){
 11294  001B' 1683               	bsf	3,5	;RP0=1, select bank1
 11295  001C' 1303               	bcf	3,6	;RP1=0, select bank1
 11296  001D' 0300'              	decf	_IsItGGAString^(0+128),w	;volatile
 11297  001E' 1D03               	btfss	3,2
 11298  001F' 2800'              	goto	i1l3846
 11299                           
 11300                           ;GPS.c: 278: if(received_char == ',' ) GGA_Pointers[CommaCounter++] = GGA_Index;
 11301  0020' 302C               	movlw	44
 11302  0021' 0605'              	xorwf	Serial_ISR@received_char,w
 11303  0022' 1D03               	btfss	3,2
 11304  0023' 2800'              	goto	i1l3834
 11305  0024' 0800'              	movf	_GGA_Index,w	;volatile
 11306  0025' 0080'              	movwf	??_Serial_ISR
 11307  0026' 0804'              	movf	_CommaCounter,w
 11308  0027' 3E00'              	addlw	(low (_GGA_Pointers| (0+256)))& (0+255)
 11309  0028' 0084               	movwf	4
 11310  0029' 0800'              	movf	??_Serial_ISR,w
 11311  002A' 1783               	bsf	3,7	;select IRP bank3
 11312  002B' 0080               	movwf	0
 11313  002C' 3001               	movlw	1
 11314  002D' 0080'              	movwf	??_Serial_ISR
 11315  002E' 0800'              	movf	??_Serial_ISR,w
 11316  002F' 0784'              	addwf	_CommaCounter,f
 11317  0030'                    i1l3834:	
 11318                           
 11319                           ;GPS.c: 279: GGA_Buffer[GGA_Index++] = received_char;
 11320  0030' 0805'              	movf	Serial_ISR@received_char,w
 11321  0031' 0080'              	movwf	??_Serial_ISR
 11322  0032' 0800'              	movf	_GGA_Index,w	;volatile
 11323  0033' 3E00'              	addlw	(low (_GGA_Buffer| (0+256)))& (0+255)
 11324  0034' 0084               	movwf	4
 11325  0035' 0800'              	movf	??_Serial_ISR,w
 11326  0036' 1783               	bsf	3,7	;select IRP bank2
 11327  0037' 0080               	movwf	0
 11328  0038' 3001               	movlw	1
 11329  0039' 0780'              	addwf	_GGA_Index,f	;volatile
 11330  003A' 1803               	skipnc
 11331  003B' 0A81'              	incf	_GGA_Index+1,f	;volatile
 11332  003C' 3000               	movlw	0
 11333  003D' 0781'              	addwf	_GGA_Index+1,f	;volatile
 11334                           
 11335                           ;GPS.c: 280: if(received_char == '\n'){
 11336  003E' 300A               	movlw	10
 11337  003F' 0605'              	xorwf	Serial_ISR@received_char,w
 11338  0040' 1D03               	btfss	3,2
 11339  0041' 2800'              	goto	i1l3844
 11340                           
 11341                           ;GPS.c: 281: if (IsLastEndGGA == '\r'){
 11342  0042' 300D               	movlw	13
 11343  0043' 0602'              	xorwf	_IsLastEndGGA,w	;volatile
 11344  0044' 1D03               	btfss	3,2
 11345  0045' 2800'              	goto	i1l122
 11346                           
 11347                           ;GPS.c: 282: IsEndGGA = 1;
 11348  0046' 3001               	movlw	1
 11349  0047' 0080'              	movwf	??_Serial_ISR
 11350  0048' 0800'              	movf	??_Serial_ISR,w
 11351  0049' 0083'              	movwf	_IsEndGGA	;volatile
 11352                           
 11353                           ;GPS.c: 283: }
 11354                           ;GPS.c: 284: }
 11355  004A' 2800'              	goto	i1l122
 11356  004B'                    i1l3844:	
 11357                           
 11358                           ;GPS.c: 285: else{
 11359                           ;GPS.c: 286: IsLastEndGGA = received_char;
 11360  004B' 0805'              	movf	Serial_ISR@received_char,w
 11361  004C' 0080'              	movwf	??_Serial_ISR
 11362  004D' 0800'              	movf	??_Serial_ISR,w
 11363  004E' 0082'              	movwf	_IsLastEndGGA	;volatile
 11364                           
 11365                           ;GPS.c: 287: }
 11366                           ;GPS.c: 288: }
 11367  004F' 2800'              	goto	i1l122
 11368  0050'                    i1l3846:	
 11369                           
 11370                           ;GPS.c: 289: else if(GGA_CODE[0] == 'G' && GGA_CODE[1] == 'G' && GGA_CODE[2] == 'A'){
 11371  0050' 3047               	movlw	71
 11372  0051' 0600'              	xorwf	_GGA_CODE^(0+128),w
 11373  0052' 1D03               	btfss	3,2
 11374  0053' 2800'              	goto	i1l3860
 11375  0054' 3047               	movlw	71
 11376  0055' 0601'              	xorwf	(_GGA_CODE^(0+128)+1),w
 11377  0056' 1D03               	btfss	3,2
 11378  0057' 2800'              	goto	i1l3860
 11379  0058' 3041               	movlw	65
 11380  0059' 0602'              	xorwf	(_GGA_CODE^(0+128)+2),w
 11381  005A' 1D03               	btfss	3,2
 11382  005B' 2800'              	goto	i1l3860
 11383                           
 11384                           ;GPS.c: 290: IsItGGAString = 1;
 11385  005C' 3001               	movlw	1
 11386  005D' 0080'              	movwf	??_Serial_ISR
 11387  005E' 0800'              	movf	??_Serial_ISR,w
 11388  005F' 0080'              	movwf	_IsItGGAString^(0+128)	;volatile
 11389                           
 11390                           ;GPS.c: 291: GGA_CODE[0] = 0; GGA_CODE[1] = 0; GGA_CODE[2] = 0;
 11391  0060' 0180'              	clrf	_GGA_CODE^(0+128)
 11392  0061' 0181'              	clrf	(_GGA_CODE^(0+128)+1)
 11393  0062' 0182'              	clrf	(_GGA_CODE^(0+128)+2)
 11394                           
 11395                           ;GPS.c: 292: }
 11396  0063' 2800'              	goto	i1l122
 11397  0064'                    i1l3860:	
 11398                           
 11399                           ;GPS.c: 293: else{
 11400                           ;GPS.c: 294: GGA_CODE[0] = GGA_CODE[1]; GGA_CODE[1] = GGA_CODE[2]; GGA_CODE[2] = receive
      +                          d_char;
 11401  0064' 0801'              	movf	(_GGA_CODE^(0+128)+1),w
 11402  0065' 0080'              	movwf	??_Serial_ISR
 11403  0066' 0800'              	movf	??_Serial_ISR,w
 11404  0067' 0080'              	movwf	_GGA_CODE^(0+128)
 11405  0068' 0802'              	movf	(_GGA_CODE^(0+128)+2),w
 11406  0069' 0080'              	movwf	??_Serial_ISR
 11407  006A' 0800'              	movf	??_Serial_ISR,w
 11408  006B' 0081'              	movwf	(_GGA_CODE^(0+128)+1)
 11409  006C' 0805'              	movf	Serial_ISR@received_char,w
 11410  006D' 0080'              	movwf	??_Serial_ISR
 11411  006E' 0800'              	movf	??_Serial_ISR,w
 11412  006F' 0082'              	movwf	(_GGA_CODE^(0+128)+2)
 11413  0070'                    i1l122:	
 11414  0070' 0804'              	movf	??_Serial_ISR+4,w
 11415  0071' 1283               	bcf	3,5	;RP0=0, select bank0
 11416  0072' 00FF               	movwf	127
 11417  0073' 0803'              	movf	??_Serial_ISR+3,w
 11418  0074' 008A               	movwf	10
 11419  0075' 0802'              	movf	??_Serial_ISR+2,w
 11420  0076' 0084               	movwf	4
 11421  0077' 0E00'              	swapf	(??_Serial_ISR+1)^(0+-128),w
 11422  0078' 0083               	movwf	3
 11423  0079' 0EFE               	swapf	126,f
 11424  007A' 0E7E               	swapf	126,w
 11425  007B' 0009               	retfie
 11426  007C'                    __end_of_Serial_ISR:	
 11427  007E                     btemp	set	126	;btemp
 11428  007E                     wtemp0	set	126
 11429                           
 11430                           	psect	intentry
 11431  0000'                    __pintentry:	
 11432                           ;incstack = 0
 11433                           ; Regs used in _Serial_ISR: [wreg-fsr0h+status,2+status,0]
 11434                           
 11435  0000'                    interrupt_function:	
 11436  007E                     saved_w	set	btemp
 11437  0000' 00FE               	movwf	btemp
 11438  0001' 0E03               	swapf	3,w
 11439  0002' 0081'              	movwf	??_Serial_ISR+1
 11440  0003' 0804               	movf	4,w
 11441  0004' 0082'              	movwf	??_Serial_ISR+2
 11442  0005' 080A               	movf	10,w
 11443  0006' 0083'              	movwf	??_Serial_ISR+3
 11444  0007' 1283               	bcf	3,5	;RP0=0, select bank0
 11445  0008' 1303               	bcf	3,6	;RP1=0, select bank0
 11446  0009' 087F               	movf	btemp+1,w
 11447  000A' 0084'              	movwf	??_Serial_ISR+4
 11448  000B' 120A' 118A' 2800'  	ljmp	_Serial_ISR
 11449                           
 11450                           	psect	text16_split_1
 11451  0000'                    l4716:	
 11452                           ;doprnt.c: 1233: }
 11453                           ;doprnt.c: 1235: while(prec) {
 11454                           
 11455                           
 11456                           ;doprnt.c: 1236: ((*sp++ = ('0')));
 11457  0000' 3030               	movlw	48
 11458  0001' 0080'              	movwf	??_sprintf^(0+128)
 11459  0002' 1283               	bcf	3,5	;RP0=0, select bank0
 11460  0003' 1303               	bcf	3,6	;RP1=0, select bank0
 11461  0004' 0847'              	movf	sprintf@sp,w
 11462  0005' 0084               	movwf	4
 11463  0006' 1783               	bsf	3,7
 11464  0007' 1C48'              	btfss	sprintf@sp+1,0
 11465  0008' 1383               	bcf	3,7
 11466  0009' 1683               	bsf	3,5	;RP0=1, select bank1
 11467  000A' 1303               	bcf	3,6	;RP1=0, select bank1
 11468  000B' 0800'              	movf	??_sprintf^(0+128),w
 11469  000C' 0080               	movwf	0
 11470  000D' 3001               	movlw	1
 11471  000E' 1283               	bcf	3,5	;RP0=0, select bank0
 11472  000F' 1303               	bcf	3,6	;RP1=0, select bank0
 11473  0010' 07C7'              	addwf	sprintf@sp,f
 11474  0011' 1803               	skipnc
 11475  0012' 0AC8'              	incf	sprintf@sp+1,f
 11476                           
 11477                           ;doprnt.c: 1237: prec--;
 11478  0013' 30FF               	movlw	255
 11479  0014' 1683               	bsf	3,5	;RP0=1, select bank1
 11480  0015' 1303               	bcf	3,6	;RP1=0, select bank1
 11481  0016' 0780'              	addwf	sprintf@prec^(0+128),f
 11482  0017' 1803               	skipnc
 11483  0018' 0A80'              	incf	(sprintf@prec+1)^(0+128),f
 11484  0019' 30FF               	movlw	255
 11485  001A' 0780'              	addwf	(sprintf@prec+1)^(0+128),f
 11486  001B'                    l4722:	
 11487  001B' 0800'              	movf	sprintf@prec^(0+128),w
 11488  001C' 0400'              	iorwf	(sprintf@prec+1)^(0+128),w
 11489  001D' 1903               	btfsc	3,2
 11490  001E' 2800'              	goto	L18
 11491  001F' 2800'              	goto	l4716
 11492  0020'                    l4724:	
 11493                           ;doprnt.c: 1238: }
 11494                           ;doprnt.c: 1245: continue;
 11495                           
 11496                           
 11497                           ;doprnt.c: 1246: }
 11498                           ;doprnt.c: 1253: {
 11499                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 11500  0020' 0800'              	movf	sprintf@ap^(0+128),w
 11501  0021' 0084               	movwf	4
 11502  0022' 1383               	bcf	3,7	;select IRP bank0
 11503  0023' 0800               	movf	0,w
 11504  0024' 0080'              	movwf	??_sprintf^(0+128)
 11505  0025' 0A84               	incf	4,f
 11506  0026' 0800               	movf	0,w
 11507  0027' 0081'              	movwf	(??_sprintf^(0+128)+1)
 11508  0028' 0800'              	movf	??_sprintf^(0+128),w
 11509  0029' 0080'              	movwf	sprintf@val^(0+128)
 11510  002A' 0800'              	movf	(??_sprintf+1)^(0+128),w
 11511  002B' 0080'              	movwf	(sprintf@val+1)^(0+128)
 11512  002C' 3000               	movlw	0
 11513  002D' 1B80'              	btfsc	(sprintf@val+1)^(0+128),7
 11514  002E' 30FF               	movlw	255
 11515  002F' 0080'              	movwf	(sprintf@val+2)^(0+128)
 11516  0030' 0080'              	movwf	(sprintf@val+3)^(0+128)
 11517  0031' 3002               	movlw	2
 11518  0032' 0080'              	movwf	??_sprintf^(0+128)
 11519  0033' 0800'              	movf	??_sprintf^(0+128),w
 11520  0034' 0780'              	addwf	sprintf@ap^(0+128),f
 11521                           
 11522                           ;doprnt.c: 1261: if((long)val < 0) {
 11523  0035' 1F80'              	btfss	(sprintf@val+3)^(0+128),7
 11524  0036' 2800'              	goto	l4734
 11525                           
 11526                           ;doprnt.c: 1262: flag |= 0x03;
 11527  0037' 3003               	movlw	3
 11528  0038' 0480'              	iorwf	sprintf@flag^(0+128),f
 11529  0039' 3000               	movlw	0
 11530  003A' 0480'              	iorwf	(sprintf@flag+1)^(0+128),f
 11531                           
 11532                           ;doprnt.c: 1263: val = -val;
 11533  003B' 0980'              	comf	sprintf@val^(0+128),f
 11534  003C' 0980'              	comf	(sprintf@val+1)^(0+128),f
 11535  003D' 0980'              	comf	(sprintf@val+2)^(0+128),f
 11536  003E' 0980'              	comf	(sprintf@val+3)^(0+128),f
 11537  003F' 0A80'              	incf	sprintf@val^(0+128),f
 11538  0040' 1903               	skipnz
 11539  0041' 0A80'              	incf	(sprintf@val+1)^(0+128),f
 11540  0042' 1903               	skipnz
 11541  0043' 0A80'              	incf	(sprintf@val+2)^(0+128),f
 11542  0044' 1903               	skipnz
 11543  0045' 0A80'              	incf	(sprintf@val+3)^(0+128),f
 11544  0046'                    l4734:	
 11545                           
 11546                           ;doprnt.c: 1264: }
 11547                           ;doprnt.c: 1266: }
 11548                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
 11549  0046' 0800'              	movf	sprintf@prec^(0+128),w
 11550  0047' 0400'              	iorwf	(sprintf@prec+1)^(0+128),w
 11551  0048' 1D03               	btfss	3,2
 11552  0049' 2800'              	goto	l4740
 11553  004A' 0800'              	movf	(sprintf@val+3)^(0+128),w
 11554  004B' 0400'              	iorwf	(sprintf@val+2)^(0+128),w
 11555  004C' 0400'              	iorwf	(sprintf@val+1)^(0+128),w
 11556  004D' 0400'              	iorwf	sprintf@val^(0+128),w
 11557  004E' 1D03               	skipz
 11558  004F' 2800'              	goto	l4740
 11559                           
 11560                           ;doprnt.c: 1291: prec++;
 11561  0050' 3001               	movlw	1
 11562  0051' 0780'              	addwf	sprintf@prec^(0+128),f
 11563  0052' 1803               	skipnc
 11564  0053' 0A80'              	incf	(sprintf@prec+1)^(0+128),f
 11565  0054' 3000               	movlw	0
 11566  0055' 0780'              	addwf	(sprintf@prec+1)^(0+128),f
 11567  0056'                    l4740:	
 11568                           
 11569                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11570  0056' 0180'              	clrf	sprintf@c^(0+128)
 11571  0057' 0A80'              	incf	sprintf@c^(0+128),f
 11572  0058' 300A               	movlw	10
 11573  0059' 0600'              	xorwf	sprintf@c^(0+128),w
 11574  005A' 1903               	btfsc	3,2
 11575  005B' 2800'              	goto	l4752
 11576  005C'                    l4746:	
 11577                           
 11578                           ;doprnt.c: 1306: if(val < dpowers[c])
 11579  005C' 0800'              	movf	sprintf@c^(0+128),w
 11580  005D' 0080'              	movwf	??_sprintf^(0+128)
 11581  005E' 3001               	movlw	1
 11582  005F'                    u7495:	
 11583  005F' 1003               	clrc
 11584  0060' 0D80'              	rlf	??_sprintf^(0+128),f
 11585  0061' 3EFF               	addlw	-1
 11586  0062' 1D03               	skipz
 11587  0063' 2800'              	goto	u7495
 11588  0064' 1003               	clrc
 11589  0065' 0D00'              	rlf	??_sprintf^(0+128),w
 11590  0066' 3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
 11591  0067' 0084               	movwf	4
 11592  0068' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
 11593  006D' 0080'              	movwf	(??_sprintf+1)^(0+128)
 11594  006E' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
 11595  0073' 0081'              	movwf	((??_sprintf+1)^(0+128)+1)
 11596  0074' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
 11597  0079' 0082'              	movwf	((??_sprintf+1)^(0+128)+2)
 11598  007A' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
 11599  007F' 0083'              	movwf	((??_sprintf+1)^(0+128)+3)
 11600  0080' 0800'              	movf	(??_sprintf+4)^(0+128),w
 11601  0081' 0200'              	subwf	(sprintf@val+3)^(0+128),w
 11602  0082' 1D03               	skipz
 11603  0083' 2800'              	goto	u7505
 11604  0084' 0800'              	movf	(??_sprintf+3)^(0+128),w
 11605  0085' 0200'              	subwf	(sprintf@val+2)^(0+128),w
 11606  0086' 1D03               	skipz
 11607  0087' 2800'              	goto	u7505
 11608  0088' 0800'              	movf	(??_sprintf+2)^(0+128),w
 11609  0089' 0200'              	subwf	(sprintf@val+1)^(0+128),w
 11610  008A' 1D03               	skipz
 11611  008B' 2800'              	goto	u7505
 11612  008C' 0800'              	movf	(??_sprintf+1)^(0+128),w
 11613  008D' 0200'              	subwf	sprintf@val^(0+128),w
 11614  008E'                    u7505:	
 11615  008E' 1C03               	btfss	3,0
 11616  008F' 2800'              	goto	l4752
 11617                           
 11618                           ;doprnt.c: 1307: break;
 11619  0090' 3001               	movlw	1
 11620  0091' 0080'              	movwf	??_sprintf^(0+128)
 11621  0092' 0800'              	movf	??_sprintf^(0+128),w
 11622  0093' 0780'              	addwf	sprintf@c^(0+128),f
 11623  0094' 300A               	movlw	10
 11624  0095' 0600'              	xorwf	sprintf@c^(0+128),w
 11625  0096' 1D03               	btfss	3,2
 11626  0097' 2800'              	goto	l4746
 11627  0098'                    l4752:	
 11628                           
 11629                           ;doprnt.c: 1339: if(c < prec)
 11630  0098' 0800'              	movf	sprintf@c^(0+128),w
 11631  0099' 0080'              	movwf	??_sprintf^(0+128)
 11632  009A' 0181'              	clrf	(??_sprintf^(0+128)+1)
 11633  009B' 1B80'              	btfsc	??_sprintf^(0+128),7
 11634  009C' 0381'              	decf	(??_sprintf^(0+128)+1),f
 11635  009D' 0800'              	movf	(??_sprintf+1)^(0+128),w
 11636  009E' 3A80               	xorlw	128
 11637  009F' 0080'              	movwf	(??_sprintf+2)^(0+128)
 11638  00A0' 0800'              	movf	(sprintf@prec+1)^(0+128),w
 11639  00A1' 3A80               	xorlw	128
 11640  00A2' 0200'              	subwf	(??_sprintf+2)^(0+128),w
 11641  00A3' 1D03               	skipz
 11642  00A4' 2800'              	goto	u7525
 11643  00A5' 0800'              	movf	sprintf@prec^(0+128),w
 11644  00A6' 0200'              	subwf	??_sprintf^(0+128),w
 11645  00A7'                    u7525:	
 11646  00A7' 1803               	skipnc
 11647  00A8' 2800'              	goto	l4756
 11648                           
 11649                           ;doprnt.c: 1340: c = prec;
 11650  00A9' 1683               	bsf	3,5	;RP0=1, select bank1
 11651  00AA' 1303               	bcf	3,6	;RP1=0, select bank1
 11652  00AB' 0800'              	movf	sprintf@prec^(0+128),w
 11653  00AC' 0080'              	movwf	??_sprintf^(0+128)
 11654  00AD' 0800'              	movf	??_sprintf^(0+128),w
 11655  00AE' 0080'              	movwf	sprintf@c^(0+128)
 11656  00AF' 2800'              	goto	l282
 11657  00B0'                    l4756:	
 11658                           
 11659                           ;doprnt.c: 1341: else if(prec < c)
 11660  00B0' 1683               	bsf	3,5	;RP0=1, select bank1
 11661  00B1' 1303               	bcf	3,6	;RP1=0, select bank1
 11662  00B2' 0800'              	movf	sprintf@c^(0+128),w
 11663  00B3' 0080'              	movwf	??_sprintf^(0+128)
 11664  00B4' 0181'              	clrf	(??_sprintf^(0+128)+1)
 11665  00B5' 1B80'              	btfsc	??_sprintf^(0+128),7
 11666  00B6' 0381'              	decf	(??_sprintf^(0+128)+1),f
 11667  00B7' 0800'              	movf	(sprintf@prec+1)^(0+128),w
 11668  00B8' 3A80               	xorlw	128
 11669  00B9' 0080'              	movwf	(??_sprintf+2)^(0+128)
 11670  00BA' 0800'              	movf	(??_sprintf+1)^(0+128),w
 11671  00BB' 3A80               	xorlw	128
 11672  00BC' 0200'              	subwf	(??_sprintf+2)^(0+128),w
 11673  00BD' 1D03               	skipz
 11674  00BE' 2800'              	goto	u7535
 11675  00BF' 0800'              	movf	??_sprintf^(0+128),w
 11676  00C0' 0200'              	subwf	sprintf@prec^(0+128),w
 11677  00C1'                    u7535:	
 11678  00C1' 1803               	skipnc
 11679  00C2' 2800'              	goto	l282
 11680                           
 11681                           ;doprnt.c: 1342: prec = c;
 11682  00C3' 1683               	bsf	3,5	;RP0=1, select bank1
 11683  00C4' 1303               	bcf	3,6	;RP1=0, select bank1
 11684  00C5' 0800'              	movf	sprintf@c^(0+128),w
 11685  00C6' 0080'              	movwf	sprintf@prec^(0+128)
 11686  00C7' 0180'              	clrf	(sprintf@prec+1)^(0+128)
 11687  00C8' 1B80'              	btfsc	sprintf@prec^(0+128),7
 11688  00C9' 0380'              	decf	(sprintf@prec+1)^(0+128),f
 11689  00CA'                    l282:	
 11690                           
 11691                           ;doprnt.c: 1422: {
 11692                           ;doprnt.c: 1438: if(flag & 0x03)
 11693  00CA' 3003               	movlw	3
 11694  00CB' 1683               	bsf	3,5	;RP0=1, select bank1
 11695  00CC' 1303               	bcf	3,6	;RP1=0, select bank1
 11696  00CD' 0500'              	andwf	sprintf@flag^(0+128),w
 11697  00CE' 0080'              	movwf	??_sprintf^(0+128)
 11698  00CF' 3000               	movlw	0
 11699  00D0' 0500'              	andwf	(sprintf@flag+1)^(0+128),w
 11700  00D1' 0080'              	movwf	(??_sprintf+1)^(0+128)
 11701  00D2' 0800'              	movf	??_sprintf^(0+128),w
 11702  00D3' 0401'              	iorwf	(??_sprintf^(0+128)+1),w
 11703  00D4' 1903               	btfsc	3,2
 11704  00D5' 2800'              	goto	l4770
 11705                           
 11706                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 11707  00D6' 302D               	movlw	45
 11708  00D7'                    L9:	
 11709  00D7' 0080'              	movwf	??_sprintf^(0+128)
 11710  00D8' 1283               	bcf	3,5	;RP0=0, select bank0
 11711  00D9' 1303               	bcf	3,6	;RP1=0, select bank0
 11712  00DA' 0847'              	movf	sprintf@sp,w
 11713  00DB' 0084               	movwf	4
 11714  00DC' 1783               	bsf	3,7
 11715  00DD' 1C48'              	btfss	sprintf@sp+1,0
 11716  00DE' 1383               	bcf	3,7
 11717  00DF' 1683               	bsf	3,5	;RP0=1, select bank1
 11718  00E0' 1303               	bcf	3,6	;RP1=0, select bank1
 11719  00E1' 0800'              	movf	??_sprintf^(0+128),w
 11720  00E2' 0080               	movwf	0
 11721  00E3' 3001               	movlw	1
 11722  00E4' 1283               	bcf	3,5	;RP0=0, select bank0
 11723  00E5' 1303               	bcf	3,6	;RP1=0, select bank0
 11724  00E6' 07C7'              	addwf	sprintf@sp,f
 11725  00E7' 1803               	skipnc
 11726  00E8' 0AC8'              	incf	sprintf@sp+1,f
 11727  00E9'                    l4770:	
 11728  00E9' 30FF               	movlw	255
 11729  00EA' 1683               	bsf	3,5	;RP0=1, select bank1
 11730  00EB' 1303               	bcf	3,6	;RP1=0, select bank1
 11731  00EC' 0780'              	addwf	sprintf@prec^(0+128),f
 11732  00ED' 1803               	skipnc
 11733  00EE' 0A80'              	incf	(sprintf@prec+1)^(0+128),f
 11734  00EF' 30FF               	movlw	255
 11735  00F0' 0780'              	addwf	(sprintf@prec+1)^(0+128),f
 11736  00F1' 0A00'              	incf	sprintf@prec^(0+128),w
 11737  00F2' 1903               	btfsc	3,2
 11738  00F3' 0A00'              	incf	(sprintf@prec+1)^(0+128),w
 11739  00F4' 1903               	btfsc	3,2
 11740  00F5' 2800'              	goto	L18
 11741                           
 11742                           ;doprnt.c: 1478: {
 11743                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 11744                           
 11745                           ;doprnt.c: 1469: }
 11746                           ;doprnt.c: 1474: while(prec--) {
 11747  00F6' 3000               	movlw	0
 11748  00F7' 1283               	bcf	3,5	;RP0=0, select bank0
 11749  00F8' 0083'              	movwf	___llmod@divisor+3
 11750  00F9' 3000               	movlw	0
 11751  00FA' 0082'              	movwf	___llmod@divisor+2
 11752  00FB' 3000               	movlw	0
 11753  00FC' 0081'              	movwf	___llmod@divisor+1
 11754  00FD' 300A               	movlw	10
 11755  00FE' 0080'              	movwf	___llmod@divisor
 11756  00FF' 1683               	bsf	3,5	;RP0=1, select bank1
 11757  0100' 1303               	bcf	3,6	;RP1=0, select bank1
 11758  0101' 0800'              	movf	sprintf@prec^(0+128),w
 11759  0102' 0080'              	movwf	??_sprintf^(0+128)
 11760  0103' 3001               	movlw	1
 11761  0104'                    u7555:	
 11762  0104' 1003               	clrc
 11763  0105' 0D80'              	rlf	??_sprintf^(0+128),f
 11764  0106' 3EFF               	addlw	-1
 11765  0107' 1D03               	skipz
 11766  0108' 2800'              	goto	u7555
 11767  0109' 1003               	clrc
 11768  010A' 0D00'              	rlf	??_sprintf^(0+128),w
 11769  010B' 3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
 11770  010C' 0084               	movwf	4
 11771  010D' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
 11772  0112' 1283               	bcf	3,5	;RP0=0, select bank0
 11773  0113' 1303               	bcf	3,6	;RP1=0, select bank0
 11774  0114' 008A'              	movwf	___lldiv@divisor
 11775  0115' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
 11776  011A' 008B'              	movwf	___lldiv@divisor+1
 11777  011B' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
 11778  0120' 008C'              	movwf	___lldiv@divisor+2
 11779  0121' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
 11780  0126' 008D'              	movwf	___lldiv@divisor+3
 11781  0127' 1683               	bsf	3,5	;RP0=1, select bank1
 11782  0128' 1303               	bcf	3,6	;RP1=0, select bank1
 11783  0129' 0800'              	movf	(sprintf@val+3)^(0+128),w
 11784  012A' 1283               	bcf	3,5	;RP0=0, select bank0
 11785  012B' 1303               	bcf	3,6	;RP1=0, select bank0
 11786  012C' 0091'              	movwf	___lldiv@dividend+3
 11787  012D' 1683               	bsf	3,5	;RP0=1, select bank1
 11788  012E' 1303               	bcf	3,6	;RP1=0, select bank1
 11789  012F' 0800'              	movf	(sprintf@val+2)^(0+128),w
 11790  0130' 1283               	bcf	3,5	;RP0=0, select bank0
 11791  0131' 1303               	bcf	3,6	;RP1=0, select bank0
 11792  0132' 0090'              	movwf	___lldiv@dividend+2
 11793  0133' 1683               	bsf	3,5	;RP0=1, select bank1
 11794  0134' 1303               	bcf	3,6	;RP1=0, select bank1
 11795  0135' 0800'              	movf	(sprintf@val+1)^(0+128),w
 11796  0136' 1283               	bcf	3,5	;RP0=0, select bank0
 11797  0137' 1303               	bcf	3,6	;RP1=0, select bank0
 11798  0138' 008F'              	movwf	___lldiv@dividend+1
 11799  0139' 1683               	bsf	3,5	;RP0=1, select bank1
 11800  013A' 1303               	bcf	3,6	;RP1=0, select bank1
 11801  013B' 0800'              	movf	sprintf@val^(0+128),w
 11802  013C' 1283               	bcf	3,5	;RP0=0, select bank0
 11803  013D' 1303               	bcf	3,6	;RP1=0, select bank0
 11804  013E' 008E'              	movwf	___lldiv@dividend
 11805  013F' 120A' 118A' 2000' 120A' 118A' 	fcall	___lldiv
 11806  0144' 1283               	bcf	3,5	;RP0=0, select bank0
 11807  0145' 1303               	bcf	3,6	;RP1=0, select bank0
 11808  0146' 080D'              	movf	?___lldiv+3,w
 11809  0147' 0087'              	movwf	___llmod@dividend+3
 11810  0148' 080C'              	movf	?___lldiv+2,w
 11811  0149' 0086'              	movwf	___llmod@dividend+2
 11812  014A' 080B'              	movf	?___lldiv+1,w
 11813  014B' 0085'              	movwf	___llmod@dividend+1
 11814  014C' 080A'              	movf	?___lldiv,w
 11815  014D' 0084'              	movwf	___llmod@dividend
 11816  014E' 120A' 118A' 2000' 120A' 118A' 	fcall	___llmod
 11817  0153' 1283               	bcf	3,5	;RP0=0, select bank0
 11818  0154' 1303               	bcf	3,6	;RP1=0, select bank0
 11819  0155' 0800'              	movf	?___llmod,w
 11820  0156' 3E30               	addlw	48
 11821  0157' 1683               	bsf	3,5	;RP0=1, select bank1
 11822  0158' 1303               	bcf	3,6	;RP1=0, select bank1
 11823  0159' 0080'              	movwf	(??_sprintf+1)^(0+128)
 11824  015A' 0800'              	movf	(??_sprintf+1)^(0+128),w
 11825  015B' 0080'              	movwf	sprintf@c^(0+128)
 11826                           
 11827                           ;doprnt.c: 1523: }
 11828                           ;doprnt.c: 1524: ((*sp++ = (c)));
 11829  015C' 0800'              	movf	sprintf@c^(0+128),w
 11830  015D' 2800'              	goto	L9
 11831  015E'                    l4774:	
 11832                           ;doprnt.c: 1525: }
 11833                           ;doprnt.c: 1533: }
 11834                           ;doprnt.c: 1535: alldone:
 11835                           
 11836                           
 11837                           ;doprnt.c: 1538: *sp = 0;
 11838  015E' 1283               	bcf	3,5	;RP0=0, select bank0
 11839  015F' 1303               	bcf	3,6	;RP1=0, select bank0
 11840  0160' 0847'              	movf	sprintf@sp,w
 11841  0161' 0084               	movwf	4
 11842  0162' 1783               	bsf	3,7
 11843  0163' 1C48'              	btfss	sprintf@sp+1,0
 11844  0164' 1383               	bcf	3,7
 11845  0165' 0180               	clrf	0
 11846  0166' 0008               	return
 11847  0167'                    L18:	
 11848  0167'                    __end_of_sprintf:	
 11849                           ;doprnt.c: 1540: return 0;
 11850                           ;	Return value of _sprintf is never used
 11851                           
 11852  0167' 120A' 118A' 2800'  	ljmp	l4772


Data Sizes:
    Strings     53
    Constant    118
    Data        0
    BSS         126
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      11
    BANK0            80     80      80
    BANK1            80     72      78
    BANK3            96      0      35
    BANK2            96      0      80

Pointer List with Targets:

    memset@p1	PTR void  size(1) Largest target is 15
		 -> main@GPS_Buffer(BANK1[15]), 

    memset@p	PTR unsigned char  size(1) Largest target is 15
		 -> main@GPS_Buffer(BANK1[15]), 

    atol@s	PTR const unsigned char  size(1) Largest target is 15
		 -> get_gpstime@Time_Buffer(BANK0[15]), 

    atof@s	PTR const unsigned char  size(1) Largest target is 15
		 -> get_altitude@Alt_Buffer(BANK1[12]), get_longitude@Long_Buffer(BANK1[15]), get_latitude@Lat_Buffer(BANK1[15]), 

    strtod@s	PTR const unsigned char  size(1) Largest target is 15
		 -> get_altitude@Alt_Buffer(BANK1[12]), get_longitude@Long_Buffer(BANK1[15]), get_latitude@Lat_Buffer(BANK1[15]), 

    strtod@res	PTR PTR const unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_9(CODE[9]), STR_8(CODE[5]), STR_6(CODE[6]), STR_4(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 15
		 -> Data_Buffer(BANK3[15]), main@GPS_Buffer(BANK1[15]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LCD_String_xy@str	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_7(CODE[6]), STR_5(CODE[7]), STR_3(CODE[6]), STR_1(CODE[11]), 

    LCD_String@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_7(CODE[6]), STR_5(CODE[7]), STR_3(CODE[6]), STR_2(CODE[3]), 
		 -> Data_Buffer(BANK3[15]), STR_1(CODE[11]), main@GPS_Buffer(BANK1[15]), 

    sp__memset	PTR void  size(1) Largest target is 15
		 -> main@GPS_Buffer(BANK1[15]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _Serial_ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _get_longitude->_atof
    _get_latitude->_atof
    _get_gpstime->_atol
    _atol->___lmul
    _get_altitude->_atof
    _atof->_strtod
    _strtod->___ftneg
    ___altoft->___ftpack
    _convert_to_degrees->___ftadd
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    _convert_time_to_UTC->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___bmul
    ___bmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___lldiv->___llmod
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftneg->___ftmul
    _USART_Init->___fttol
    ___lbtoft->___ftpack
    ___fttol->_scale
    _LCD_String_xy->_LCD_String
    _LCD_String->_LCD_Char
    _LCD_Char->_MSdelay
    _LCD_Init->_LCD_Command
    _LCD_Command->_MSdelay

Critical Paths under _Serial_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_convert_time_to_UTC
    _convert_time_to_UTC->_sprintf

Critical Paths under _Serial_ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Serial_ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Serial_ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                29    29      0  168609
                                             43 BANK1     29    29      0
                           _LCD_Init
                         _LCD_String
                      _LCD_String_xy
                         _USART_Init
                _convert_time_to_UTC
                 _convert_to_degrees
                       _get_altitude
                        _get_gpstime
                       _get_latitude
                      _get_longitude
                             _memset
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _memset                                               7     3      4     617
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _get_longitude                                       25    22      3   15749
                                             73 BANK0      4     1      3
                                              0 BANK1     21    21      0
                               _atof
 ---------------------------------------------------------------------------------
 (1) _get_latitude                                        25    22      3   15749
                                             73 BANK0      4     1      3
                                              0 BANK1     21    21      0
                               _atof
 ---------------------------------------------------------------------------------
 (1) _get_gpstime                                         25    21      4    1208
                                             28 BANK0     25    21      4
                               _atol
 ---------------------------------------------------------------------------------
 (2) _atol                                                15    11      4     995
                                             13 BANK0     15    11      4
                             ___lmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (1) _get_altitude                                        22    19      3   15715
                                             73 BANK0      4     1      3
                                              0 BANK1     18    18      0
                               _atof
 ---------------------------------------------------------------------------------
 (2) _atof                                                 5     1      4   15432
                                             68 BANK0      5     1      4
                             _strtod
 ---------------------------------------------------------------------------------
 (3) _strtod                                              29    26      3   15311
                                             39 BANK0     29    26      3
                           ___altoft
                             ___bmul
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                             ___lmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (4) _isspace                                              2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              13     5      8     396
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) ___altoft                                             8     4      4    2517
                                              8 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _convert_to_degrees                                  17    14      3   16068
                                             65 BANK0     14    11      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             16    10      6    3188
                                              8 BANK0     16    10      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2511
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _convert_time_to_UTC                                 15    11      4   48474
                                             28 BANK1     15    11      4
                            ___lldiv
                            ___llmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    35      9   46346
                                             71 BANK0      9     0      9
                                              0 BANK1     28    28      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               12     9      3    9787
                                             36 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              19    16      3    9508
                                             36 BANK0     16    13      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    5076
                                             20 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                             ___bmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     666
                                             16 BANK0      4     3      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1603
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1745
                                              7 BANK0      9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         16    10      6     409
                                              0 BANK0     16    10      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     552
                                              0 BANK0     20    14      6
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1476
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    2415
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8    1142
                                              0 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     692
                                             10 BANK0     14     6      8
                            ___llmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4219
                                             65 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3993
                                             52 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     390
                                             36 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     772
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                          11     7      4    3665
                                             59 BANK0     11     7      4
                            ___aldiv
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    2279
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2248
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     517
                                             45 BANK0     14    10      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     705
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _LCD_String_xy                                        3     1      2    2368
                                              9 BANK0      3     1      2
                        _LCD_Command
                         _LCD_String
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           4     2      2    1012
                                              7 BANK0      2     0      2
                           _LCD_Char
 ---------------------------------------------------------------------------------
 (3) _LCD_Char                                             1     1      0     557
                                              6 BANK0      1     1      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0    1083
                        _LCD_Command
                            _MSdelay
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          1     1      0     557
                                              6 BANK0      1     1      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (4) _MSdelay                                              6     4      2     526
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Serial_ISR                                           6     6      0     133
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCD_Command
       _MSdelay
     _MSdelay
   _LCD_String
     _LCD_Char
       _MSdelay
   _LCD_String_xy
     _LCD_Command
       _MSdelay
     _LCD_String
       _LCD_Char
         _MSdelay
   _USART_Init
     ___aldiv
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
     ___lbtoft
       ___ftpack
   _convert_time_to_UTC
     ___lldiv
       ___llmod (ARG)
     ___llmod
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___bmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
       ___lldiv
         ___llmod (ARG)
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
   _convert_to_degrees
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
     ___ftdiv
       ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
     ___ftneg
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
   _get_altitude
     _atof
       _strtod
         ___altoft
           ___ftpack
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
         ___lmul
         _isdigit
         _isspace
   _get_gpstime
     _atol
       ___lmul
       _isdigit
   _get_latitude
     _atof
       _strtod
         ___altoft
           ___ftpack
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
         ___lmul
         _isdigit
         _isspace
   _get_longitude
     _atof
       _strtod
         ___altoft
           ___ftpack
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
         ___lmul
         _isdigit
         _isspace
   _memset
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
     ___ftneg
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
     ___ftsub
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
     ___lldiv
       ___llmod (ARG)
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___bmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___bmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)

 _Serial_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0     11C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     48      4E       7       97.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0      23       9       36.5%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0      50      11       83.3%
DATA                 0      0     11C      12        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Sep 27 05:34:34 2021

                   ___altoft@exp 000E                                pc 0002                   ___bmul@product 0012  
                 ?_get_longitude 0049                      __CFG_CP$OFF 0000                     ?_LCD_Command 0000  
                  ___altoft@sign 000F                               l83 000D                               l95 000D  
                             l89 000D                     ___awdiv@sign 000D                               fsr 0004  
                   main@Altitude 003F              ___wmul@multiplicand 0002                      ?_LCD_String 0007  
          get_latitude@_latitude 000F                     ___ftadd@exp1 0040                     ___ftadd@exp2 003F  
                    __CFG_LVP$ON 0000            get_altitude@_Altitude 000C                     ___ftadd@sign 003E  
                            l233 009D                              l261 042B                              l510 0078  
                            l169 0004                              l505 00B9                              l282 00CA  
                            l428 0012                              l373 000C                              l550 0285  
                            l711 0032                              l527 017E                              l721 00B7  
                            l642 0127                              l634 00DE                              l580 0003  
                            l661 004D                              l662 0055                              l654 0038  
                            l762 0074                              l685 00A8                              _GIE 005F  
                            _RC0 0038                              _RC1 0039                              _RC2 003A  
                   __CFG_CPD$OFF 0000                              _E_W 0004                              _N_S 0005  
                   main@Latitude 0042                              fsr0 0004                              indf 0000  
                   ___awmod@sign 0006        convert_to_degrees@dec_deg 0047                     __CFG_IESO$ON 0000  
                   __CFG_FOSC$XT 0000        convert_to_degrees@decimal 004C                      _sprintf$833 0006  
      convert_to_degrees@degrees 004A                     ___ftdiv@cntr 0012                     ___ftdiv@sign 0017  
                           l4002 004E                             l3220 0085                             l4100 00BA  
                           l3214 0069                             l3206 004C                             l3230 0012  
                           l4006 0056                             l4030 0019                             l4022 0013  
                           l3216 0077                             l3208 005C                             l4104 00CC  
                           l3240 004A                             l3232 0022                             l4032 0027  
                           l4040 0040                             l4200 00A5                             l4114 00EF  
                           l4018 000C                             l4130 002E                             l3244 0057  
                           l4044 0048                             l4036 0035                             l4124 0018  
                           l4054 0029                             l5006 0036                             l2712 0029  
                           l4064 003F                             l2472 0004                             l4152 0092  
                           l4144 0073                             l5040 0019                             l4082 006E  
                           l4058 0030                             l4250 0174                             l4242 00E6  
                           l4410 015D                             l4402 014E                             l4314 000D  
                           l5026 0036                             l3188 001A                             l2716 0050  
                           l4084 007A                             l4076 0059                             l2900 008F  
                           l2476 000A                             l4172 002E                             l4324 002A  
                           l4316 0020                             l4094 0098                             l4086 007F  
                           l2910 00BA                             l2902 009F                             l4166 0018  
                           l4430 01C2                             l4342 004B                             l4334 0049  
                           l4326 002E                             l4096 00A4                             l4088 0083  
                           l2920 0022                             l4184 006D                             l4272 013E  
                           l4424 0182                             l4336 003D                             l4328 0032  
                           l4506 0009                             l4522 0038                             l4290 0294  
                           l4266 00CC                             l4426 01A5                             l4362 00C0  
                           l4516 000A                             l2908 00AC                             l4196 0095  
                           l4188 007D                             l4284 0222                             l4276 015D  
                           l4700 0533                             l4620 021D                             l4612 01A6  
                           l4460 0207                             l4452 01FA                             l4380 00E6  
                           l4518 001A                             l4526 0045                             l4534 0006  
                           l2926 0041                             l4470 0246                             l4374 00DC  
                           l4536 0018                             l4296 0004                             l2960 011C  
                           l2952 00FF                             l2936 0088                             l4640 02E9  
                           l4624 0244                             l4464 0224                             l4456 0201  
                           l4368 00D0                             l3906 0015                             l4546 0000  
                           l2962 012A                             l2954 010F                             l2890 0073  
                           l2882 0053                             l4722 001B                             l4650 034F  
                           l4570 004E                             l4466 0229                             l4378 00E2  
                           l4810 0036                             l3908 0022                             l2868 001A  
                           l4740 0056                             l4716 0000                             l4660 03D2  
                           l4636 02C8                             l4628 028A                             l4724 0020  
                           l4580 00BB                             l4572 0097                             l4556 0031  
                           l3924 000A                             l4492 027E                             l4812 007B  
                           l3870 000A                             l3918 000E                             l4734 0046  
                           l4654 03CC                             l4398 0148                             l4752 0098  
                           l4680 04D3                             l3928 0020                             l3960 0011  
                           l4850 0023                             l3874 0011                             l4770 00E9  
                           l4746 005C                             l4666 040E                             l4586 00CB  
                           l4578 009F                             l3946 0016                             l3962 0012  
                           l4498 029A                             l4818 0090                             l4940 001E  
                           l4932 000A                             l4860 0043                             l3884 003D  
                           l3876 001D                             l3980 0017                             l4756 00B0  
                           l4692 050C                             l4596 0124                             l4772 0006  
                           l3948 0028                             l3886 0047                             l3878 0022  
                           l3990 001F                             l3974 000C                             l4686 04F0  
                           l4774 015E                             l4926 0007                             l4936 0014  
                           l4944 002C                             l4872 0078                             l3992 002D  
                           l4952 0003                             l4858 0033                             l4954 001C  
                           l4876 0086                             l4868 006B                             l3998 0043  
                           l4990 00B1                             l4798 0028                             l4974 0036  
                           l4888 000C                             l4992 00CA                             STR_1 0086  
                           STR_2 00B8                             STR_3 00A1                             STR_4 00AD  
                           STR_5 009A                             STR_6 00AD                             STR_7 00A7  
                           STR_8 00B3                             STR_9 0091                             _CREN 00C4  
                           u4025 00AE                             u4115 0100                             u4145 011E  
                           u4065 008A                             u4075 00B9                             u6005 0044  
                           u3651 001C                             u3652 001D                             u3653 0022  
                           u3654 0023                             u3671 0043                             u6215 005A  
                           u3672 0044                             u4625 006B                             u3673 0049  
                           u6305 0099                             u4705 004B                             u6065 001C  
                           u3674 004A                             u7115 000B                             _RCIF 0065  
                           u4565 0021                             u6245 006F                             u6085 002D  
                           u6405 0074                             u3935 0055                             u6095 0036  
                           u7215 013C                             u6415 0085                             u4665 0016  
                           u7065 000E                             u3945 0066                             u6505 007E  
                           u6425 0093                             u4595 004D                             u5715 0040  
                           u6275 0084                             u3955 0074                             u6515 0086  
                           u4685 0024                             u7085 0028                             u7325 03D5  
                           u4695 0039                             u7095 0039                             u7415 05A3  
                           u7335 0404                             u7255 024F                             u6465 003A  
                           u7505 008E                             u7425 0653                             u7265 0295  
                           u6385 0040                             u5755 005C                             u5675 0016  
                           u3995 0090                             u6555 00A6                             u6475 004C  
                           u6395 0052                             u7620 0064                             u6565 00AE  
                           u7525 00A7                             u7365 0439                             u5845 0022  
                           u7621 0065                             u7622 006A                   ??_get_altitude 004C  
                           u5695 0031                             u7535 00C1                             u7295 02C6  
                           u5855 002A                             u7623 006B                             u7705 0045  
                           u7385 04F9                             u5795 000A                             u7715 005A  
                           u6675 000D                             u7555 0104                             u7395 0506  
                           u7725 006C                             u6685 0014                             u5965 0022  
                           u5885 001B                             u7495 005F                             u6775 0070  
                           u5985 002E                             u5995 003A                             u7685 0037  
      convert_to_degrees@minutes 0044                     __CFG_WRT$OFF 0000                    __CFG_FCMEN$ON 0000  
                           _atof 0000                             _atol 0000                             _main 0000  
                   ___ftpack@arg 0000                     ___ftpack@exp 0003                             btemp 007E  
          get_latitude@lat_index 0014                    __CFG_BOREN$ON 0000                   ??_get_latitude 004C  
                           start 0000*                 __end_of_MSdelay 0029                    _LCD_String_xy 0000  
              ___bmul@multiplier 0013                    __CFG_MCLRE$ON 0000                     ___ftmul@cntr 0022  
                   ___ftmul@sign 0023                    main@Longitude 0045                     ___fttol@exp1 003A  
                   ___fttol@lval 0036                 __end_of_LCD_Char 0014                      _Data_Buffer 0014  
               __end_of_LCD_Init 0037                  __end_of___aldiv 008F                            ?_atof 0044  
                          ?_atol 000D                            ?_main 0000                  __end_of___awdiv 005B  
                __end_of___ftadd 0109                    __CFG_WDTE$OFF 0000                  __end_of___awmod 004D  
                __end_of___ftdiv 00B8                  __end_of___ftneg 000A                  __end_of___lldiv 0060  
                __end_of___ftmul 00D3                  ___awdiv@divisor 0007                  __end_of___llmod 004E  
                __end_of___ftsub 0021                  __end_of___fttol 008E                            i1l122 0070  
                ___awdiv@counter 000C                            _RCREG 001A                            _RCSTA 0018  
                          _SPBRG 0099                            _PORTB 0006                            _TRISB 0086  
                          _TRISC 0087                            _TXSTA 0098              ___lmul@multiplicand 0004  
                   ___lltoft@exp 000D  convert_to_degrees@NMEA_lat_long 0041                    ___awtoft@sign 000D  
                __end_of_dpowers 0038                            _scale 0000                  __end_of_isdigit 0010  
       get_longitude@Long_Buffer 0000                    ___ftpack@sign 0004                            atof@s 0048  
                          atol@a 0016                            atol@c 001B                            atol@s 001A  
                __end_of_isspace 0014                            pclath 000A            get_altitude@alt_index 0010  
                          status 0003                            wtemp0 007E              __size_of_LCD_String 0025  
                __end_of_sprintf 0167                   ?_LCD_String_xy 0009                      ?_USART_Init 003B  
        _convert_time_to_UTC$828 0021                  __initialization 0000                  ??_get_longitude 004C  
                   __end_of_atof 0011                     __end_of_atol 0099                     __end_of_main 01FC  
               get_gpstime@_Time 0030                 get_gpstime@index 0034                           ??_atof 0048  
                         ??_atol 0011                           ??_main 002B                    ___fttol@sign1 0035  
           __size_of__tdiv_to_l_ 00C3      __size_of_convert_to_degrees 00D2                 __end_of___altoft 0042  
               ___llmod@dividend 0004                           ?_scale 0024                 ___awdiv@dividend 0009  
               __end_of___awtoft 0025                 __end_of___ftpack 006E                 __end_of___lbtoft 001E  
               LCD_String_xy@pos 0009                 LCD_String_xy@row 000B                 LCD_String_xy@str 000A  
               __end_of___lltoft 002F                        ??_MSdelay 0002                           i1l3822 000E  
                         i1l3834 0030                           i1l3826 001B                           i1l3860 0064  
                         i1l3844 004B                           i1l3846 0050                           _TRISC6 043E  
                         _TRISC7 043F                       _Serial_ISR 0000                   __CFG_PWRTE$OFF 0000  
              get_altitude@index 0011               get_longitude@index 0013                 __end_of__powers_ 005F  
                         ___bmul 0000                           ___ftge 0000                           ___lmul 0000  
                      ??___aldiv 0008                           ___wmul 0000                        ??___awdiv 000B  
                      ??___ftadd 003A                        ??___awmod 0004                        ??___ftdiv 000E  
                      ??___ftneg 0027                        ??___lldiv 0012                        ??___ftmul 001A  
                      ??___llmod 0008                        ??___ftsub 0047                        ??___fttol 0031  
           __size_of_get_gpstime 0033                           _memset 0000                           _fround 0000  
               ___awdiv@quotient 000E                  ___awmod@divisor 0000             __end_of_get_altitude 005D  
                ___awmod@counter 0005             __size_of_LCD_Command 0014                           _strtod 0000  
          ___ftmul@f3_as_product 001F          get_longitude@_longitude 000F                        ??_isdigit 0000  
           __end_of_get_latitude 0070                           saved_w 007E                        ??_isspace 0000  
            __size_of_USART_Init 0061          get_latitude@lat_pointer 0012                        ??_sprintf 0000  
                      ?_LCD_Char 0000          __end_of__initialization 001C                       ___altoft@c 0008  
                      ?_LCD_Init 0000                  ??_LCD_String_xy 000B                       ___ftadd@f1 0034  
                     ___ftadd@f2 0037                       ___ftge@ff1 0000                       ___ftge@ff2 0003  
                     ___ftdiv@f1 000B                       ___ftdiv@f2 0008                       ___ftdiv@f3 0013  
                     ___ftneg@f1 0024                       ___awtoft@c 0008              ___bmul@multiplicand 0010  
                     ___lbtoft@c 000F                       ___ftmul@f1 0014                       ___ftmul@f2 0017  
                     ___ftsub@f1 0044                       ___ftsub@f2 0041                       ___fttol@f1 002D  
                 __pcstackCOMMON 0000                       ___lltoft@c 0008                    __end_of_scale 02B3  
                   ??_LCD_String 0009                       __div_to_l_ 0000                  __div_to_l_@exp1 0013  
                __div_to_l_@cntr 0012                          ??_scale 0027                  __div_to_l_@quot 000E  
                     __pbssBANK1 0000                       __pbssBANK2 0000                       __pbssBANK3 0000  
                     ??_LCD_Char 0006                       ??_LCD_Init 0007               __end_of_LCD_String 0025  
                  __div_to_l_@f1 0000                    __div_to_l_@f2 0003                      ?_Serial_ISR 0000  
                     __pmaintext 0000          get_longitude@long_index 0014                          ?___bmul 0010  
                        ?___ftge 0000     __size_of_convert_time_to_UTC 0121                          ?___lmul 0000  
                        ?___wmul 0000                       __pintentry 0000                        ?___altoft 0008  
                        ?_memset 0000                          ?_fround 0024                   ___lmul@product 0009  
                      ?___awtoft 0008                        ?___ftpack 0000                        ?___lbtoft 0008  
                      ?___lltoft 0008                          ?_strtod 0027                     _CommaCounter 0004  
                   _IsLastEndGGA 0002                       __stringtab 0000                          _MSdelay 0000  
                   _GGA_Pointers 0000                    LCD_String@str 0007                     ??_USART_Init 003F  
              __end_of__npowers_ 0086            __size_of_get_altitude 005D                          ___aldiv 0000  
                __size_of___bmul 0013                  __size_of___ftge 005F                          ___awdiv 0000  
                __size_of___lmul 0041                          ___ftadd 0000                          ___awmod 0000  
                        ___ftdiv 0000                          ___ftneg 0000                          ___lldiv 0000  
                __size_of___wmul 0023                          ___ftmul 0000                          ___llmod 0000  
                        ___ftsub 0000                          ___fttol 0000                       _fround$830 0030  
                     _fround$831 002D                       ??___altoft 000C            __size_of_get_latitude 0070  
                     ??___awtoft 000B                       ??___ftpack 0005                       ??___lbtoft 000B  
                __size_of_memset 001E                  __size_of_fround 01A6                       ??___lltoft 000C  
                        __ptext1 0000                          __ptext2 0000                          __ptext3 0000  
                        __ptext4 0000                          __ptext5 0000                          __ptext6 0000  
                        __ptext7 0000                          __ptext8 0000                          __ptext9 0000  
         convert_time_to_UTC@min 0027           convert_time_to_UTC@sec 0029                        _GGA_Index 0000  
                    ?__div_to_l_ 0000                  __size_of_strtod 02A1                   USART_Init@temp 0043  
                        _dpowers 0010                          _isdigit 0000                 ___awmod@dividend 0002  
               ___aldiv@dividend 0004              __size_of_Serial_ISR 007C                          _isspace 0000  
             __end_of_USART_Init 0061                          _sprintf 0000                          clrloop0 0001  
           end_of_initialization 001C                     _get_altitude 0000                          memset@c 0000  
                        memset@n 0002                          memset@p 0005                   LCD_Command@cmd 0006  
                ___lldiv@divisor 000A                     _get_latitude 0000                  ___lldiv@counter 0017  
                      _RCSTAbits 0018                 ___aldiv@quotient 000B                          psplit$0 1C003B  
        get_altitude@alt_pointer 000F            __end_of_get_longitude 0070                   __tdiv_to_l_@f1 0000  
                 __tdiv_to_l_@f2 0003                    ??__tdiv_to_l_ 0006                          strtod@s 0043  
     __end_of_convert_to_degrees 00D2              USART_Init@baud_rate 003B                      ___ftdiv@exp 0016  
              __size_of_LCD_Char 0014                __size_of_LCD_Init 0037              __size_of__div_to_l_ 0133  
                  ??_get_gpstime 0020                       _strtod$515 003A                       _strtod$516 002E  
                     _strtod$517 0031                      ___ftmul@exp 001E                       _strtod$518 0034  
                     _strtod$519 0037                    _IsItGGAString 0003                    ??_LCD_Command 0006  
                 __end_of___bmul 0013                   __end_of___ftge 005F                   __end_of___lmul 0041  
              LCD_Char@char_data 0006                   __end_of___wmul 0023                   __end_of_memset 001E  
                 __end_of_fround 01A6                   __end_of_strtod 02A1              start_initialization 0000  
            __end_of__tdiv_to_l_ 00C3              _convert_time_to_UTC 0000                  ___llmod@divisor 0000  
                ___llmod@counter 0009                     ??_Serial_ISR 0000            __end_of_LCD_String_xy 0038  
                       ??___bmul 0011             ?_convert_time_to_UTC 001C                         ??___ftge 0006  
                       ??___lmul 0008                         ??___wmul 0004                         ??_memset 0004  
                       ??_fround 0027              __end_of_get_gpstime 0033                    sprintf@tmpval 000E  
                       ??_strtod 002A                __size_of___altoft 0042                       fround@prec 0033  
              __size_of___awtoft 0025                __size_of___ftpack 006E                __size_of___lbtoft 001E  
            __end_of_LCD_Command 0014                __size_of___lltoft 002F                      __pbssCOMMON 0000  
                      ___latbits 0002                    __pcstackBANK0 0000                    __pcstackBANK1 0000  
             __end_of_Serial_ISR 007C                         ?_MSdelay 0000                      sprintf@flag 000A  
                    sprintf@fval 0018                      sprintf@prec 0016            ??_convert_time_to_UTC 0020  
                       ?___aldiv 0000                         ?___awdiv 0007                         ?___ftadd 0034  
                       ?___awmod 0000                         ?___ftdiv 0008                         ?___ftneg 0024  
                       ?___lldiv 000A                         ?___ftmul 0014                         ?___llmod 0000  
                       ?___ftsub 0041                        __npowers_ 005F                         ?___fttol 002D  
                      __pstrings 0000                      __tdiv_to_l_ 0000                     ??__div_to_l_ 0006  
                       ?_isdigit 0000                         ?_isspace 0000                        _scale$832 0029  
                       _GGA_CODE 0000                       pnum$text16 001C                         ?_sprintf 0047  
                 __size_of_scale 02B3                         MSdelay@i 0002                         MSdelay@j 0004  
                ___aldiv@divisor 0000                         _LCD_Char 0000                interrupt_function 0000  
                ___aldiv@counter 0009                         _LCD_Init 0000                   ___wmul@product 0004  
                      clear_ram0 0000                         _PIE1bits 008C               __end_of__div_to_l_ 0133  
                    _get_gpstime 0000                      strtod@flags 003D                      strtod@expon 003E  
                    _LCD_Command 0000          Serial_ISR@received_char 0005                      __stringbase 000F  
              ___wmul@multiplier 0000                         _IsEndGGA 0003                ___lmul@multiplier 0000  
             _convert_to_degrees 0000                 __size_of_MSdelay 0029              ?_convert_to_degrees 0041  
               __size_of___aldiv 008F                 __size_of___awdiv 005B                 __size_of___ftadd 0109  
               __size_of___awmod 004D                 __size_of___ftdiv 00B8                 __size_of___ftneg 000A  
               __size_of___lldiv 0060                         ___altoft 0000                 __size_of___ftmul 00D3  
               __size_of___llmod 004E                 __size_of___ftsub 0021                 __size_of___fttol 008E  
                       ___awtoft 0000                         ___ftpack 0000                         ___lbtoft 0000  
             __end_of__stringtab 0010                         ___lltoft 0000                      _isdigit$604 0000  
         get_latitude@Lat_Buffer 0000                       sprintf@exp 000C                       sprintf@val 0012  
           ??_convert_to_degrees 0044                 __size_of_isdigit 0010                 __size_of_isspace 0014  
                       __ptext10 0000                         __ptext11 0000                         __ptext20 0000  
                       __ptext12 0000                         __ptext21 0000                         __ptext13 0000  
                       __ptext30 0000                         __ptext22 0000                         __ptext14 0000  
                       __ptext31 0000                         __ptext23 0000                         __ptext15 0000  
                       __ptext40 0000                         __ptext32 0000                         __ptext24 0000  
                       __ptext16 0000                         __ptext41 0000                         __ptext33 0000  
                       __ptext25 0000                         __ptext17 0000                         __ptext42 0000  
                       __ptext34 0000                         __ptext26 0000                         __ptext18 0000  
                       __ptext43 0000                         __ptext35 0000                         __ptext27 0000  
                       __ptext19 0000                         __ptext44 0000                         __ptext36 0000  
                       __ptext28 0000                         __ptext45 0000                         __ptext37 0000  
                       __ptext29 0000                         __ptext38 0000                         __ptext39 0000  
              __CFG_BOR4V$BOR40V 0000                         __powers_ 0038                       _GGA_Buffer 0000  
        convert_time_to_UTC@hour 0025                 __size_of_sprintf 0000           __size_of_get_longitude 0070  
                  __size_of_atof 0011                    __size_of_atol 0099                    __size_of_main 01FC  
                     MSdelay@val 0000                       strtod@eexp 003C                         atol@sign 0015  
                       main@Time 003B                       _LCD_String 0000                   main@GPS_Buffer 002C  
                    _isspace$607 0000           get_gpstime@Time_Buffer 0021               pnum$text16_split_1 003B  
                     _INTCONbits 000B                         isdigit@c 0001                         memset@p1 0006  
                       scale@scl 002C                         intlevel1 0000*                       sprintf@ap 0009  
               __tdiv_to_l_@exp1 000F                        sprintf@sp 0047                 __tdiv_to_l_@cntr 000E  
               __tdiv_to_l_@quot 000A      convert_time_to_UTC@UTC_Time 001C                         isspace@c 0001  
               ___lldiv@dividend 000E                        stringcode 000A                   _USART_Init$829 003F  
                      strtod@res 0027        get_longitude@long_pointer 0012                get_latitude@index 0013  
         get_altitude@Alt_Buffer 0000                    _get_longitude 0000                     ?__tdiv_to_l_ 0000  
                       sprintf@c 001B                         sprintf@f 0049                 ___lldiv@quotient 0013  
                       stringdir 000A                         stringtab 0000           __size_of_LCD_String_xy 0038  
                   ___aldiv@sign 000A                         strtod@_u 003F                    ?_get_altitude 0049  
    __end_of_convert_time_to_UTC 0121                    ?_get_latitude 0049                       _USART_Init 0000  
                   ?_get_gpstime 001C  
